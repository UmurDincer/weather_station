
weather_measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005830  08005830  00015830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005880  08005880  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005880  08005880  00015880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005888  08005888  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005888  08005888  00015888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800588c  0800588c  0001588c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000016c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001dc  200001dc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f6ba  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c6e  00000000  00000000  0002f75a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  000313c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc0  00000000  00000000  00032218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002118f  00000000  00000000  00032fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011025  00000000  00000000  00054167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccaf7  00000000  00000000  0006518c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131c83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042ac  00000000  00000000  00131cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005814 	.word	0x08005814

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005814 	.word	0x08005814

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <bmp180_init>:

BMP180_Calibration_Data bmp180_calib;

int16_t ut = 0;

void bmp180_init(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af02      	add	r7, sp, #8
	uint8_t regAddr = BMP180_REG_CALIB_START;
 8000e9a:	23aa      	movs	r3, #170	; 0xaa
 8000e9c:	75fb      	strb	r3, [r7, #23]
	uint8_t calibData[22] = {0};
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	821a      	strh	r2, [r3, #16]

	if(HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR_WRITE, &regAddr , 1, HAL_MAX_DELAY) != HAL_OK){
 8000eb0:	f107 0217 	add.w	r2, r7, #23
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	21ee      	movs	r1, #238	; 0xee
 8000ebe:	483f      	ldr	r0, [pc, #252]	; (8000fbc <bmp180_init+0x128>)
 8000ec0:	f001 fb36 	bl	8002530 <HAL_I2C_Master_Transmit>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d172      	bne.n	8000fb0 <bmp180_init+0x11c>
		return;
	}

	if(HAL_I2C_Master_Receive(&hi2c1, BMP180_ADDR_READ, calibData, 22, HAL_MAX_DELAY) != HAL_OK){
 8000eca:	463a      	mov	r2, r7
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2316      	movs	r3, #22
 8000ed4:	21ef      	movs	r1, #239	; 0xef
 8000ed6:	4839      	ldr	r0, [pc, #228]	; (8000fbc <bmp180_init+0x128>)
 8000ed8:	f001 fc28 	bl	800272c <HAL_I2C_Master_Receive>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d168      	bne.n	8000fb4 <bmp180_init+0x120>
		return;
	}

	bmp180_calib.ac1 = (int16_t)(((uint16_t)calibData[0] << 8) | calibData[1]);
 8000ee2:	783b      	ldrb	r3, [r7, #0]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	787b      	ldrb	r3, [r7, #1]
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b21a      	sxth	r2, r3
 8000ef0:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <bmp180_init+0x12c>)
 8000ef2:	801a      	strh	r2, [r3, #0]
	bmp180_calib.ac2 = (int16_t)(((uint16_t)calibData[2] << 8) | calibData[3]);
 8000ef4:	78bb      	ldrb	r3, [r7, #2]
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	b21a      	sxth	r2, r3
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <bmp180_init+0x12c>)
 8000f04:	805a      	strh	r2, [r3, #2]
	bmp180_calib.ac3 = (int16_t)(((uint16_t)calibData[4] << 8) | calibData[5]);
 8000f06:	793b      	ldrb	r3, [r7, #4]
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	b21a      	sxth	r2, r3
 8000f0c:	797b      	ldrb	r3, [r7, #5]
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <bmp180_init+0x12c>)
 8000f16:	809a      	strh	r2, [r3, #4]
	bmp180_calib.ac4 = (uint16_t)(((uint16_t)calibData[6] << 8) | calibData[7]);
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <bmp180_init+0x12c>)
 8000f2a:	80da      	strh	r2, [r3, #6]
	bmp180_calib.ac5 = (uint16_t)(((uint16_t)calibData[8] << 8) | calibData[9]);
 8000f2c:	7a3b      	ldrb	r3, [r7, #8]
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	7a7b      	ldrb	r3, [r7, #9]
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <bmp180_init+0x12c>)
 8000f3e:	811a      	strh	r2, [r3, #8]
	bmp180_calib.ac6 = (uint16_t)(((uint16_t)calibData[10] << 8) | calibData[11]);
 8000f40:	7abb      	ldrb	r3, [r7, #10]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	7afb      	ldrb	r3, [r7, #11]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <bmp180_init+0x12c>)
 8000f52:	815a      	strh	r2, [r3, #10]
	bmp180_calib.b1  = (int16_t)(((uint16_t)calibData[12] << 8) | calibData[13]);
 8000f54:	7b3b      	ldrb	r3, [r7, #12]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	b21a      	sxth	r2, r3
 8000f5a:	7b7b      	ldrb	r3, [r7, #13]
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <bmp180_init+0x12c>)
 8000f64:	819a      	strh	r2, [r3, #12]
	bmp180_calib.b2  = (int16_t)(((uint16_t)calibData[14] << 8) | calibData[15]);
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	b21a      	sxth	r2, r3
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	4313      	orrs	r3, r2
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <bmp180_init+0x12c>)
 8000f76:	81da      	strh	r2, [r3, #14]
	bmp180_calib.mb  = (int16_t)(((uint16_t)calibData[16] << 8) | calibData[17]);
 8000f78:	7c3b      	ldrb	r3, [r7, #16]
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	7c7b      	ldrb	r3, [r7, #17]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <bmp180_init+0x12c>)
 8000f88:	821a      	strh	r2, [r3, #16]
	bmp180_calib.mc  = (int16_t)(((uint16_t)calibData[18] << 8) | calibData[19]);
 8000f8a:	7cbb      	ldrb	r3, [r7, #18]
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	7cfb      	ldrb	r3, [r7, #19]
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <bmp180_init+0x12c>)
 8000f9a:	825a      	strh	r2, [r3, #18]
	bmp180_calib.md  = (int16_t)(((uint16_t)calibData[20] << 8) | calibData[21]);
 8000f9c:	7d3b      	ldrb	r3, [r7, #20]
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	7d7b      	ldrb	r3, [r7, #21]
 8000fa4:	b21b      	sxth	r3, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <bmp180_init+0x12c>)
 8000fac:	829a      	strh	r2, [r3, #20]
 8000fae:	e002      	b.n	8000fb6 <bmp180_init+0x122>
		return;
 8000fb0:	bf00      	nop
 8000fb2:	e000      	b.n	8000fb6 <bmp180_init+0x122>
		return;
 8000fb4:	bf00      	nop

}
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200000a4 	.word	0x200000a4
 8000fc0:	2000008c 	.word	0x2000008c

08000fc4 <bmp180_read_temperature>:

float bmp180_read_temperature(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af04      	add	r7, sp, #16
	uint8_t CR_data[2] = {0xF4, 0x2E}; //CR[0] is control register address, CR[1] is temperature's address.
 8000fca:	f642 63f4 	movw	r3, #12020	; 0x2ef4
 8000fce:	80bb      	strh	r3, [r7, #4]
	long int x1, x2, b5; // 32 bit storage.
	float temperature;
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR_WRITE, CR_data, 2, HAL_MAX_DELAY);
 8000fd0:	1d3a      	adds	r2, r7, #4
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2302      	movs	r3, #2
 8000fda:	21ee      	movs	r1, #238	; 0xee
 8000fdc:	4834      	ldr	r0, [pc, #208]	; (80010b0 <bmp180_read_temperature+0xec>)
 8000fde:	f001 faa7 	bl	8002530 <HAL_I2C_Master_Transmit>

	HAL_Delay(5); // max conversion time for temperature 4.5 ms
 8000fe2:	2005      	movs	r0, #5
 8000fe4:	f000 fea0 	bl	8001d28 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR_READ, 0xF6, I2C_MEMADD_SIZE_8BIT, CR_data, 2, HAL_MAX_DELAY);
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	9302      	str	r3, [sp, #8]
 8000fee:	2302      	movs	r3, #2
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	22f6      	movs	r2, #246	; 0xf6
 8000ffa:	21ef      	movs	r1, #239	; 0xef
 8000ffc:	482c      	ldr	r0, [pc, #176]	; (80010b0 <bmp180_read_temperature+0xec>)
 8000ffe:	f001 fdbb 	bl	8002b78 <HAL_I2C_Mem_Read>
	ut = (CR_data[0] << 2) + CR_data[1];
 8001002:	793b      	ldrb	r3, [r7, #4]
 8001004:	b29b      	uxth	r3, r3
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	b29a      	uxth	r2, r3
 800100a:	797b      	ldrb	r3, [r7, #5]
 800100c:	b29b      	uxth	r3, r3
 800100e:	4413      	add	r3, r2
 8001010:	b29b      	uxth	r3, r3
 8001012:	b21a      	sxth	r2, r3
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <bmp180_read_temperature+0xf0>)
 8001016:	801a      	strh	r2, [r3, #0]

	x1 = (float)(ut - bmp180_calib.ac6) * (float)(bmp180_calib.ac5 / (1 << 15));
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <bmp180_read_temperature+0xf0>)
 800101a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101e:	461a      	mov	r2, r3
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <bmp180_read_temperature+0xf4>)
 8001022:	895b      	ldrh	r3, [r3, #10]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102e:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <bmp180_read_temperature+0xf4>)
 8001030:	891b      	ldrh	r3, [r3, #8]
 8001032:	0bdb      	lsrs	r3, r3, #15
 8001034:	b29b      	uxth	r3, r3
 8001036:	ee07 3a90 	vmov	s15, r3
 800103a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001042:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001046:	ee17 3a90 	vmov	r3, s15
 800104a:	617b      	str	r3, [r7, #20]
	x2 = (float)(bmp180_calib.mc * (1 << 11)) / (float)(x1 + bmp180_calib.md);
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <bmp180_read_temperature+0xf4>)
 800104e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001052:	02db      	lsls	r3, r3, #11
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <bmp180_read_temperature+0xf4>)
 800105e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001062:	461a      	mov	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	4413      	add	r3, r2
 8001068:	ee07 3a90 	vmov	s15, r3
 800106c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001074:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001078:	ee17 3a90 	vmov	r3, s15
 800107c:	613b      	str	r3, [r7, #16]
	b5 = x1 + x2;
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
	temperature = (float)(b5 + 8) / (float)(1 << 4);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3308      	adds	r3, #8
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001092:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001096:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109a:	edc7 7a02 	vstr	s15, [r7, #8]

	return temperature;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	ee07 3a90 	vmov	s15, r3

}
 80010a4:	eeb0 0a67 	vmov.f32	s0, s15
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200000a4 	.word	0x200000a4
 80010b4:	200000a2 	.word	0x200000a2
 80010b8:	2000008c 	.word	0x2000008c

080010bc <bmp180_read_pressure>:

float bmp180_read_pressure(uint8_t oss) {
 80010bc:	b5b0      	push	{r4, r5, r7, lr}
 80010be:	b092      	sub	sp, #72	; 0x48
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	uint8_t write_data = 0x34 + (oss << 6);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	019b      	lsls	r3, r3, #6
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	3334      	adds	r3, #52	; 0x34
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	73fb      	strb	r3, [r7, #15]
	uint8_t raw_data[3] = {0};
 80010d2:	4bb6      	ldr	r3, [pc, #728]	; (80013ac <bmp180_read_pressure+0x2f0>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	81bb      	strh	r3, [r7, #12]
 80010d8:	2300      	movs	r3, #0
 80010da:	73bb      	strb	r3, [r7, #14]
    long int up = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
    long int x1, x2, x3, b3, b4, b5, b6, b7;
    long int pressure;
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR_WRITE, &write_data, 1, HAL_MAX_DELAY);
 80010e0:	f107 020f 	add.w	r2, r7, #15
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	21ee      	movs	r1, #238	; 0xee
 80010ee:	48b0      	ldr	r0, [pc, #704]	; (80013b0 <bmp180_read_pressure+0x2f4>)
 80010f0:	f001 fa1e 	bl	8002530 <HAL_I2C_Master_Transmit>

	switch(oss)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b1a      	cmp	r3, #26
 80010f8:	dc34      	bgt.n	8001164 <bmp180_read_pressure+0xa8>
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	db49      	blt.n	8001192 <bmp180_read_pressure+0xd6>
 80010fe:	3b05      	subs	r3, #5
 8001100:	2b15      	cmp	r3, #21
 8001102:	d846      	bhi.n	8001192 <bmp180_read_pressure+0xd6>
 8001104:	a201      	add	r2, pc, #4	; (adr r2, 800110c <bmp180_read_pressure+0x50>)
 8001106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110a:	bf00      	nop
 800110c:	0800116b 	.word	0x0800116b
 8001110:	08001193 	.word	0x08001193
 8001114:	08001193 	.word	0x08001193
 8001118:	08001173 	.word	0x08001173
 800111c:	08001193 	.word	0x08001193
 8001120:	08001193 	.word	0x08001193
 8001124:	08001193 	.word	0x08001193
 8001128:	08001193 	.word	0x08001193
 800112c:	08001193 	.word	0x08001193
 8001130:	0800117b 	.word	0x0800117b
 8001134:	08001193 	.word	0x08001193
 8001138:	08001193 	.word	0x08001193
 800113c:	08001193 	.word	0x08001193
 8001140:	08001193 	.word	0x08001193
 8001144:	08001193 	.word	0x08001193
 8001148:	08001193 	.word	0x08001193
 800114c:	08001193 	.word	0x08001193
 8001150:	08001193 	.word	0x08001193
 8001154:	08001193 	.word	0x08001193
 8001158:	08001193 	.word	0x08001193
 800115c:	08001193 	.word	0x08001193
 8001160:	08001183 	.word	0x08001183
 8001164:	2b4d      	cmp	r3, #77	; 0x4d
 8001166:	d010      	beq.n	800118a <bmp180_read_pressure+0xce>
		break;
	case advanced_resolution:
		HAL_Delay(advanced_resolution);
		break;
	default:
		break;
 8001168:	e013      	b.n	8001192 <bmp180_read_pressure+0xd6>
		HAL_Delay(ultra_low_power);
 800116a:	2005      	movs	r0, #5
 800116c:	f000 fddc 	bl	8001d28 <HAL_Delay>
		break;
 8001170:	e010      	b.n	8001194 <bmp180_read_pressure+0xd8>
		HAL_Delay(standard);
 8001172:	2008      	movs	r0, #8
 8001174:	f000 fdd8 	bl	8001d28 <HAL_Delay>
		break;
 8001178:	e00c      	b.n	8001194 <bmp180_read_pressure+0xd8>
		HAL_Delay(high_resolution);
 800117a:	200e      	movs	r0, #14
 800117c:	f000 fdd4 	bl	8001d28 <HAL_Delay>
		break;
 8001180:	e008      	b.n	8001194 <bmp180_read_pressure+0xd8>
		HAL_Delay(ultra_high_resolution);
 8001182:	201a      	movs	r0, #26
 8001184:	f000 fdd0 	bl	8001d28 <HAL_Delay>
		break;
 8001188:	e004      	b.n	8001194 <bmp180_read_pressure+0xd8>
		HAL_Delay(advanced_resolution);
 800118a:	204d      	movs	r0, #77	; 0x4d
 800118c:	f000 fdcc 	bl	8001d28 <HAL_Delay>
		break;
 8001190:	e000      	b.n	8001194 <bmp180_read_pressure+0xd8>
		break;
 8001192:	bf00      	nop
	}

	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR_READ, 0xF6, I2C_MEMADD_SIZE_8BIT, raw_data, 3, HAL_MAX_DELAY);
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2303      	movs	r3, #3
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	22f6      	movs	r2, #246	; 0xf6
 80011a8:	21ef      	movs	r1, #239	; 0xef
 80011aa:	4881      	ldr	r0, [pc, #516]	; (80013b0 <bmp180_read_pressure+0x2f4>)
 80011ac:	f001 fce4 	bl	8002b78 <HAL_I2C_Mem_Read>

	up = ((raw_data[0] << 16) + (raw_data[1] << 8) + raw_data[2]) >> (8 - oss);
 80011b0:	7b3b      	ldrb	r3, [r7, #12]
 80011b2:	041a      	lsls	r2, r3, #16
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	4413      	add	r3, r2
 80011ba:	7bba      	ldrb	r2, [r7, #14]
 80011bc:	441a      	add	r2, r3
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f1c3 0308 	rsb	r3, r3, #8
 80011c4:	fa42 f303 	asr.w	r3, r2, r3
 80011c8:	633b      	str	r3, [r7, #48]	; 0x30
/********** pressure conversion calculations ***********/
	x1 = ((ut - bmp180_calib.ac6) * (bmp180_calib.ac5 / ( 1 << 15)));
 80011ca:	4b7a      	ldr	r3, [pc, #488]	; (80013b4 <bmp180_read_pressure+0x2f8>)
 80011cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b79      	ldr	r3, [pc, #484]	; (80013b8 <bmp180_read_pressure+0x2fc>)
 80011d4:	895b      	ldrh	r3, [r3, #10]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	4a77      	ldr	r2, [pc, #476]	; (80013b8 <bmp180_read_pressure+0x2fc>)
 80011da:	8912      	ldrh	r2, [r2, #8]
 80011dc:	0bd2      	lsrs	r2, r2, #15
 80011de:	b292      	uxth	r2, r2
 80011e0:	fb02 f303 	mul.w	r3, r2, r3
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	x2 = ((bmp180_calib.mc*(1 << 11)) / (1 << 11));
 80011e6:	4b74      	ldr	r3, [pc, #464]	; (80013b8 <bmp180_read_pressure+0x2fc>)
 80011e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
	b5 = x1 + x2;
 80011ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f2:	4413      	add	r3, r2
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
	b6 = b5 - 4000L;
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80011fc:	623b      	str	r3, [r7, #32]
	x1 = (bmp180_calib.b2 * (b6 * b6 / (pow(2,12)))) / (pow(2, 11));
 80011fe:	4b6e      	ldr	r3, [pc, #440]	; (80013b8 <bmp180_read_pressure+0x2fc>)
 8001200:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f931 	bl	800046c <__aeabi_i2d>
 800120a:	4604      	mov	r4, r0
 800120c:	460d      	mov	r5, r1
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	fb03 f303 	mul.w	r3, r3, r3
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f929 	bl	800046c <__aeabi_i2d>
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	4b67      	ldr	r3, [pc, #412]	; (80013bc <bmp180_read_pressure+0x300>)
 8001220:	f7ff fab8 	bl	8000794 <__aeabi_ddiv>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4620      	mov	r0, r4
 800122a:	4629      	mov	r1, r5
 800122c:	f7ff f988 	bl	8000540 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b60      	ldr	r3, [pc, #384]	; (80013c0 <bmp180_read_pressure+0x304>)
 800123e:	f7ff faa9 	bl	8000794 <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff fc29 	bl	8000aa0 <__aeabi_d2iz>
 800124e:	4603      	mov	r3, r0
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
	x2 = bmp180_calib.ac2 * b6 / (pow(2, 11));
 8001252:	4b59      	ldr	r3, [pc, #356]	; (80013b8 <bmp180_read_pressure+0x2fc>)
 8001254:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001258:	461a      	mov	r2, r3
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	fb02 f303 	mul.w	r3, r2, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f903 	bl	800046c <__aeabi_i2d>
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	4b55      	ldr	r3, [pc, #340]	; (80013c0 <bmp180_read_pressure+0x304>)
 800126c:	f7ff fa92 	bl	8000794 <__aeabi_ddiv>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fc12 	bl	8000aa0 <__aeabi_d2iz>
 800127c:	4603      	mov	r3, r0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
	x3 = x1 + x2;
 8001280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001284:	4413      	add	r3, r2
 8001286:	61fb      	str	r3, [r7, #28]
	b3 = ((((bmp180_calib.ac1 * 4 + x3) << oss) + 2) / 4);
 8001288:	4b4b      	ldr	r3, [pc, #300]	; (80013b8 <bmp180_read_pressure+0x2fc>)
 800128a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128e:	009a      	lsls	r2, r3, #2
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	441a      	add	r2, r3
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	3302      	adds	r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	da00      	bge.n	80012a2 <bmp180_read_pressure+0x1e6>
 80012a0:	3303      	adds	r3, #3
 80012a2:	109b      	asrs	r3, r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
	x1 = bmp180_calib.ac3 * b6 / pow(2, 13);
 80012a6:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <bmp180_read_pressure+0x2fc>)
 80012a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012ac:	461a      	mov	r2, r3
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	fb02 f303 	mul.w	r3, r2, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f8d9 	bl	800046c <__aeabi_i2d>
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <bmp180_read_pressure+0x308>)
 80012c0:	f7ff fa68 	bl	8000794 <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fbe8 	bl	8000aa0 <__aeabi_d2iz>
 80012d0:	4603      	mov	r3, r0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	x2 = (bmp180_calib.b1 * (b6 * b6 /(pow(2,12)))) / (pow(2, 16));
 80012d4:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <bmp180_read_pressure+0x2fc>)
 80012d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f8c6 	bl	800046c <__aeabi_i2d>
 80012e0:	4604      	mov	r4, r0
 80012e2:	460d      	mov	r5, r1
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	fb03 f303 	mul.w	r3, r3, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f8be 	bl	800046c <__aeabi_i2d>
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b31      	ldr	r3, [pc, #196]	; (80013bc <bmp180_read_pressure+0x300>)
 80012f6:	f7ff fa4d 	bl	8000794 <__aeabi_ddiv>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4620      	mov	r0, r4
 8001300:	4629      	mov	r1, r5
 8001302:	f7ff f91d 	bl	8000540 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <bmp180_read_pressure+0x30c>)
 8001314:	f7ff fa3e 	bl	8000794 <__aeabi_ddiv>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	f7ff fbbe 	bl	8000aa0 <__aeabi_d2iz>
 8001324:	4603      	mov	r3, r0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
	x3 = ((x1 + x2) + 2) / pow(2, 2);
 8001328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800132a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132c:	4413      	add	r3, r2
 800132e:	3302      	adds	r3, #2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f89b 	bl	800046c <__aeabi_i2d>
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <bmp180_read_pressure+0x310>)
 800133c:	f7ff fa2a 	bl	8000794 <__aeabi_ddiv>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fbaa 	bl	8000aa0 <__aeabi_d2iz>
 800134c:	4603      	mov	r3, r0
 800134e:	61fb      	str	r3, [r7, #28]
	b4 = bmp180_calib.ac4 * (unsigned long)(x3 + 32768) / (pow(2, 15));
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <bmp180_read_pressure+0x2fc>)
 8001352:	88db      	ldrh	r3, [r3, #6]
 8001354:	461a      	mov	r2, r3
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800135c:	fb02 f303 	mul.w	r3, r2, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f873 	bl	800044c <__aeabi_ui2d>
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <bmp180_read_pressure+0x314>)
 800136c:	f7ff fa12 	bl	8000794 <__aeabi_ddiv>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fb92 	bl	8000aa0 <__aeabi_d2iz>
 800137c:	4603      	mov	r3, r0
 800137e:	617b      	str	r3, [r7, #20]
	b7 = ((unsigned long)up - b3) * (50000 >> oss);
 8001380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	f24c 3150 	movw	r1, #50000	; 0xc350
 800138c:	fa41 f202 	asr.w	r2, r1, r2
 8001390:	fb02 f303 	mul.w	r3, r2, r3
 8001394:	613b      	str	r3, [r7, #16]
	if(b7 < 0x80000000) pressure = (b7 * 2) / b4; //pressure = (b7 << 1) / b4;
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db1b      	blt.n	80013d4 <bmp180_read_pressure+0x318>
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	005a      	lsls	r2, r3, #1
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
 80013a8:	e01a      	b.n	80013e0 <bmp180_read_pressure+0x324>
 80013aa:	bf00      	nop
 80013ac:	08005830 	.word	0x08005830
 80013b0:	200000a4 	.word	0x200000a4
 80013b4:	200000a2 	.word	0x200000a2
 80013b8:	2000008c 	.word	0x2000008c
 80013bc:	40b00000 	.word	0x40b00000
 80013c0:	40a00000 	.word	0x40a00000
 80013c4:	40c00000 	.word	0x40c00000
 80013c8:	40f00000 	.word	0x40f00000
 80013cc:	40100000 	.word	0x40100000
 80013d0:	40e00000 	.word	0x40e00000
	else pressure = (b7 /b4) * 2;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
	x1 = (pressure/(pow(2, 8))) * (pressure / (pow(2, 8)));
 80013e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013e2:	f7ff f843 	bl	800046c <__aeabi_i2d>
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <bmp180_read_pressure+0x41c>)
 80013ec:	f7ff f9d2 	bl	8000794 <__aeabi_ddiv>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4614      	mov	r4, r2
 80013f6:	461d      	mov	r5, r3
 80013f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013fa:	f7ff f837 	bl	800046c <__aeabi_i2d>
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <bmp180_read_pressure+0x41c>)
 8001404:	f7ff f9c6 	bl	8000794 <__aeabi_ddiv>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4620      	mov	r0, r4
 800140e:	4629      	mov	r1, r5
 8001410:	f7ff f896 	bl	8000540 <__aeabi_dmul>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	f7ff fb40 	bl	8000aa0 <__aeabi_d2iz>
 8001420:	4603      	mov	r3, r0
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 = (x1 * 3038) / (pow(2, 16));
 8001424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001426:	f640 32de 	movw	r2, #3038	; 0xbde
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f81c 	bl	800046c <__aeabi_i2d>
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	4b28      	ldr	r3, [pc, #160]	; (80014dc <bmp180_read_pressure+0x420>)
 800143a:	f7ff f9ab 	bl	8000794 <__aeabi_ddiv>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff fb2b 	bl	8000aa0 <__aeabi_d2iz>
 800144a:	4603      	mov	r3, r0
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
	x2 = (-7357 * pressure) / (pow(2, 16));
 800144e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001450:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <bmp180_read_pressure+0x424>)
 8001452:	fb02 f303 	mul.w	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f808 	bl	800046c <__aeabi_i2d>
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <bmp180_read_pressure+0x420>)
 8001462:	f7ff f997 	bl	8000794 <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fb17 	bl	8000aa0 <__aeabi_d2iz>
 8001472:	4603      	mov	r3, r0
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
	pressure = pressure + ((x1 + x2+ 3791) / (pow(2, 4)));
 8001476:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001478:	f7fe fff8 	bl	800046c <__aeabi_i2d>
 800147c:	4604      	mov	r4, r0
 800147e:	460d      	mov	r5, r1
 8001480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001484:	4413      	add	r3, r2
 8001486:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe ffee 	bl	800046c <__aeabi_i2d>
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <bmp180_read_pressure+0x428>)
 8001496:	f7ff f97d 	bl	8000794 <__aeabi_ddiv>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4620      	mov	r0, r4
 80014a0:	4629      	mov	r1, r5
 80014a2:	f7fe fe97 	bl	80001d4 <__adddf3>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff faf7 	bl	8000aa0 <__aeabi_d2iz>
 80014b2:	4603      	mov	r3, r0
 80014b4:	637b      	str	r3, [r7, #52]	; 0x34

	return (float)(pressure /100.0f);
 80014b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b8:	ee07 3a90 	vmov	s15, r3
 80014bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80014e8 <bmp180_read_pressure+0x42c>
 80014c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014c8:	eef0 7a66 	vmov.f32	s15, s13

}
 80014cc:	eeb0 0a67 	vmov.f32	s0, s15
 80014d0:	3738      	adds	r7, #56	; 0x38
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bdb0      	pop	{r4, r5, r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40700000 	.word	0x40700000
 80014dc:	40f00000 	.word	0x40f00000
 80014e0:	ffffe343 	.word	0xffffe343
 80014e4:	40300000 	.word	0x40300000
 80014e8:	42c80000 	.word	0x42c80000
 80014ec:	00000000 	.word	0x00000000

080014f0 <bmp180_read_altitude>:


float bmp180_read_altitude(int oss) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	long int pressure = bmp180_read_pressure(oss);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fddd 	bl	80010bc <bmp180_read_pressure>
 8001502:	eef0 7a40 	vmov.f32	s15, s0
 8001506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800150a:	ee17 3a90 	vmov	r3, s15
 800150e:	60fb      	str	r3, [r7, #12]
	return (44330 * (1 - (pow(((float)pressure / (float) ATM_PRESSURE), 0.1903))));
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001588 <bmp180_read_altitude+0x98>
 800151e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001522:	ee16 0a90 	vmov	r0, s13
 8001526:	f7fe ffb3 	bl	8000490 <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001578 <bmp180_read_altitude+0x88>
 8001532:	ec43 2b10 	vmov	d0, r2, r3
 8001536:	f003 fa53 	bl	80049e0 <pow>
 800153a:	ec53 2b10 	vmov	r2, r3, d0
 800153e:	f04f 0000 	mov.w	r0, #0
 8001542:	4912      	ldr	r1, [pc, #72]	; (800158c <bmp180_read_altitude+0x9c>)
 8001544:	f7fe fe44 	bl	80001d0 <__aeabi_dsub>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	a30b      	add	r3, pc, #44	; (adr r3, 8001580 <bmp180_read_altitude+0x90>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7fe fff3 	bl	8000540 <__aeabi_dmul>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff fac5 	bl	8000af0 <__aeabi_d2f>
 8001566:	4603      	mov	r3, r0
 8001568:	ee07 3a90 	vmov	s15, r3
}
 800156c:	eeb0 0a67 	vmov.f32	s0, s15
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	1a36e2eb 	.word	0x1a36e2eb
 800157c:	3fc85bc0 	.word	0x3fc85bc0
 8001580:	00000000 	.word	0x00000000
 8001584:	40e5a540 	.word	0x40e5a540
 8001588:	47c5e680 	.word	0x47c5e680
 800158c:	3ff00000 	.word	0x3ff00000

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001594:	f000 fb56 	bl	8001c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001598:	f000 f83a 	bl	8001610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159c:	f000 f966 	bl	800186c <MX_GPIO_Init>
  MX_I2C1_Init();
 80015a0:	f000 f8a0 	bl	80016e4 <MX_I2C1_Init>
  MX_TIM6_Init();
 80015a4:	f000 f8cc 	bl	8001740 <MX_TIM6_Init>
  MX_TIM7_Init();
 80015a8:	f000 f900 	bl	80017ac <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80015ac:	f000 f934 	bl	8001818 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  bmp180_init();
 80015b0:	f7ff fc70 	bl	8000e94 <bmp180_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  my_temperature = bmp180_read_temperature();
 80015b4:	f7ff fd06 	bl	8000fc4 <bmp180_read_temperature>
 80015b8:	eef0 7a40 	vmov.f32	s15, s0
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <main+0x74>)
 80015be:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(2000);
 80015c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015c6:	f000 fbaf 	bl	8001d28 <HAL_Delay>
	  my_pressure = bmp180_read_pressure(advanced_resolution);
 80015ca:	204d      	movs	r0, #77	; 0x4d
 80015cc:	f7ff fd76 	bl	80010bc <bmp180_read_pressure>
 80015d0:	eef0 7a40 	vmov.f32	s15, s0
 80015d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d8:	ee17 2a90 	vmov	r2, s15
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <main+0x78>)
 80015de:	601a      	str	r2, [r3, #0]
	  HAL_Delay(2000);
 80015e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015e4:	f000 fba0 	bl	8001d28 <HAL_Delay>
	  altitude = bmp180_read_altitude(standard);
 80015e8:	2008      	movs	r0, #8
 80015ea:	f7ff ff81 	bl	80014f0 <bmp180_read_altitude>
 80015ee:	eef0 7a40 	vmov.f32	s15, s0
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <main+0x7c>)
 80015f4:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(2000);
 80015f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015fc:	f000 fb94 	bl	8001d28 <HAL_Delay>
	  my_temperature = bmp180_read_temperature();
 8001600:	e7d8      	b.n	80015b4 <main+0x24>
 8001602:	bf00      	nop
 8001604:	200001cc 	.word	0x200001cc
 8001608:	200001d0 	.word	0x200001d0
 800160c:	200001d4 	.word	0x200001d4

08001610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b094      	sub	sp, #80	; 0x50
 8001614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	2230      	movs	r2, #48	; 0x30
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f003 f9d6 	bl	80049d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <SystemClock_Config+0xcc>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	4a27      	ldr	r2, [pc, #156]	; (80016dc <SystemClock_Config+0xcc>)
 800163e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001642:	6413      	str	r3, [r2, #64]	; 0x40
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <SystemClock_Config+0xcc>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <SystemClock_Config+0xd0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a21      	ldr	r2, [pc, #132]	; (80016e0 <SystemClock_Config+0xd0>)
 800165a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <SystemClock_Config+0xd0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001676:	2302      	movs	r3, #2
 8001678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800167a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800167e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001680:	2308      	movs	r3, #8
 8001682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001684:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001688:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800168a:	2302      	movs	r3, #2
 800168c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800168e:	2307      	movs	r3, #7
 8001690:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001692:	f107 0320 	add.w	r3, r7, #32
 8001696:	4618      	mov	r0, r3
 8001698:	f002 f8aa 	bl	80037f0 <HAL_RCC_OscConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016a2:	f000 f973 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a6:	230f      	movs	r3, #15
 80016a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016aa:	2302      	movs	r3, #2
 80016ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	2105      	movs	r1, #5
 80016c4:	4618      	mov	r0, r3
 80016c6:	f002 fb0b 	bl	8003ce0 <HAL_RCC_ClockConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016d0:	f000 f95c 	bl	800198c <Error_Handler>
  }
}
 80016d4:	bf00      	nop
 80016d6:	3750      	adds	r7, #80	; 0x50
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40007000 	.word	0x40007000

080016e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <MX_I2C1_Init+0x50>)
 80016ea:	4a13      	ldr	r2, [pc, #76]	; (8001738 <MX_I2C1_Init+0x54>)
 80016ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MX_I2C1_Init+0x50>)
 80016f0:	4a12      	ldr	r2, [pc, #72]	; (800173c <MX_I2C1_Init+0x58>)
 80016f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <MX_I2C1_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <MX_I2C1_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_I2C1_Init+0x50>)
 8001702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <MX_I2C1_Init+0x50>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_I2C1_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <MX_I2C1_Init+0x50>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <MX_I2C1_Init+0x50>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <MX_I2C1_Init+0x50>)
 8001722:	f000 fdc1 	bl	80022a8 <HAL_I2C_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800172c:	f000 f92e 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200000a4 	.word	0x200000a4
 8001738:	40005400 	.word	0x40005400
 800173c:	000186a0 	.word	0x000186a0

08001740 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001746:	463b      	mov	r3, r7
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_TIM6_Init+0x64>)
 8001750:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <MX_TIM6_Init+0x68>)
 8001752:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <MX_TIM6_Init+0x64>)
 8001756:	2253      	movs	r2, #83	; 0x53
 8001758:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <MX_TIM6_Init+0x64>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <MX_TIM6_Init+0x64>)
 8001762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001766:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_TIM6_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800176e:	480d      	ldr	r0, [pc, #52]	; (80017a4 <MX_TIM6_Init+0x64>)
 8001770:	f002 fcd6 	bl	8004120 <HAL_TIM_Base_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800177a:	f000 f907 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001786:	463b      	mov	r3, r7
 8001788:	4619      	mov	r1, r3
 800178a:	4806      	ldr	r0, [pc, #24]	; (80017a4 <MX_TIM6_Init+0x64>)
 800178c:	f002 fdb8 	bl	8004300 <HAL_TIMEx_MasterConfigSynchronization>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001796:	f000 f8f9 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200000f8 	.word	0x200000f8
 80017a8:	40001000 	.word	0x40001000

080017ac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b2:	463b      	mov	r3, r7
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <MX_TIM7_Init+0x64>)
 80017bc:	4a15      	ldr	r2, [pc, #84]	; (8001814 <MX_TIM7_Init+0x68>)
 80017be:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 65535;
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_TIM7_Init+0x64>)
 80017c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_TIM7_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <MX_TIM7_Init+0x64>)
 80017d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_TIM7_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80017dc:	480c      	ldr	r0, [pc, #48]	; (8001810 <MX_TIM7_Init+0x64>)
 80017de:	f002 fc9f 	bl	8004120 <HAL_TIM_Base_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80017e8:	f000 f8d0 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80017f4:	463b      	mov	r3, r7
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_TIM7_Init+0x64>)
 80017fa:	f002 fd81 	bl	8004300 <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001804:	f000 f8c2 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000140 	.word	0x20000140
 8001814:	40001400 	.word	0x40001400

08001818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800181e:	4a12      	ldr	r2, [pc, #72]	; (8001868 <MX_USART2_UART_Init+0x50>)
 8001820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001850:	f002 fdd2 	bl	80043f8 <HAL_UART_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800185a:	f000 f897 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000188 	.word	0x20000188
 8001868:	40004400 	.word	0x40004400

0800186c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b3d      	ldr	r3, [pc, #244]	; (800197c <MX_GPIO_Init+0x110>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a3c      	ldr	r2, [pc, #240]	; (800197c <MX_GPIO_Init+0x110>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b3a      	ldr	r3, [pc, #232]	; (800197c <MX_GPIO_Init+0x110>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b36      	ldr	r3, [pc, #216]	; (800197c <MX_GPIO_Init+0x110>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a35      	ldr	r2, [pc, #212]	; (800197c <MX_GPIO_Init+0x110>)
 80018a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b33      	ldr	r3, [pc, #204]	; (800197c <MX_GPIO_Init+0x110>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	4b2f      	ldr	r3, [pc, #188]	; (800197c <MX_GPIO_Init+0x110>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a2e      	ldr	r2, [pc, #184]	; (800197c <MX_GPIO_Init+0x110>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b2c      	ldr	r3, [pc, #176]	; (800197c <MX_GPIO_Init+0x110>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b28      	ldr	r3, [pc, #160]	; (800197c <MX_GPIO_Init+0x110>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a27      	ldr	r2, [pc, #156]	; (800197c <MX_GPIO_Init+0x110>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b25      	ldr	r3, [pc, #148]	; (800197c <MX_GPIO_Init+0x110>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <MX_GPIO_Init+0x110>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a20      	ldr	r2, [pc, #128]	; (800197c <MX_GPIO_Init+0x110>)
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <MX_GPIO_Init+0x110>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	2102      	movs	r1, #2
 8001912:	481b      	ldr	r0, [pc, #108]	; (8001980 <MX_GPIO_Init+0x114>)
 8001914:	f000 fcae 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dht11_GPIO_Port, dht11_Pin, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	2101      	movs	r1, #1
 800191c:	4819      	ldr	r0, [pc, #100]	; (8001984 <MX_GPIO_Init+0x118>)
 800191e:	f000 fca9 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : buzzer_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 8001922:	2302      	movs	r3, #2
 8001924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001926:	2301      	movs	r3, #1
 8001928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	4811      	ldr	r0, [pc, #68]	; (8001980 <MX_GPIO_Init+0x114>)
 800193a:	f000 faff 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : dht11_Pin */
  GPIO_InitStruct.Pin = dht11_Pin;
 800193e:	2301      	movs	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(dht11_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	480b      	ldr	r0, [pc, #44]	; (8001984 <MX_GPIO_Init+0x118>)
 8001956:	f000 faf1 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : button_interrupt_Pin */
  GPIO_InitStruct.Pin = button_interrupt_Pin;
 800195a:	2302      	movs	r3, #2
 800195c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800195e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_interrupt_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4619      	mov	r1, r3
 800196e:	4806      	ldr	r0, [pc, #24]	; (8001988 <MX_GPIO_Init+0x11c>)
 8001970:	f000 fae4 	bl	8001f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001974:	bf00      	nop
 8001976:	3728      	adds	r7, #40	; 0x28
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40023800 	.word	0x40023800
 8001980:	40020800 	.word	0x40020800
 8001984:	40020000 	.word	0x40020000
 8001988:	40021000 	.word	0x40021000

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	e7fe      	b.n	8001994 <Error_Handler+0x8>
	...

08001998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a0f      	ldr	r2, [pc, #60]	; (80019e4 <HAL_MspInit+0x4c>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_MspInit+0x4c>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_MspInit+0x4c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019d6:	2007      	movs	r0, #7
 80019d8:	f000 fa7c 	bl	8001ed4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40023800 	.word	0x40023800

080019e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <HAL_I2C_MspInit+0x84>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d12b      	bne.n	8001a62 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = bmp180_SLC_Pin|bmp180_SDA_Pin;
 8001a26:	23c0      	movs	r3, #192	; 0xc0
 8001a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2a:	2312      	movs	r3, #18
 8001a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a36:	2304      	movs	r3, #4
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <HAL_I2C_MspInit+0x8c>)
 8001a42:	f000 fa7b 	bl	8001f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	; 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40005400 	.word	0x40005400
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40020400 	.word	0x40020400

08001a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a15      	ldr	r2, [pc, #84]	; (8001adc <HAL_TIM_Base_MspInit+0x64>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d10e      	bne.n	8001aa8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <HAL_TIM_Base_MspInit+0x68>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <HAL_TIM_Base_MspInit+0x68>)
 8001a94:	f043 0310 	orr.w	r3, r3, #16
 8001a98:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_TIM_Base_MspInit+0x68>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001aa6:	e012      	b.n	8001ace <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <HAL_TIM_Base_MspInit+0x6c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d10d      	bne.n	8001ace <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_TIM_Base_MspInit+0x68>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_TIM_Base_MspInit+0x68>)
 8001abc:	f043 0320 	orr.w	r3, r3, #32
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_TIM_Base_MspInit+0x68>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 0320 	and.w	r3, r3, #32
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
}
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40001000 	.word	0x40001000
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40001400 	.word	0x40001400

08001ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a19      	ldr	r2, [pc, #100]	; (8001b6c <HAL_UART_MspInit+0x84>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d12b      	bne.n	8001b62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_UART_MspInit+0x88>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <HAL_UART_MspInit+0x88>)
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <HAL_UART_MspInit+0x88>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_UART_MspInit+0x88>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <HAL_UART_MspInit+0x88>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <HAL_UART_MspInit+0x88>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b42:	230c      	movs	r3, #12
 8001b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b52:	2307      	movs	r3, #7
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	; (8001b74 <HAL_UART_MspInit+0x8c>)
 8001b5e:	f000 f9ed 	bl	8001f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	; 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40004400 	.word	0x40004400
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000

08001b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <NMI_Handler+0x4>

08001b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <HardFault_Handler+0x4>

08001b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <MemManage_Handler+0x4>

08001b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <BusFault_Handler+0x4>

08001b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <UsageFault_Handler+0x4>

08001b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc4:	f000 f890 	bl	8001ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <SystemInit+0x20>)
 8001bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <SystemInit+0x20>)
 8001bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bf6:	490e      	ldr	r1, [pc, #56]	; (8001c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bfc:	e002      	b.n	8001c04 <LoopCopyDataInit>

08001bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c02:	3304      	adds	r3, #4

08001c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c08:	d3f9      	bcc.n	8001bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0a:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c0c:	4c0b      	ldr	r4, [pc, #44]	; (8001c3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c10:	e001      	b.n	8001c16 <LoopFillZerobss>

08001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c14:	3204      	adds	r2, #4

08001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c18:	d3fb      	bcc.n	8001c12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c1a:	f7ff ffd7 	bl	8001bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f002 feb3 	bl	8004988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c22:	f7ff fcb5 	bl	8001590 <main>
  bx  lr    
 8001c26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c34:	08005890 	.word	0x08005890
  ldr r2, =_sbss
 8001c38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c3c:	200001dc 	.word	0x200001dc

08001c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c40:	e7fe      	b.n	8001c40 <ADC_IRQHandler>
	...

08001c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_Init+0x40>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	; (8001c84 <HAL_Init+0x40>)
 8001c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_Init+0x40>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <HAL_Init+0x40>)
 8001c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_Init+0x40>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_Init+0x40>)
 8001c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f000 f931 	bl	8001ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f000 f808 	bl	8001c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c78:	f7ff fe8e 	bl	8001998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023c00 	.word	0x40023c00

08001c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_InitTick+0x54>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_InitTick+0x58>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f93b 	bl	8001f22 <HAL_SYSTICK_Config>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00e      	b.n	8001cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b0f      	cmp	r3, #15
 8001cba:	d80a      	bhi.n	8001cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f000 f911 	bl	8001eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc8:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <HAL_InitTick+0x5c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_IncTick+0x20>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_IncTick+0x24>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <HAL_IncTick+0x24>)
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	200001d8 	.word	0x200001d8

08001d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_GetTick+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	200001d8 	.word	0x200001d8

08001d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d30:	f7ff ffee 	bl	8001d10 <HAL_GetTick>
 8001d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d005      	beq.n	8001d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_Delay+0x44>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d4e:	bf00      	nop
 8001d50:	f7ff ffde 	bl	8001d10 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d8f7      	bhi.n	8001d50 <HAL_Delay+0x28>
  {
  }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000008 	.word	0x20000008

08001d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001da2:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	60d3      	str	r3, [r2, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	f003 0307 	and.w	r3, r3, #7
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	db0a      	blt.n	8001dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	490c      	ldr	r1, [pc, #48]	; (8001e20 <__NVIC_SetPriority+0x4c>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	0112      	lsls	r2, r2, #4
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	440b      	add	r3, r1
 8001df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dfc:	e00a      	b.n	8001e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4908      	ldr	r1, [pc, #32]	; (8001e24 <__NVIC_SetPriority+0x50>)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	3b04      	subs	r3, #4
 8001e0c:	0112      	lsls	r2, r2, #4
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	440b      	add	r3, r1
 8001e12:	761a      	strb	r2, [r3, #24]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000e100 	.word	0xe000e100
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f1c3 0307 	rsb	r3, r3, #7
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	bf28      	it	cs
 8001e46:	2304      	movcs	r3, #4
 8001e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d902      	bls.n	8001e58 <NVIC_EncodePriority+0x30>
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3b03      	subs	r3, #3
 8001e56:	e000      	b.n	8001e5a <NVIC_EncodePriority+0x32>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	4313      	orrs	r3, r2
         );
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3724      	adds	r7, #36	; 0x24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea0:	d301      	bcc.n	8001ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00f      	b.n	8001ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <SysTick_Config+0x40>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eae:	210f      	movs	r1, #15
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb4:	f7ff ff8e 	bl	8001dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <SysTick_Config+0x40>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ebe:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <SysTick_Config+0x40>)
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	e000e010 	.word	0xe000e010

08001ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff47 	bl	8001d70 <__NVIC_SetPriorityGrouping>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001efc:	f7ff ff5c 	bl	8001db8 <__NVIC_GetPriorityGrouping>
 8001f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f7ff ff8e 	bl	8001e28 <NVIC_EncodePriority>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff5d 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ffb0 	bl	8001e90 <SysTick_Config>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	e16b      	b.n	8002230 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 815a 	bne.w	800222a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d005      	beq.n	8001f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d130      	bne.n	8001ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f003 0201 	and.w	r2, r3, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d017      	beq.n	800202c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d123      	bne.n	8002080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3208      	adds	r2, #8
 8002040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0203 	and.w	r2, r3, #3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80b4 	beq.w	800222a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b60      	ldr	r3, [pc, #384]	; (8002248 <HAL_GPIO_Init+0x30c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a5f      	ldr	r2, [pc, #380]	; (8002248 <HAL_GPIO_Init+0x30c>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b5d      	ldr	r3, [pc, #372]	; (8002248 <HAL_GPIO_Init+0x30c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020de:	4a5b      	ldr	r2, [pc, #364]	; (800224c <HAL_GPIO_Init+0x310>)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	220f      	movs	r2, #15
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a52      	ldr	r2, [pc, #328]	; (8002250 <HAL_GPIO_Init+0x314>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d02b      	beq.n	8002162 <HAL_GPIO_Init+0x226>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a51      	ldr	r2, [pc, #324]	; (8002254 <HAL_GPIO_Init+0x318>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d025      	beq.n	800215e <HAL_GPIO_Init+0x222>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a50      	ldr	r2, [pc, #320]	; (8002258 <HAL_GPIO_Init+0x31c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01f      	beq.n	800215a <HAL_GPIO_Init+0x21e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4f      	ldr	r2, [pc, #316]	; (800225c <HAL_GPIO_Init+0x320>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d019      	beq.n	8002156 <HAL_GPIO_Init+0x21a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4e      	ldr	r2, [pc, #312]	; (8002260 <HAL_GPIO_Init+0x324>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <HAL_GPIO_Init+0x216>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4d      	ldr	r2, [pc, #308]	; (8002264 <HAL_GPIO_Init+0x328>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00d      	beq.n	800214e <HAL_GPIO_Init+0x212>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4c      	ldr	r2, [pc, #304]	; (8002268 <HAL_GPIO_Init+0x32c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d007      	beq.n	800214a <HAL_GPIO_Init+0x20e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4b      	ldr	r2, [pc, #300]	; (800226c <HAL_GPIO_Init+0x330>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d101      	bne.n	8002146 <HAL_GPIO_Init+0x20a>
 8002142:	2307      	movs	r3, #7
 8002144:	e00e      	b.n	8002164 <HAL_GPIO_Init+0x228>
 8002146:	2308      	movs	r3, #8
 8002148:	e00c      	b.n	8002164 <HAL_GPIO_Init+0x228>
 800214a:	2306      	movs	r3, #6
 800214c:	e00a      	b.n	8002164 <HAL_GPIO_Init+0x228>
 800214e:	2305      	movs	r3, #5
 8002150:	e008      	b.n	8002164 <HAL_GPIO_Init+0x228>
 8002152:	2304      	movs	r3, #4
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x228>
 8002156:	2303      	movs	r3, #3
 8002158:	e004      	b.n	8002164 <HAL_GPIO_Init+0x228>
 800215a:	2302      	movs	r3, #2
 800215c:	e002      	b.n	8002164 <HAL_GPIO_Init+0x228>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_GPIO_Init+0x228>
 8002162:	2300      	movs	r3, #0
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	f002 0203 	and.w	r2, r2, #3
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	4093      	lsls	r3, r2
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002174:	4935      	ldr	r1, [pc, #212]	; (800224c <HAL_GPIO_Init+0x310>)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002182:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <HAL_GPIO_Init+0x334>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021a6:	4a32      	ldr	r2, [pc, #200]	; (8002270 <HAL_GPIO_Init+0x334>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021ac:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_GPIO_Init+0x334>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d0:	4a27      	ldr	r2, [pc, #156]	; (8002270 <HAL_GPIO_Init+0x334>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021d6:	4b26      	ldr	r3, [pc, #152]	; (8002270 <HAL_GPIO_Init+0x334>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021fa:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <HAL_GPIO_Init+0x334>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_GPIO_Init+0x334>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002224:	4a12      	ldr	r2, [pc, #72]	; (8002270 <HAL_GPIO_Init+0x334>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3301      	adds	r3, #1
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	2b0f      	cmp	r3, #15
 8002234:	f67f ae90 	bls.w	8001f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3724      	adds	r7, #36	; 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800
 800224c:	40013800 	.word	0x40013800
 8002250:	40020000 	.word	0x40020000
 8002254:	40020400 	.word	0x40020400
 8002258:	40020800 	.word	0x40020800
 800225c:	40020c00 	.word	0x40020c00
 8002260:	40021000 	.word	0x40021000
 8002264:	40021400 	.word	0x40021400
 8002268:	40021800 	.word	0x40021800
 800226c:	40021c00 	.word	0x40021c00
 8002270:	40013c00 	.word	0x40013c00

08002274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
 8002280:	4613      	mov	r3, r2
 8002282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002284:	787b      	ldrb	r3, [r7, #1]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002290:	e003      	b.n	800229a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002292:	887b      	ldrh	r3, [r7, #2]
 8002294:	041a      	lsls	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	619a      	str	r2, [r3, #24]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e12b      	b.n	8002512 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fb8a 	bl	80019e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2224      	movs	r2, #36	; 0x24
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800230a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800230c:	f001 fee0 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 8002310:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4a81      	ldr	r2, [pc, #516]	; (800251c <HAL_I2C_Init+0x274>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d807      	bhi.n	800232c <HAL_I2C_Init+0x84>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4a80      	ldr	r2, [pc, #512]	; (8002520 <HAL_I2C_Init+0x278>)
 8002320:	4293      	cmp	r3, r2
 8002322:	bf94      	ite	ls
 8002324:	2301      	movls	r3, #1
 8002326:	2300      	movhi	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	e006      	b.n	800233a <HAL_I2C_Init+0x92>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4a7d      	ldr	r2, [pc, #500]	; (8002524 <HAL_I2C_Init+0x27c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	bf94      	ite	ls
 8002334:	2301      	movls	r3, #1
 8002336:	2300      	movhi	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e0e7      	b.n	8002512 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4a78      	ldr	r2, [pc, #480]	; (8002528 <HAL_I2C_Init+0x280>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0c9b      	lsrs	r3, r3, #18
 800234c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	430a      	orrs	r2, r1
 8002360:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4a6a      	ldr	r2, [pc, #424]	; (800251c <HAL_I2C_Init+0x274>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d802      	bhi.n	800237c <HAL_I2C_Init+0xd4>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	3301      	adds	r3, #1
 800237a:	e009      	b.n	8002390 <HAL_I2C_Init+0xe8>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	4a69      	ldr	r2, [pc, #420]	; (800252c <HAL_I2C_Init+0x284>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	3301      	adds	r3, #1
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	430b      	orrs	r3, r1
 8002396:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	495c      	ldr	r1, [pc, #368]	; (800251c <HAL_I2C_Init+0x274>)
 80023ac:	428b      	cmp	r3, r1
 80023ae:	d819      	bhi.n	80023e4 <HAL_I2C_Init+0x13c>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1e59      	subs	r1, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80023be:	1c59      	adds	r1, r3, #1
 80023c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023c4:	400b      	ands	r3, r1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_I2C_Init+0x138>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1e59      	subs	r1, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023d8:	3301      	adds	r3, #1
 80023da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023de:	e051      	b.n	8002484 <HAL_I2C_Init+0x1dc>
 80023e0:	2304      	movs	r3, #4
 80023e2:	e04f      	b.n	8002484 <HAL_I2C_Init+0x1dc>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d111      	bne.n	8002410 <HAL_I2C_Init+0x168>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1e58      	subs	r0, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	440b      	add	r3, r1
 80023fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80023fe:	3301      	adds	r3, #1
 8002400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e012      	b.n	8002436 <HAL_I2C_Init+0x18e>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1e58      	subs	r0, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	0099      	lsls	r1, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	fbb0 f3f3 	udiv	r3, r0, r3
 8002426:	3301      	adds	r3, #1
 8002428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_I2C_Init+0x196>
 800243a:	2301      	movs	r3, #1
 800243c:	e022      	b.n	8002484 <HAL_I2C_Init+0x1dc>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10e      	bne.n	8002464 <HAL_I2C_Init+0x1bc>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1e58      	subs	r0, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	440b      	add	r3, r1
 8002454:	fbb0 f3f3 	udiv	r3, r0, r3
 8002458:	3301      	adds	r3, #1
 800245a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002462:	e00f      	b.n	8002484 <HAL_I2C_Init+0x1dc>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1e58      	subs	r0, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6859      	ldr	r1, [r3, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	0099      	lsls	r1, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	fbb0 f3f3 	udiv	r3, r0, r3
 800247a:	3301      	adds	r3, #1
 800247c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002480:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	6809      	ldr	r1, [r1, #0]
 8002488:	4313      	orrs	r3, r2
 800248a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6911      	ldr	r1, [r2, #16]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68d2      	ldr	r2, [r2, #12]
 80024be:	4311      	orrs	r1, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	430b      	orrs	r3, r1
 80024c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	000186a0 	.word	0x000186a0
 8002520:	001e847f 	.word	0x001e847f
 8002524:	003d08ff 	.word	0x003d08ff
 8002528:	431bde83 	.word	0x431bde83
 800252c:	10624dd3 	.word	0x10624dd3

08002530 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af02      	add	r7, sp, #8
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	461a      	mov	r2, r3
 800253c:	460b      	mov	r3, r1
 800253e:	817b      	strh	r3, [r7, #10]
 8002540:	4613      	mov	r3, r2
 8002542:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff fbe4 	bl	8001d10 <HAL_GetTick>
 8002548:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b20      	cmp	r3, #32
 8002554:	f040 80e0 	bne.w	8002718 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2319      	movs	r3, #25
 800255e:	2201      	movs	r2, #1
 8002560:	4970      	ldr	r1, [pc, #448]	; (8002724 <HAL_I2C_Master_Transmit+0x1f4>)
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 ff66 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800256e:	2302      	movs	r3, #2
 8002570:	e0d3      	b.n	800271a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_I2C_Master_Transmit+0x50>
 800257c:	2302      	movs	r3, #2
 800257e:	e0cc      	b.n	800271a <HAL_I2C_Master_Transmit+0x1ea>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d007      	beq.n	80025a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0201 	orr.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2221      	movs	r2, #33	; 0x21
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2210      	movs	r2, #16
 80025c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	893a      	ldrh	r2, [r7, #8]
 80025d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4a50      	ldr	r2, [pc, #320]	; (8002728 <HAL_I2C_Master_Transmit+0x1f8>)
 80025e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025e8:	8979      	ldrh	r1, [r7, #10]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	6a3a      	ldr	r2, [r7, #32]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fce8 	bl	8002fc4 <I2C_MasterRequestWrite>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e08d      	b.n	800271a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002614:	e066      	b.n	80026e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	6a39      	ldr	r1, [r7, #32]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 ffe0 	bl	80035e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00d      	beq.n	8002642 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	2b04      	cmp	r3, #4
 800262c:	d107      	bne.n	800263e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e06b      	b.n	800271a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	781a      	ldrb	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b04      	cmp	r3, #4
 800267e:	d11b      	bne.n	80026b8 <HAL_I2C_Master_Transmit+0x188>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	2b00      	cmp	r3, #0
 8002686:	d017      	beq.n	80026b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	6a39      	ldr	r1, [r7, #32]
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 ffd0 	bl	8003662 <I2C_WaitOnBTFFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00d      	beq.n	80026e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d107      	bne.n	80026e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e01a      	b.n	800271a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d194      	bne.n	8002616 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002718:	2302      	movs	r3, #2
  }
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	00100002 	.word	0x00100002
 8002728:	ffff0000 	.word	0xffff0000

0800272c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08c      	sub	sp, #48	; 0x30
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	461a      	mov	r2, r3
 8002738:	460b      	mov	r3, r1
 800273a:	817b      	strh	r3, [r7, #10]
 800273c:	4613      	mov	r3, r2
 800273e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002740:	f7ff fae6 	bl	8001d10 <HAL_GetTick>
 8002744:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b20      	cmp	r3, #32
 8002750:	f040 820b 	bne.w	8002b6a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	2319      	movs	r3, #25
 800275a:	2201      	movs	r2, #1
 800275c:	497c      	ldr	r1, [pc, #496]	; (8002950 <HAL_I2C_Master_Receive+0x224>)
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 fe68 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800276a:	2302      	movs	r3, #2
 800276c:	e1fe      	b.n	8002b6c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_I2C_Master_Receive+0x50>
 8002778:	2302      	movs	r3, #2
 800277a:	e1f7      	b.n	8002b6c <HAL_I2C_Master_Receive+0x440>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d007      	beq.n	80027a2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0201 	orr.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2222      	movs	r2, #34	; 0x22
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2210      	movs	r2, #16
 80027be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	893a      	ldrh	r2, [r7, #8]
 80027d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4a5c      	ldr	r2, [pc, #368]	; (8002954 <HAL_I2C_Master_Receive+0x228>)
 80027e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027e4:	8979      	ldrh	r1, [r7, #10]
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fc6c 	bl	80030c8 <I2C_MasterRequestRead>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e1b8      	b.n	8002b6c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d113      	bne.n	800282a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	623b      	str	r3, [r7, #32]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	623b      	str	r3, [r7, #32]
 8002816:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e18c      	b.n	8002b44 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282e:	2b01      	cmp	r3, #1
 8002830:	d11b      	bne.n	800286a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002840:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e16c      	b.n	8002b44 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	2b02      	cmp	r3, #2
 8002870:	d11b      	bne.n	80028aa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002880:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002890:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	e14c      	b.n	8002b44 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028d0:	e138      	b.n	8002b44 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	f200 80f1 	bhi.w	8002abe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d123      	bne.n	800292c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fefb 	bl	80036e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e139      	b.n	8002b6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	855a      	strh	r2, [r3, #42]	; 0x2a
 800292a:	e10b      	b.n	8002b44 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002930:	2b02      	cmp	r3, #2
 8002932:	d14e      	bne.n	80029d2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293a:	2200      	movs	r2, #0
 800293c:	4906      	ldr	r1, [pc, #24]	; (8002958 <HAL_I2C_Master_Receive+0x22c>)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fd78 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e10e      	b.n	8002b6c <HAL_I2C_Master_Receive+0x440>
 800294e:	bf00      	nop
 8002950:	00100002 	.word	0x00100002
 8002954:	ffff0000 	.word	0xffff0000
 8002958:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800296a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029d0:	e0b8      	b.n	8002b44 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	2200      	movs	r2, #0
 80029da:	4966      	ldr	r1, [pc, #408]	; (8002b74 <HAL_I2C_Master_Receive+0x448>)
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fd29 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0bf      	b.n	8002b6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	2200      	movs	r2, #0
 8002a36:	494f      	ldr	r1, [pc, #316]	; (8002b74 <HAL_I2C_Master_Receive+0x448>)
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fcfb 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e091      	b.n	8002b6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002abc:	e042      	b.n	8002b44 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fe0e 	bl	80036e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e04c      	b.n	8002b6c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d118      	bne.n	8002b44 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f47f aec2 	bne.w	80028d2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
  }
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3728      	adds	r7, #40	; 0x28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	00010004 	.word	0x00010004

08002b78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08c      	sub	sp, #48	; 0x30
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	4608      	mov	r0, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	461a      	mov	r2, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	817b      	strh	r3, [r7, #10]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	813b      	strh	r3, [r7, #8]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b92:	f7ff f8bd 	bl	8001d10 <HAL_GetTick>
 8002b96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	f040 8208 	bne.w	8002fb6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	2319      	movs	r3, #25
 8002bac:	2201      	movs	r2, #1
 8002bae:	497b      	ldr	r1, [pc, #492]	; (8002d9c <HAL_I2C_Mem_Read+0x224>)
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 fc3f 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e1fb      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_I2C_Mem_Read+0x56>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e1f4      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d007      	beq.n	8002bf4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2222      	movs	r2, #34	; 0x22
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2240      	movs	r2, #64	; 0x40
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a5b      	ldr	r2, [pc, #364]	; (8002da0 <HAL_I2C_Mem_Read+0x228>)
 8002c34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c36:	88f8      	ldrh	r0, [r7, #6]
 8002c38:	893a      	ldrh	r2, [r7, #8]
 8002c3a:	8979      	ldrh	r1, [r7, #10]
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	4603      	mov	r3, r0
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fb0c 	bl	8003264 <I2C_RequestMemoryRead>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e1b0      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d113      	bne.n	8002c86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	623b      	str	r3, [r7, #32]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	623b      	str	r3, [r7, #32]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	623b      	str	r3, [r7, #32]
 8002c72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	e184      	b.n	8002f90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d11b      	bne.n	8002cc6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	61fb      	str	r3, [r7, #28]
 8002cb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	e164      	b.n	8002f90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d11b      	bne.n	8002d06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cdc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	e144      	b.n	8002f90 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d1c:	e138      	b.n	8002f90 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	f200 80f1 	bhi.w	8002f0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d123      	bne.n	8002d78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fcd5 	bl	80036e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e139      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d76:	e10b      	b.n	8002f90 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d14e      	bne.n	8002e1e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d86:	2200      	movs	r2, #0
 8002d88:	4906      	ldr	r1, [pc, #24]	; (8002da4 <HAL_I2C_Mem_Read+0x22c>)
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 fb52 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e10e      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
 8002d9a:	bf00      	nop
 8002d9c:	00100002 	.word	0x00100002
 8002da0:	ffff0000 	.word	0xffff0000
 8002da4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e1c:	e0b8      	b.n	8002f90 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e24:	2200      	movs	r2, #0
 8002e26:	4966      	ldr	r1, [pc, #408]	; (8002fc0 <HAL_I2C_Mem_Read+0x448>)
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 fb03 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0bf      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	2200      	movs	r2, #0
 8002e82:	494f      	ldr	r1, [pc, #316]	; (8002fc0 <HAL_I2C_Mem_Read+0x448>)
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 fad5 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e091      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f08:	e042      	b.n	8002f90 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fbe8 	bl	80036e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e04c      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d118      	bne.n	8002f90 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f47f aec2 	bne.w	8002d1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e000      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002fb6:	2302      	movs	r3, #2
  }
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3728      	adds	r7, #40	; 0x28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	00010004 	.word	0x00010004

08002fc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d006      	beq.n	8002fee <I2C_MasterRequestWrite+0x2a>
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d003      	beq.n	8002fee <I2C_MasterRequestWrite+0x2a>
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fec:	d108      	bne.n	8003000 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e00b      	b.n	8003018 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	2b12      	cmp	r3, #18
 8003006:	d107      	bne.n	8003018 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003016:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fa05 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00d      	beq.n	800304c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800303e:	d103      	bne.n	8003048 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e035      	b.n	80030b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003054:	d108      	bne.n	8003068 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003056:	897b      	ldrh	r3, [r7, #10]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003064:	611a      	str	r2, [r3, #16]
 8003066:	e01b      	b.n	80030a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003068:	897b      	ldrh	r3, [r7, #10]
 800306a:	11db      	asrs	r3, r3, #7
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f003 0306 	and.w	r3, r3, #6
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f063 030f 	orn	r3, r3, #15
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	490e      	ldr	r1, [pc, #56]	; (80030c0 <I2C_MasterRequestWrite+0xfc>)
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fa2b 	bl	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e010      	b.n	80030b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003096:	897b      	ldrh	r3, [r7, #10]
 8003098:	b2da      	uxtb	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4907      	ldr	r1, [pc, #28]	; (80030c4 <I2C_MasterRequestWrite+0x100>)
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fa1b 	bl	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	00010008 	.word	0x00010008
 80030c4:	00010002 	.word	0x00010002

080030c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	460b      	mov	r3, r1
 80030d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d006      	beq.n	8003102 <I2C_MasterRequestRead+0x3a>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d003      	beq.n	8003102 <I2C_MasterRequestRead+0x3a>
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003100:	d108      	bne.n	8003114 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	e00b      	b.n	800312c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	2b11      	cmp	r3, #17
 800311a:	d107      	bne.n	800312c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800312a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f97b 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00d      	beq.n	8003160 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003152:	d103      	bne.n	800315c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e079      	b.n	8003254 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003168:	d108      	bne.n	800317c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800316a:	897b      	ldrh	r3, [r7, #10]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	b2da      	uxtb	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	611a      	str	r2, [r3, #16]
 800317a:	e05f      	b.n	800323c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800317c:	897b      	ldrh	r3, [r7, #10]
 800317e:	11db      	asrs	r3, r3, #7
 8003180:	b2db      	uxtb	r3, r3
 8003182:	f003 0306 	and.w	r3, r3, #6
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f063 030f 	orn	r3, r3, #15
 800318c:	b2da      	uxtb	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4930      	ldr	r1, [pc, #192]	; (800325c <I2C_MasterRequestRead+0x194>)
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f9a1 	bl	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e054      	b.n	8003254 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031aa:	897b      	ldrh	r3, [r7, #10]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	4929      	ldr	r1, [pc, #164]	; (8003260 <I2C_MasterRequestRead+0x198>)
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f991 	bl	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e044      	b.n	8003254 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f919 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00d      	beq.n	8003224 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003216:	d103      	bne.n	8003220 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800321e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e017      	b.n	8003254 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003224:	897b      	ldrh	r3, [r7, #10]
 8003226:	11db      	asrs	r3, r3, #7
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f003 0306 	and.w	r3, r3, #6
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f063 030e 	orn	r3, r3, #14
 8003234:	b2da      	uxtb	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	4907      	ldr	r1, [pc, #28]	; (8003260 <I2C_MasterRequestRead+0x198>)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f94d 	bl	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	00010008 	.word	0x00010008
 8003260:	00010002 	.word	0x00010002

08003264 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	4608      	mov	r0, r1
 800326e:	4611      	mov	r1, r2
 8003270:	461a      	mov	r2, r3
 8003272:	4603      	mov	r3, r0
 8003274:	817b      	strh	r3, [r7, #10]
 8003276:	460b      	mov	r3, r1
 8003278:	813b      	strh	r3, [r7, #8]
 800327a:	4613      	mov	r3, r2
 800327c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800328c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800329c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f8c2 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00d      	beq.n	80032d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c4:	d103      	bne.n	80032ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e0aa      	b.n	8003428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032d2:	897b      	ldrh	r3, [r7, #10]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	6a3a      	ldr	r2, [r7, #32]
 80032e6:	4952      	ldr	r1, [pc, #328]	; (8003430 <I2C_RequestMemoryRead+0x1cc>)
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f8fa 	bl	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e097      	b.n	8003428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800330e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003310:	6a39      	ldr	r1, [r7, #32]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f964 	bl	80035e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00d      	beq.n	800333a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	2b04      	cmp	r3, #4
 8003324:	d107      	bne.n	8003336 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003334:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e076      	b.n	8003428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d105      	bne.n	800334c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003340:	893b      	ldrh	r3, [r7, #8]
 8003342:	b2da      	uxtb	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	611a      	str	r2, [r3, #16]
 800334a:	e021      	b.n	8003390 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800334c:	893b      	ldrh	r3, [r7, #8]
 800334e:	0a1b      	lsrs	r3, r3, #8
 8003350:	b29b      	uxth	r3, r3
 8003352:	b2da      	uxtb	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800335a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335c:	6a39      	ldr	r1, [r7, #32]
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f93e 	bl	80035e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00d      	beq.n	8003386 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	2b04      	cmp	r3, #4
 8003370:	d107      	bne.n	8003382 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003380:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e050      	b.n	8003428 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003386:	893b      	ldrh	r3, [r7, #8]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003392:	6a39      	ldr	r1, [r7, #32]
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f923 	bl	80035e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00d      	beq.n	80033bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d107      	bne.n	80033b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e035      	b.n	8003428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f82b 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00d      	beq.n	8003400 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f2:	d103      	bne.n	80033fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e013      	b.n	8003428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003400:	897b      	ldrh	r3, [r7, #10]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	6a3a      	ldr	r2, [r7, #32]
 8003414:	4906      	ldr	r1, [pc, #24]	; (8003430 <I2C_RequestMemoryRead+0x1cc>)
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f863 	bl	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	00010002 	.word	0x00010002

08003434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003444:	e025      	b.n	8003492 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d021      	beq.n	8003492 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344e:	f7fe fc5f 	bl	8001d10 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d302      	bcc.n	8003464 <I2C_WaitOnFlagUntilTimeout+0x30>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d116      	bne.n	8003492 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f043 0220 	orr.w	r2, r3, #32
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e023      	b.n	80034da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	0c1b      	lsrs	r3, r3, #16
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b01      	cmp	r3, #1
 800349a:	d10d      	bne.n	80034b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	43da      	mvns	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4013      	ands	r3, r2
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	bf0c      	ite	eq
 80034ae:	2301      	moveq	r3, #1
 80034b0:	2300      	movne	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	e00c      	b.n	80034d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	43da      	mvns	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4013      	ands	r3, r2
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bf0c      	ite	eq
 80034ca:	2301      	moveq	r3, #1
 80034cc:	2300      	movne	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d0b6      	beq.n	8003446 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f0:	e051      	b.n	8003596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003500:	d123      	bne.n	800354a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003510:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800351a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f043 0204 	orr.w	r2, r3, #4
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e046      	b.n	80035d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d021      	beq.n	8003596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003552:	f7fe fbdd 	bl	8001d10 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	429a      	cmp	r2, r3
 8003560:	d302      	bcc.n	8003568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d116      	bne.n	8003596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f043 0220 	orr.w	r2, r3, #32
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e020      	b.n	80035d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d10c      	bne.n	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	43da      	mvns	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4013      	ands	r3, r2
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bf14      	ite	ne
 80035b2:	2301      	movne	r3, #1
 80035b4:	2300      	moveq	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	e00b      	b.n	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	43da      	mvns	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4013      	ands	r3, r2
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf14      	ite	ne
 80035cc:	2301      	movne	r3, #1
 80035ce:	2300      	moveq	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d18d      	bne.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035ec:	e02d      	b.n	800364a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f8ce 	bl	8003790 <I2C_IsAcknowledgeFailed>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e02d      	b.n	800365a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d021      	beq.n	800364a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003606:	f7fe fb83 	bl	8001d10 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	429a      	cmp	r2, r3
 8003614:	d302      	bcc.n	800361c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d116      	bne.n	800364a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f043 0220 	orr.w	r2, r3, #32
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e007      	b.n	800365a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003654:	2b80      	cmp	r3, #128	; 0x80
 8003656:	d1ca      	bne.n	80035ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800366e:	e02d      	b.n	80036cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f88d 	bl	8003790 <I2C_IsAcknowledgeFailed>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e02d      	b.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d021      	beq.n	80036cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003688:	f7fe fb42 	bl	8001d10 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	429a      	cmp	r2, r3
 8003696:	d302      	bcc.n	800369e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d116      	bne.n	80036cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e007      	b.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d1ca      	bne.n	8003670 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036f0:	e042      	b.n	8003778 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b10      	cmp	r3, #16
 80036fe:	d119      	bne.n	8003734 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0210 	mvn.w	r2, #16
 8003708:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e029      	b.n	8003788 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003734:	f7fe faec 	bl	8001d10 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	429a      	cmp	r2, r3
 8003742:	d302      	bcc.n	800374a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d116      	bne.n	8003778 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f043 0220 	orr.w	r2, r3, #32
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e007      	b.n	8003788 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	d1b5      	bne.n	80036f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a6:	d11b      	bne.n	80037e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	f043 0204 	orr.w	r2, r3, #4
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e267      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d075      	beq.n	80038fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800380e:	4b88      	ldr	r3, [pc, #544]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b04      	cmp	r3, #4
 8003818:	d00c      	beq.n	8003834 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800381a:	4b85      	ldr	r3, [pc, #532]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003822:	2b08      	cmp	r3, #8
 8003824:	d112      	bne.n	800384c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003826:	4b82      	ldr	r3, [pc, #520]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003832:	d10b      	bne.n	800384c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	4b7e      	ldr	r3, [pc, #504]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d05b      	beq.n	80038f8 <HAL_RCC_OscConfig+0x108>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d157      	bne.n	80038f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e242      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003854:	d106      	bne.n	8003864 <HAL_RCC_OscConfig+0x74>
 8003856:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a75      	ldr	r2, [pc, #468]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e01d      	b.n	80038a0 <HAL_RCC_OscConfig+0xb0>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800386c:	d10c      	bne.n	8003888 <HAL_RCC_OscConfig+0x98>
 800386e:	4b70      	ldr	r3, [pc, #448]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a6f      	ldr	r2, [pc, #444]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	4b6d      	ldr	r3, [pc, #436]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a6c      	ldr	r2, [pc, #432]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	e00b      	b.n	80038a0 <HAL_RCC_OscConfig+0xb0>
 8003888:	4b69      	ldr	r3, [pc, #420]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a68      	ldr	r2, [pc, #416]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800388e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	4b66      	ldr	r3, [pc, #408]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a65      	ldr	r2, [pc, #404]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800389a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d013      	beq.n	80038d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fe fa32 	bl	8001d10 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fe fa2e 	bl	8001d10 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	; 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e207      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c2:	4b5b      	ldr	r3, [pc, #364]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0xc0>
 80038ce:	e014      	b.n	80038fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fe fa1e 	bl	8001d10 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d8:	f7fe fa1a 	bl	8001d10 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b64      	cmp	r3, #100	; 0x64
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e1f3      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ea:	4b51      	ldr	r3, [pc, #324]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0xe8>
 80038f6:	e000      	b.n	80038fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d063      	beq.n	80039ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003906:	4b4a      	ldr	r3, [pc, #296]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003912:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800391a:	2b08      	cmp	r3, #8
 800391c:	d11c      	bne.n	8003958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800391e:	4b44      	ldr	r3, [pc, #272]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d116      	bne.n	8003958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392a:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_RCC_OscConfig+0x152>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d001      	beq.n	8003942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e1c7      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003942:	4b3b      	ldr	r3, [pc, #236]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4937      	ldr	r1, [pc, #220]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003956:	e03a      	b.n	80039ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d020      	beq.n	80039a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003960:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <HAL_RCC_OscConfig+0x244>)
 8003962:	2201      	movs	r2, #1
 8003964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003966:	f7fe f9d3 	bl	8001d10 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800396e:	f7fe f9cf 	bl	8001d10 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e1a8      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003980:	4b2b      	ldr	r3, [pc, #172]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398c:	4b28      	ldr	r3, [pc, #160]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4925      	ldr	r1, [pc, #148]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800399c:	4313      	orrs	r3, r2
 800399e:	600b      	str	r3, [r1, #0]
 80039a0:	e015      	b.n	80039ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_RCC_OscConfig+0x244>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fe f9b2 	bl	8001d10 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b0:	f7fe f9ae 	bl	8001d10 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e187      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c2:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d036      	beq.n	8003a48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d016      	beq.n	8003a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039e2:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <HAL_RCC_OscConfig+0x248>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e8:	f7fe f992 	bl	8001d10 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f0:	f7fe f98e 	bl	8001d10 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e167      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0x200>
 8003a0e:	e01b      	b.n	8003a48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <HAL_RCC_OscConfig+0x248>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a16:	f7fe f97b 	bl	8001d10 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1c:	e00e      	b.n	8003a3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a1e:	f7fe f977 	bl	8001d10 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d907      	bls.n	8003a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e150      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
 8003a30:	40023800 	.word	0x40023800
 8003a34:	42470000 	.word	0x42470000
 8003a38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3c:	4b88      	ldr	r3, [pc, #544]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1ea      	bne.n	8003a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8097 	beq.w	8003b84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a5a:	4b81      	ldr	r3, [pc, #516]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10f      	bne.n	8003a86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	4b7d      	ldr	r3, [pc, #500]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	4a7c      	ldr	r2, [pc, #496]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a74:	6413      	str	r3, [r2, #64]	; 0x40
 8003a76:	4b7a      	ldr	r3, [pc, #488]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a82:	2301      	movs	r3, #1
 8003a84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a86:	4b77      	ldr	r3, [pc, #476]	; (8003c64 <HAL_RCC_OscConfig+0x474>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d118      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a92:	4b74      	ldr	r3, [pc, #464]	; (8003c64 <HAL_RCC_OscConfig+0x474>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a73      	ldr	r2, [pc, #460]	; (8003c64 <HAL_RCC_OscConfig+0x474>)
 8003a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a9e:	f7fe f937 	bl	8001d10 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa6:	f7fe f933 	bl	8001d10 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e10c      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab8:	4b6a      	ldr	r3, [pc, #424]	; (8003c64 <HAL_RCC_OscConfig+0x474>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d106      	bne.n	8003ada <HAL_RCC_OscConfig+0x2ea>
 8003acc:	4b64      	ldr	r3, [pc, #400]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	4a63      	ldr	r2, [pc, #396]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad8:	e01c      	b.n	8003b14 <HAL_RCC_OscConfig+0x324>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b05      	cmp	r3, #5
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0x30c>
 8003ae2:	4b5f      	ldr	r3, [pc, #380]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	4a5e      	ldr	r2, [pc, #376]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	f043 0304 	orr.w	r3, r3, #4
 8003aec:	6713      	str	r3, [r2, #112]	; 0x70
 8003aee:	4b5c      	ldr	r3, [pc, #368]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	4a5b      	ldr	r2, [pc, #364]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	6713      	str	r3, [r2, #112]	; 0x70
 8003afa:	e00b      	b.n	8003b14 <HAL_RCC_OscConfig+0x324>
 8003afc:	4b58      	ldr	r3, [pc, #352]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	4a57      	ldr	r2, [pc, #348]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	6713      	str	r3, [r2, #112]	; 0x70
 8003b08:	4b55      	ldr	r3, [pc, #340]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a54      	ldr	r2, [pc, #336]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b0e:	f023 0304 	bic.w	r3, r3, #4
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d015      	beq.n	8003b48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1c:	f7fe f8f8 	bl	8001d10 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b24:	f7fe f8f4 	bl	8001d10 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e0cb      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3a:	4b49      	ldr	r3, [pc, #292]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0ee      	beq.n	8003b24 <HAL_RCC_OscConfig+0x334>
 8003b46:	e014      	b.n	8003b72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b48:	f7fe f8e2 	bl	8001d10 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b50:	f7fe f8de 	bl	8001d10 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e0b5      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b66:	4b3e      	ldr	r3, [pc, #248]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1ee      	bne.n	8003b50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b72:	7dfb      	ldrb	r3, [r7, #23]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b78:	4b39      	ldr	r3, [pc, #228]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	4a38      	ldr	r2, [pc, #224]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80a1 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b8e:	4b34      	ldr	r3, [pc, #208]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d05c      	beq.n	8003c54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d141      	bne.n	8003c26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba2:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <HAL_RCC_OscConfig+0x478>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fe f8b2 	bl	8001d10 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb0:	f7fe f8ae 	bl	8001d10 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e087      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc2:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69da      	ldr	r2, [r3, #28]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	019b      	lsls	r3, r3, #6
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	085b      	lsrs	r3, r3, #1
 8003be6:	3b01      	subs	r3, #1
 8003be8:	041b      	lsls	r3, r3, #16
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	061b      	lsls	r3, r3, #24
 8003bf2:	491b      	ldr	r1, [pc, #108]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_RCC_OscConfig+0x478>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fe f887 	bl	8001d10 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fe f883 	bl	8001d10 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e05c      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x416>
 8003c24:	e054      	b.n	8003cd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c26:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <HAL_RCC_OscConfig+0x478>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fe f870 	bl	8001d10 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fe f86c 	bl	8001d10 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e045      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x444>
 8003c52:	e03d      	b.n	8003cd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e038      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
 8003c60:	40023800 	.word	0x40023800
 8003c64:	40007000 	.word	0x40007000
 8003c68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c6c:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <HAL_RCC_OscConfig+0x4ec>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d028      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d121      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d11a      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ca2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d111      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d107      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800

08003ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0cc      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cf4:	4b68      	ldr	r3, [pc, #416]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d90c      	bls.n	8003d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b65      	ldr	r3, [pc, #404]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	4b63      	ldr	r3, [pc, #396]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0b8      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d020      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d34:	4b59      	ldr	r3, [pc, #356]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a58      	ldr	r2, [pc, #352]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d4c:	4b53      	ldr	r3, [pc, #332]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4a52      	ldr	r2, [pc, #328]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d58:	4b50      	ldr	r3, [pc, #320]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	494d      	ldr	r1, [pc, #308]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d044      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d107      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7e:	4b47      	ldr	r3, [pc, #284]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d119      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e07f      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d003      	beq.n	8003d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d107      	bne.n	8003dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9e:	4b3f      	ldr	r3, [pc, #252]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e06f      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dae:	4b3b      	ldr	r3, [pc, #236]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e067      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dbe:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f023 0203 	bic.w	r2, r3, #3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	4934      	ldr	r1, [pc, #208]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dd0:	f7fd ff9e 	bl	8001d10 <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	e00a      	b.n	8003dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd8:	f7fd ff9a 	bl	8001d10 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e04f      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dee:	4b2b      	ldr	r3, [pc, #172]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 020c 	and.w	r2, r3, #12
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d1eb      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e00:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d20c      	bcs.n	8003e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0e:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e16:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e032      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e34:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4916      	ldr	r1, [pc, #88]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d009      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e52:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	490e      	ldr	r1, [pc, #56]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e66:	f000 f821 	bl	8003eac <HAL_RCC_GetSysClockFreq>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	490a      	ldr	r1, [pc, #40]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e78:	5ccb      	ldrb	r3, [r1, r3]
 8003e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7e:	4a09      	ldr	r2, [pc, #36]	; (8003ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e82:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fd fefe 	bl	8001c88 <HAL_InitTick>

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40023c00 	.word	0x40023c00
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	08005834 	.word	0x08005834
 8003ea4:	20000000 	.word	0x20000000
 8003ea8:	20000004 	.word	0x20000004

08003eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb0:	b094      	sub	sp, #80	; 0x50
 8003eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb8:	2300      	movs	r3, #0
 8003eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ec4:	4b79      	ldr	r3, [pc, #484]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 030c 	and.w	r3, r3, #12
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d00d      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0x40>
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	f200 80e1 	bhi.w	8004098 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d003      	beq.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ede:	e0db      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee0:	4b73      	ldr	r3, [pc, #460]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ee2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ee4:	e0db      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ee6:	4b73      	ldr	r3, [pc, #460]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ee8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eea:	e0d8      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eec:	4b6f      	ldr	r3, [pc, #444]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ef4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ef6:	4b6d      	ldr	r3, [pc, #436]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d063      	beq.n	8003fca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f02:	4b6a      	ldr	r3, [pc, #424]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	099b      	lsrs	r3, r3, #6
 8003f08:	2200      	movs	r2, #0
 8003f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f14:	633b      	str	r3, [r7, #48]	; 0x30
 8003f16:	2300      	movs	r3, #0
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
 8003f1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f1e:	4622      	mov	r2, r4
 8003f20:	462b      	mov	r3, r5
 8003f22:	f04f 0000 	mov.w	r0, #0
 8003f26:	f04f 0100 	mov.w	r1, #0
 8003f2a:	0159      	lsls	r1, r3, #5
 8003f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f30:	0150      	lsls	r0, r2, #5
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4621      	mov	r1, r4
 8003f38:	1a51      	subs	r1, r2, r1
 8003f3a:	6139      	str	r1, [r7, #16]
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f50:	4659      	mov	r1, fp
 8003f52:	018b      	lsls	r3, r1, #6
 8003f54:	4651      	mov	r1, sl
 8003f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	018a      	lsls	r2, r1, #6
 8003f5e:	4651      	mov	r1, sl
 8003f60:	ebb2 0801 	subs.w	r8, r2, r1
 8003f64:	4659      	mov	r1, fp
 8003f66:	eb63 0901 	sbc.w	r9, r3, r1
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f7e:	4690      	mov	r8, r2
 8003f80:	4699      	mov	r9, r3
 8003f82:	4623      	mov	r3, r4
 8003f84:	eb18 0303 	adds.w	r3, r8, r3
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	462b      	mov	r3, r5
 8003f8c:	eb49 0303 	adc.w	r3, r9, r3
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	024b      	lsls	r3, r1, #9
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fa8:	4621      	mov	r1, r4
 8003faa:	024a      	lsls	r2, r1, #9
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fbc:	f7fc fde8 	bl	8000b90 <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc8:	e058      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fca:	4b38      	ldr	r3, [pc, #224]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	099b      	lsrs	r3, r3, #6
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fda:	623b      	str	r3, [r7, #32]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	f04f 0000 	mov.w	r0, #0
 8003fec:	f04f 0100 	mov.w	r1, #0
 8003ff0:	0159      	lsls	r1, r3, #5
 8003ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ff6:	0150      	lsls	r0, r2, #5
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4641      	mov	r1, r8
 8003ffe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004002:	4649      	mov	r1, r9
 8004004:	eb63 0b01 	sbc.w	fp, r3, r1
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004014:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004018:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800401c:	ebb2 040a 	subs.w	r4, r2, sl
 8004020:	eb63 050b 	sbc.w	r5, r3, fp
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	00eb      	lsls	r3, r5, #3
 800402e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004032:	00e2      	lsls	r2, r4, #3
 8004034:	4614      	mov	r4, r2
 8004036:	461d      	mov	r5, r3
 8004038:	4643      	mov	r3, r8
 800403a:	18e3      	adds	r3, r4, r3
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	464b      	mov	r3, r9
 8004040:	eb45 0303 	adc.w	r3, r5, r3
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004052:	4629      	mov	r1, r5
 8004054:	028b      	lsls	r3, r1, #10
 8004056:	4621      	mov	r1, r4
 8004058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800405c:	4621      	mov	r1, r4
 800405e:	028a      	lsls	r2, r1, #10
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004066:	2200      	movs	r2, #0
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	61fa      	str	r2, [r7, #28]
 800406c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004070:	f7fc fd8e 	bl	8000b90 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4613      	mov	r3, r2
 800407a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	0c1b      	lsrs	r3, r3, #16
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	3301      	adds	r3, #1
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800408c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800408e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004096:	e002      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800409a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800409c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3750      	adds	r7, #80	; 0x50
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	00f42400 	.word	0x00f42400
 80040b4:	007a1200 	.word	0x007a1200

080040b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040bc:	4b03      	ldr	r3, [pc, #12]	; (80040cc <HAL_RCC_GetHCLKFreq+0x14>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000000 	.word	0x20000000

080040d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040d4:	f7ff fff0 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0a9b      	lsrs	r3, r3, #10
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4903      	ldr	r1, [pc, #12]	; (80040f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040e6:	5ccb      	ldrb	r3, [r1, r3]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	08005844 	.word	0x08005844

080040f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040fc:	f7ff ffdc 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	0b5b      	lsrs	r3, r3, #13
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4903      	ldr	r1, [pc, #12]	; (800411c <HAL_RCC_GetPCLK2Freq+0x24>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40023800 	.word	0x40023800
 800411c:	08005844 	.word	0x08005844

08004120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e041      	b.n	80041b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fd fc96 	bl	8001a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f000 f82e 	bl	80041c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a40      	ldr	r2, [pc, #256]	; (80042d4 <TIM_Base_SetConfig+0x114>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d013      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041de:	d00f      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a3d      	ldr	r2, [pc, #244]	; (80042d8 <TIM_Base_SetConfig+0x118>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00b      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a3c      	ldr	r2, [pc, #240]	; (80042dc <TIM_Base_SetConfig+0x11c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d007      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a3b      	ldr	r2, [pc, #236]	; (80042e0 <TIM_Base_SetConfig+0x120>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a3a      	ldr	r2, [pc, #232]	; (80042e4 <TIM_Base_SetConfig+0x124>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d108      	bne.n	8004212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2f      	ldr	r2, [pc, #188]	; (80042d4 <TIM_Base_SetConfig+0x114>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d02b      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004220:	d027      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a2c      	ldr	r2, [pc, #176]	; (80042d8 <TIM_Base_SetConfig+0x118>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d023      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a2b      	ldr	r2, [pc, #172]	; (80042dc <TIM_Base_SetConfig+0x11c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01f      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a2a      	ldr	r2, [pc, #168]	; (80042e0 <TIM_Base_SetConfig+0x120>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d01b      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a29      	ldr	r2, [pc, #164]	; (80042e4 <TIM_Base_SetConfig+0x124>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d017      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a28      	ldr	r2, [pc, #160]	; (80042e8 <TIM_Base_SetConfig+0x128>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d013      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a27      	ldr	r2, [pc, #156]	; (80042ec <TIM_Base_SetConfig+0x12c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00f      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a26      	ldr	r2, [pc, #152]	; (80042f0 <TIM_Base_SetConfig+0x130>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00b      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <TIM_Base_SetConfig+0x134>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d007      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a24      	ldr	r2, [pc, #144]	; (80042f8 <TIM_Base_SetConfig+0x138>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d003      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a23      	ldr	r2, [pc, #140]	; (80042fc <TIM_Base_SetConfig+0x13c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d108      	bne.n	8004284 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <TIM_Base_SetConfig+0x114>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_Base_SetConfig+0xf8>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <TIM_Base_SetConfig+0x124>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d103      	bne.n	80042c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	615a      	str	r2, [r3, #20]
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40010000 	.word	0x40010000
 80042d8:	40000400 	.word	0x40000400
 80042dc:	40000800 	.word	0x40000800
 80042e0:	40000c00 	.word	0x40000c00
 80042e4:	40010400 	.word	0x40010400
 80042e8:	40014000 	.word	0x40014000
 80042ec:	40014400 	.word	0x40014400
 80042f0:	40014800 	.word	0x40014800
 80042f4:	40001800 	.word	0x40001800
 80042f8:	40001c00 	.word	0x40001c00
 80042fc:	40002000 	.word	0x40002000

08004300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004314:	2302      	movs	r3, #2
 8004316:	e05a      	b.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a21      	ldr	r2, [pc, #132]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d022      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004364:	d01d      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1d      	ldr	r2, [pc, #116]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d018      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1b      	ldr	r2, [pc, #108]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1a      	ldr	r2, [pc, #104]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00e      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a18      	ldr	r2, [pc, #96]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a15      	ldr	r2, [pc, #84]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d10c      	bne.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40010000 	.word	0x40010000
 80043e0:	40000400 	.word	0x40000400
 80043e4:	40000800 	.word	0x40000800
 80043e8:	40000c00 	.word	0x40000c00
 80043ec:	40010400 	.word	0x40010400
 80043f0:	40014000 	.word	0x40014000
 80043f4:	40001800 	.word	0x40001800

080043f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e03f      	b.n	800448a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fd fb62 	bl	8001ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2224      	movs	r2, #36	; 0x24
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800443a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f829 	bl	8004494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004498:	b0c0      	sub	sp, #256	; 0x100
 800449a:	af00      	add	r7, sp, #0
 800449c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b0:	68d9      	ldr	r1, [r3, #12]
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	ea40 0301 	orr.w	r3, r0, r1
 80044bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044ec:	f021 010c 	bic.w	r1, r1, #12
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044fa:	430b      	orrs	r3, r1
 80044fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450e:	6999      	ldr	r1, [r3, #24]
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	ea40 0301 	orr.w	r3, r0, r1
 800451a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	4b8f      	ldr	r3, [pc, #572]	; (8004760 <UART_SetConfig+0x2cc>)
 8004524:	429a      	cmp	r2, r3
 8004526:	d005      	beq.n	8004534 <UART_SetConfig+0xa0>
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b8d      	ldr	r3, [pc, #564]	; (8004764 <UART_SetConfig+0x2d0>)
 8004530:	429a      	cmp	r2, r3
 8004532:	d104      	bne.n	800453e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004534:	f7ff fde0 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 8004538:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800453c:	e003      	b.n	8004546 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800453e:	f7ff fdc7 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 8004542:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004550:	f040 810c 	bne.w	800476c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004558:	2200      	movs	r2, #0
 800455a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800455e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004562:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004566:	4622      	mov	r2, r4
 8004568:	462b      	mov	r3, r5
 800456a:	1891      	adds	r1, r2, r2
 800456c:	65b9      	str	r1, [r7, #88]	; 0x58
 800456e:	415b      	adcs	r3, r3
 8004570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004572:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004576:	4621      	mov	r1, r4
 8004578:	eb12 0801 	adds.w	r8, r2, r1
 800457c:	4629      	mov	r1, r5
 800457e:	eb43 0901 	adc.w	r9, r3, r1
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800458e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004596:	4690      	mov	r8, r2
 8004598:	4699      	mov	r9, r3
 800459a:	4623      	mov	r3, r4
 800459c:	eb18 0303 	adds.w	r3, r8, r3
 80045a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045a4:	462b      	mov	r3, r5
 80045a6:	eb49 0303 	adc.w	r3, r9, r3
 80045aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045c2:	460b      	mov	r3, r1
 80045c4:	18db      	adds	r3, r3, r3
 80045c6:	653b      	str	r3, [r7, #80]	; 0x50
 80045c8:	4613      	mov	r3, r2
 80045ca:	eb42 0303 	adc.w	r3, r2, r3
 80045ce:	657b      	str	r3, [r7, #84]	; 0x54
 80045d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045d8:	f7fc fada 	bl	8000b90 <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4b61      	ldr	r3, [pc, #388]	; (8004768 <UART_SetConfig+0x2d4>)
 80045e2:	fba3 2302 	umull	r2, r3, r3, r2
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	011c      	lsls	r4, r3, #4
 80045ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045fc:	4642      	mov	r2, r8
 80045fe:	464b      	mov	r3, r9
 8004600:	1891      	adds	r1, r2, r2
 8004602:	64b9      	str	r1, [r7, #72]	; 0x48
 8004604:	415b      	adcs	r3, r3
 8004606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004608:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800460c:	4641      	mov	r1, r8
 800460e:	eb12 0a01 	adds.w	sl, r2, r1
 8004612:	4649      	mov	r1, r9
 8004614:	eb43 0b01 	adc.w	fp, r3, r1
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004624:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800462c:	4692      	mov	sl, r2
 800462e:	469b      	mov	fp, r3
 8004630:	4643      	mov	r3, r8
 8004632:	eb1a 0303 	adds.w	r3, sl, r3
 8004636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800463a:	464b      	mov	r3, r9
 800463c:	eb4b 0303 	adc.w	r3, fp, r3
 8004640:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004650:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004654:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004658:	460b      	mov	r3, r1
 800465a:	18db      	adds	r3, r3, r3
 800465c:	643b      	str	r3, [r7, #64]	; 0x40
 800465e:	4613      	mov	r3, r2
 8004660:	eb42 0303 	adc.w	r3, r2, r3
 8004664:	647b      	str	r3, [r7, #68]	; 0x44
 8004666:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800466a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800466e:	f7fc fa8f 	bl	8000b90 <__aeabi_uldivmod>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4611      	mov	r1, r2
 8004678:	4b3b      	ldr	r3, [pc, #236]	; (8004768 <UART_SetConfig+0x2d4>)
 800467a:	fba3 2301 	umull	r2, r3, r3, r1
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	2264      	movs	r2, #100	; 0x64
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	1acb      	subs	r3, r1, r3
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800468e:	4b36      	ldr	r3, [pc, #216]	; (8004768 <UART_SetConfig+0x2d4>)
 8004690:	fba3 2302 	umull	r2, r3, r3, r2
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800469c:	441c      	add	r4, r3
 800469e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046b0:	4642      	mov	r2, r8
 80046b2:	464b      	mov	r3, r9
 80046b4:	1891      	adds	r1, r2, r2
 80046b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80046b8:	415b      	adcs	r3, r3
 80046ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046c0:	4641      	mov	r1, r8
 80046c2:	1851      	adds	r1, r2, r1
 80046c4:	6339      	str	r1, [r7, #48]	; 0x30
 80046c6:	4649      	mov	r1, r9
 80046c8:	414b      	adcs	r3, r1
 80046ca:	637b      	str	r3, [r7, #52]	; 0x34
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046d8:	4659      	mov	r1, fp
 80046da:	00cb      	lsls	r3, r1, #3
 80046dc:	4651      	mov	r1, sl
 80046de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046e2:	4651      	mov	r1, sl
 80046e4:	00ca      	lsls	r2, r1, #3
 80046e6:	4610      	mov	r0, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	4603      	mov	r3, r0
 80046ec:	4642      	mov	r2, r8
 80046ee:	189b      	adds	r3, r3, r2
 80046f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046f4:	464b      	mov	r3, r9
 80046f6:	460a      	mov	r2, r1
 80046f8:	eb42 0303 	adc.w	r3, r2, r3
 80046fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800470c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004710:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004714:	460b      	mov	r3, r1
 8004716:	18db      	adds	r3, r3, r3
 8004718:	62bb      	str	r3, [r7, #40]	; 0x28
 800471a:	4613      	mov	r3, r2
 800471c:	eb42 0303 	adc.w	r3, r2, r3
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004722:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004726:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800472a:	f7fc fa31 	bl	8000b90 <__aeabi_uldivmod>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4b0d      	ldr	r3, [pc, #52]	; (8004768 <UART_SetConfig+0x2d4>)
 8004734:	fba3 1302 	umull	r1, r3, r3, r2
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	2164      	movs	r1, #100	; 0x64
 800473c:	fb01 f303 	mul.w	r3, r1, r3
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	3332      	adds	r3, #50	; 0x32
 8004746:	4a08      	ldr	r2, [pc, #32]	; (8004768 <UART_SetConfig+0x2d4>)
 8004748:	fba2 2303 	umull	r2, r3, r2, r3
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	f003 0207 	and.w	r2, r3, #7
 8004752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4422      	add	r2, r4
 800475a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800475c:	e105      	b.n	800496a <UART_SetConfig+0x4d6>
 800475e:	bf00      	nop
 8004760:	40011000 	.word	0x40011000
 8004764:	40011400 	.word	0x40011400
 8004768:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800476c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004770:	2200      	movs	r2, #0
 8004772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004776:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800477a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800477e:	4642      	mov	r2, r8
 8004780:	464b      	mov	r3, r9
 8004782:	1891      	adds	r1, r2, r2
 8004784:	6239      	str	r1, [r7, #32]
 8004786:	415b      	adcs	r3, r3
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
 800478a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800478e:	4641      	mov	r1, r8
 8004790:	1854      	adds	r4, r2, r1
 8004792:	4649      	mov	r1, r9
 8004794:	eb43 0501 	adc.w	r5, r3, r1
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	00eb      	lsls	r3, r5, #3
 80047a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047a6:	00e2      	lsls	r2, r4, #3
 80047a8:	4614      	mov	r4, r2
 80047aa:	461d      	mov	r5, r3
 80047ac:	4643      	mov	r3, r8
 80047ae:	18e3      	adds	r3, r4, r3
 80047b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047b4:	464b      	mov	r3, r9
 80047b6:	eb45 0303 	adc.w	r3, r5, r3
 80047ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047da:	4629      	mov	r1, r5
 80047dc:	008b      	lsls	r3, r1, #2
 80047de:	4621      	mov	r1, r4
 80047e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047e4:	4621      	mov	r1, r4
 80047e6:	008a      	lsls	r2, r1, #2
 80047e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047ec:	f7fc f9d0 	bl	8000b90 <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4b60      	ldr	r3, [pc, #384]	; (8004978 <UART_SetConfig+0x4e4>)
 80047f6:	fba3 2302 	umull	r2, r3, r3, r2
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	011c      	lsls	r4, r3, #4
 80047fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004802:	2200      	movs	r2, #0
 8004804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800480c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004810:	4642      	mov	r2, r8
 8004812:	464b      	mov	r3, r9
 8004814:	1891      	adds	r1, r2, r2
 8004816:	61b9      	str	r1, [r7, #24]
 8004818:	415b      	adcs	r3, r3
 800481a:	61fb      	str	r3, [r7, #28]
 800481c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004820:	4641      	mov	r1, r8
 8004822:	1851      	adds	r1, r2, r1
 8004824:	6139      	str	r1, [r7, #16]
 8004826:	4649      	mov	r1, r9
 8004828:	414b      	adcs	r3, r1
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004838:	4659      	mov	r1, fp
 800483a:	00cb      	lsls	r3, r1, #3
 800483c:	4651      	mov	r1, sl
 800483e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004842:	4651      	mov	r1, sl
 8004844:	00ca      	lsls	r2, r1, #3
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	4603      	mov	r3, r0
 800484c:	4642      	mov	r2, r8
 800484e:	189b      	adds	r3, r3, r2
 8004850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004854:	464b      	mov	r3, r9
 8004856:	460a      	mov	r2, r1
 8004858:	eb42 0303 	adc.w	r3, r2, r3
 800485c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	67bb      	str	r3, [r7, #120]	; 0x78
 800486a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004878:	4649      	mov	r1, r9
 800487a:	008b      	lsls	r3, r1, #2
 800487c:	4641      	mov	r1, r8
 800487e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004882:	4641      	mov	r1, r8
 8004884:	008a      	lsls	r2, r1, #2
 8004886:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800488a:	f7fc f981 	bl	8000b90 <__aeabi_uldivmod>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4b39      	ldr	r3, [pc, #228]	; (8004978 <UART_SetConfig+0x4e4>)
 8004894:	fba3 1302 	umull	r1, r3, r3, r2
 8004898:	095b      	lsrs	r3, r3, #5
 800489a:	2164      	movs	r1, #100	; 0x64
 800489c:	fb01 f303 	mul.w	r3, r1, r3
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	3332      	adds	r3, #50	; 0x32
 80048a6:	4a34      	ldr	r2, [pc, #208]	; (8004978 <UART_SetConfig+0x4e4>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b2:	441c      	add	r4, r3
 80048b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b8:	2200      	movs	r2, #0
 80048ba:	673b      	str	r3, [r7, #112]	; 0x70
 80048bc:	677a      	str	r2, [r7, #116]	; 0x74
 80048be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048c2:	4642      	mov	r2, r8
 80048c4:	464b      	mov	r3, r9
 80048c6:	1891      	adds	r1, r2, r2
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	415b      	adcs	r3, r3
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048d2:	4641      	mov	r1, r8
 80048d4:	1851      	adds	r1, r2, r1
 80048d6:	6039      	str	r1, [r7, #0]
 80048d8:	4649      	mov	r1, r9
 80048da:	414b      	adcs	r3, r1
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048ea:	4659      	mov	r1, fp
 80048ec:	00cb      	lsls	r3, r1, #3
 80048ee:	4651      	mov	r1, sl
 80048f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048f4:	4651      	mov	r1, sl
 80048f6:	00ca      	lsls	r2, r1, #3
 80048f8:	4610      	mov	r0, r2
 80048fa:	4619      	mov	r1, r3
 80048fc:	4603      	mov	r3, r0
 80048fe:	4642      	mov	r2, r8
 8004900:	189b      	adds	r3, r3, r2
 8004902:	66bb      	str	r3, [r7, #104]	; 0x68
 8004904:	464b      	mov	r3, r9
 8004906:	460a      	mov	r2, r1
 8004908:	eb42 0303 	adc.w	r3, r2, r3
 800490c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800490e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	663b      	str	r3, [r7, #96]	; 0x60
 8004918:	667a      	str	r2, [r7, #100]	; 0x64
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004926:	4649      	mov	r1, r9
 8004928:	008b      	lsls	r3, r1, #2
 800492a:	4641      	mov	r1, r8
 800492c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004930:	4641      	mov	r1, r8
 8004932:	008a      	lsls	r2, r1, #2
 8004934:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004938:	f7fc f92a 	bl	8000b90 <__aeabi_uldivmod>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <UART_SetConfig+0x4e4>)
 8004942:	fba3 1302 	umull	r1, r3, r3, r2
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	2164      	movs	r1, #100	; 0x64
 800494a:	fb01 f303 	mul.w	r3, r1, r3
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	3332      	adds	r3, #50	; 0x32
 8004954:	4a08      	ldr	r2, [pc, #32]	; (8004978 <UART_SetConfig+0x4e4>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	f003 020f 	and.w	r2, r3, #15
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4422      	add	r2, r4
 8004968:	609a      	str	r2, [r3, #8]
}
 800496a:	bf00      	nop
 800496c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004970:	46bd      	mov	sp, r7
 8004972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004976:	bf00      	nop
 8004978:	51eb851f 	.word	0x51eb851f

0800497c <__errno>:
 800497c:	4b01      	ldr	r3, [pc, #4]	; (8004984 <__errno+0x8>)
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	2000000c 	.word	0x2000000c

08004988 <__libc_init_array>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	4d0d      	ldr	r5, [pc, #52]	; (80049c0 <__libc_init_array+0x38>)
 800498c:	4c0d      	ldr	r4, [pc, #52]	; (80049c4 <__libc_init_array+0x3c>)
 800498e:	1b64      	subs	r4, r4, r5
 8004990:	10a4      	asrs	r4, r4, #2
 8004992:	2600      	movs	r6, #0
 8004994:	42a6      	cmp	r6, r4
 8004996:	d109      	bne.n	80049ac <__libc_init_array+0x24>
 8004998:	4d0b      	ldr	r5, [pc, #44]	; (80049c8 <__libc_init_array+0x40>)
 800499a:	4c0c      	ldr	r4, [pc, #48]	; (80049cc <__libc_init_array+0x44>)
 800499c:	f000 ff3a 	bl	8005814 <_init>
 80049a0:	1b64      	subs	r4, r4, r5
 80049a2:	10a4      	asrs	r4, r4, #2
 80049a4:	2600      	movs	r6, #0
 80049a6:	42a6      	cmp	r6, r4
 80049a8:	d105      	bne.n	80049b6 <__libc_init_array+0x2e>
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b0:	4798      	blx	r3
 80049b2:	3601      	adds	r6, #1
 80049b4:	e7ee      	b.n	8004994 <__libc_init_array+0xc>
 80049b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ba:	4798      	blx	r3
 80049bc:	3601      	adds	r6, #1
 80049be:	e7f2      	b.n	80049a6 <__libc_init_array+0x1e>
 80049c0:	08005888 	.word	0x08005888
 80049c4:	08005888 	.word	0x08005888
 80049c8:	08005888 	.word	0x08005888
 80049cc:	0800588c 	.word	0x0800588c

080049d0 <memset>:
 80049d0:	4402      	add	r2, r0
 80049d2:	4603      	mov	r3, r0
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d100      	bne.n	80049da <memset+0xa>
 80049d8:	4770      	bx	lr
 80049da:	f803 1b01 	strb.w	r1, [r3], #1
 80049de:	e7f9      	b.n	80049d4 <memset+0x4>

080049e0 <pow>:
 80049e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e2:	ed2d 8b02 	vpush	{d8}
 80049e6:	eeb0 8a40 	vmov.f32	s16, s0
 80049ea:	eef0 8a60 	vmov.f32	s17, s1
 80049ee:	ec55 4b11 	vmov	r4, r5, d1
 80049f2:	f000 f865 	bl	8004ac0 <__ieee754_pow>
 80049f6:	4622      	mov	r2, r4
 80049f8:	462b      	mov	r3, r5
 80049fa:	4620      	mov	r0, r4
 80049fc:	4629      	mov	r1, r5
 80049fe:	ec57 6b10 	vmov	r6, r7, d0
 8004a02:	f7fc f837 	bl	8000a74 <__aeabi_dcmpun>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d13b      	bne.n	8004a82 <pow+0xa2>
 8004a0a:	ec51 0b18 	vmov	r0, r1, d8
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2300      	movs	r3, #0
 8004a12:	f7fb fffd 	bl	8000a10 <__aeabi_dcmpeq>
 8004a16:	b1b8      	cbz	r0, 8004a48 <pow+0x68>
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	4629      	mov	r1, r5
 8004a20:	f7fb fff6 	bl	8000a10 <__aeabi_dcmpeq>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d146      	bne.n	8004ab6 <pow+0xd6>
 8004a28:	ec45 4b10 	vmov	d0, r4, r5
 8004a2c:	f000 fe61 	bl	80056f2 <finite>
 8004a30:	b338      	cbz	r0, 8004a82 <pow+0xa2>
 8004a32:	2200      	movs	r2, #0
 8004a34:	2300      	movs	r3, #0
 8004a36:	4620      	mov	r0, r4
 8004a38:	4629      	mov	r1, r5
 8004a3a:	f7fb fff3 	bl	8000a24 <__aeabi_dcmplt>
 8004a3e:	b300      	cbz	r0, 8004a82 <pow+0xa2>
 8004a40:	f7ff ff9c 	bl	800497c <__errno>
 8004a44:	2322      	movs	r3, #34	; 0x22
 8004a46:	e01b      	b.n	8004a80 <pow+0xa0>
 8004a48:	ec47 6b10 	vmov	d0, r6, r7
 8004a4c:	f000 fe51 	bl	80056f2 <finite>
 8004a50:	b9e0      	cbnz	r0, 8004a8c <pow+0xac>
 8004a52:	eeb0 0a48 	vmov.f32	s0, s16
 8004a56:	eef0 0a68 	vmov.f32	s1, s17
 8004a5a:	f000 fe4a 	bl	80056f2 <finite>
 8004a5e:	b1a8      	cbz	r0, 8004a8c <pow+0xac>
 8004a60:	ec45 4b10 	vmov	d0, r4, r5
 8004a64:	f000 fe45 	bl	80056f2 <finite>
 8004a68:	b180      	cbz	r0, 8004a8c <pow+0xac>
 8004a6a:	4632      	mov	r2, r6
 8004a6c:	463b      	mov	r3, r7
 8004a6e:	4630      	mov	r0, r6
 8004a70:	4639      	mov	r1, r7
 8004a72:	f7fb ffff 	bl	8000a74 <__aeabi_dcmpun>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d0e2      	beq.n	8004a40 <pow+0x60>
 8004a7a:	f7ff ff7f 	bl	800497c <__errno>
 8004a7e:	2321      	movs	r3, #33	; 0x21
 8004a80:	6003      	str	r3, [r0, #0]
 8004a82:	ecbd 8b02 	vpop	{d8}
 8004a86:	ec47 6b10 	vmov	d0, r6, r7
 8004a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2300      	movs	r3, #0
 8004a90:	4630      	mov	r0, r6
 8004a92:	4639      	mov	r1, r7
 8004a94:	f7fb ffbc 	bl	8000a10 <__aeabi_dcmpeq>
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d0f2      	beq.n	8004a82 <pow+0xa2>
 8004a9c:	eeb0 0a48 	vmov.f32	s0, s16
 8004aa0:	eef0 0a68 	vmov.f32	s1, s17
 8004aa4:	f000 fe25 	bl	80056f2 <finite>
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	d0ea      	beq.n	8004a82 <pow+0xa2>
 8004aac:	ec45 4b10 	vmov	d0, r4, r5
 8004ab0:	f000 fe1f 	bl	80056f2 <finite>
 8004ab4:	e7c3      	b.n	8004a3e <pow+0x5e>
 8004ab6:	4f01      	ldr	r7, [pc, #4]	; (8004abc <pow+0xdc>)
 8004ab8:	2600      	movs	r6, #0
 8004aba:	e7e2      	b.n	8004a82 <pow+0xa2>
 8004abc:	3ff00000 	.word	0x3ff00000

08004ac0 <__ieee754_pow>:
 8004ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac4:	ed2d 8b06 	vpush	{d8-d10}
 8004ac8:	b089      	sub	sp, #36	; 0x24
 8004aca:	ed8d 1b00 	vstr	d1, [sp]
 8004ace:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004ad2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004ad6:	ea58 0102 	orrs.w	r1, r8, r2
 8004ada:	ec57 6b10 	vmov	r6, r7, d0
 8004ade:	d115      	bne.n	8004b0c <__ieee754_pow+0x4c>
 8004ae0:	19b3      	adds	r3, r6, r6
 8004ae2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004ae6:	4152      	adcs	r2, r2
 8004ae8:	4299      	cmp	r1, r3
 8004aea:	4b89      	ldr	r3, [pc, #548]	; (8004d10 <__ieee754_pow+0x250>)
 8004aec:	4193      	sbcs	r3, r2
 8004aee:	f080 84d2 	bcs.w	8005496 <__ieee754_pow+0x9d6>
 8004af2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004af6:	4630      	mov	r0, r6
 8004af8:	4639      	mov	r1, r7
 8004afa:	f7fb fb6b 	bl	80001d4 <__adddf3>
 8004afe:	ec41 0b10 	vmov	d0, r0, r1
 8004b02:	b009      	add	sp, #36	; 0x24
 8004b04:	ecbd 8b06 	vpop	{d8-d10}
 8004b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0c:	4b81      	ldr	r3, [pc, #516]	; (8004d14 <__ieee754_pow+0x254>)
 8004b0e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004b12:	429c      	cmp	r4, r3
 8004b14:	ee10 aa10 	vmov	sl, s0
 8004b18:	463d      	mov	r5, r7
 8004b1a:	dc06      	bgt.n	8004b2a <__ieee754_pow+0x6a>
 8004b1c:	d101      	bne.n	8004b22 <__ieee754_pow+0x62>
 8004b1e:	2e00      	cmp	r6, #0
 8004b20:	d1e7      	bne.n	8004af2 <__ieee754_pow+0x32>
 8004b22:	4598      	cmp	r8, r3
 8004b24:	dc01      	bgt.n	8004b2a <__ieee754_pow+0x6a>
 8004b26:	d10f      	bne.n	8004b48 <__ieee754_pow+0x88>
 8004b28:	b172      	cbz	r2, 8004b48 <__ieee754_pow+0x88>
 8004b2a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004b2e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004b32:	ea55 050a 	orrs.w	r5, r5, sl
 8004b36:	d1dc      	bne.n	8004af2 <__ieee754_pow+0x32>
 8004b38:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004b3c:	18db      	adds	r3, r3, r3
 8004b3e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004b42:	4152      	adcs	r2, r2
 8004b44:	429d      	cmp	r5, r3
 8004b46:	e7d0      	b.n	8004aea <__ieee754_pow+0x2a>
 8004b48:	2d00      	cmp	r5, #0
 8004b4a:	da3b      	bge.n	8004bc4 <__ieee754_pow+0x104>
 8004b4c:	4b72      	ldr	r3, [pc, #456]	; (8004d18 <__ieee754_pow+0x258>)
 8004b4e:	4598      	cmp	r8, r3
 8004b50:	dc51      	bgt.n	8004bf6 <__ieee754_pow+0x136>
 8004b52:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004b56:	4598      	cmp	r8, r3
 8004b58:	f340 84ac 	ble.w	80054b4 <__ieee754_pow+0x9f4>
 8004b5c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004b60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004b64:	2b14      	cmp	r3, #20
 8004b66:	dd0f      	ble.n	8004b88 <__ieee754_pow+0xc8>
 8004b68:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004b6c:	fa22 f103 	lsr.w	r1, r2, r3
 8004b70:	fa01 f303 	lsl.w	r3, r1, r3
 8004b74:	4293      	cmp	r3, r2
 8004b76:	f040 849d 	bne.w	80054b4 <__ieee754_pow+0x9f4>
 8004b7a:	f001 0101 	and.w	r1, r1, #1
 8004b7e:	f1c1 0302 	rsb	r3, r1, #2
 8004b82:	9304      	str	r3, [sp, #16]
 8004b84:	b182      	cbz	r2, 8004ba8 <__ieee754_pow+0xe8>
 8004b86:	e05f      	b.n	8004c48 <__ieee754_pow+0x188>
 8004b88:	2a00      	cmp	r2, #0
 8004b8a:	d15b      	bne.n	8004c44 <__ieee754_pow+0x184>
 8004b8c:	f1c3 0314 	rsb	r3, r3, #20
 8004b90:	fa48 f103 	asr.w	r1, r8, r3
 8004b94:	fa01 f303 	lsl.w	r3, r1, r3
 8004b98:	4543      	cmp	r3, r8
 8004b9a:	f040 8488 	bne.w	80054ae <__ieee754_pow+0x9ee>
 8004b9e:	f001 0101 	and.w	r1, r1, #1
 8004ba2:	f1c1 0302 	rsb	r3, r1, #2
 8004ba6:	9304      	str	r3, [sp, #16]
 8004ba8:	4b5c      	ldr	r3, [pc, #368]	; (8004d1c <__ieee754_pow+0x25c>)
 8004baa:	4598      	cmp	r8, r3
 8004bac:	d132      	bne.n	8004c14 <__ieee754_pow+0x154>
 8004bae:	f1b9 0f00 	cmp.w	r9, #0
 8004bb2:	f280 8478 	bge.w	80054a6 <__ieee754_pow+0x9e6>
 8004bb6:	4959      	ldr	r1, [pc, #356]	; (8004d1c <__ieee754_pow+0x25c>)
 8004bb8:	4632      	mov	r2, r6
 8004bba:	463b      	mov	r3, r7
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	f7fb fde9 	bl	8000794 <__aeabi_ddiv>
 8004bc2:	e79c      	b.n	8004afe <__ieee754_pow+0x3e>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	9304      	str	r3, [sp, #16]
 8004bc8:	2a00      	cmp	r2, #0
 8004bca:	d13d      	bne.n	8004c48 <__ieee754_pow+0x188>
 8004bcc:	4b51      	ldr	r3, [pc, #324]	; (8004d14 <__ieee754_pow+0x254>)
 8004bce:	4598      	cmp	r8, r3
 8004bd0:	d1ea      	bne.n	8004ba8 <__ieee754_pow+0xe8>
 8004bd2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004bd6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004bda:	ea53 030a 	orrs.w	r3, r3, sl
 8004bde:	f000 845a 	beq.w	8005496 <__ieee754_pow+0x9d6>
 8004be2:	4b4f      	ldr	r3, [pc, #316]	; (8004d20 <__ieee754_pow+0x260>)
 8004be4:	429c      	cmp	r4, r3
 8004be6:	dd08      	ble.n	8004bfa <__ieee754_pow+0x13a>
 8004be8:	f1b9 0f00 	cmp.w	r9, #0
 8004bec:	f2c0 8457 	blt.w	800549e <__ieee754_pow+0x9de>
 8004bf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bf4:	e783      	b.n	8004afe <__ieee754_pow+0x3e>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e7e5      	b.n	8004bc6 <__ieee754_pow+0x106>
 8004bfa:	f1b9 0f00 	cmp.w	r9, #0
 8004bfe:	f04f 0000 	mov.w	r0, #0
 8004c02:	f04f 0100 	mov.w	r1, #0
 8004c06:	f6bf af7a 	bge.w	8004afe <__ieee754_pow+0x3e>
 8004c0a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004c0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004c12:	e774      	b.n	8004afe <__ieee754_pow+0x3e>
 8004c14:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004c18:	d106      	bne.n	8004c28 <__ieee754_pow+0x168>
 8004c1a:	4632      	mov	r2, r6
 8004c1c:	463b      	mov	r3, r7
 8004c1e:	4630      	mov	r0, r6
 8004c20:	4639      	mov	r1, r7
 8004c22:	f7fb fc8d 	bl	8000540 <__aeabi_dmul>
 8004c26:	e76a      	b.n	8004afe <__ieee754_pow+0x3e>
 8004c28:	4b3e      	ldr	r3, [pc, #248]	; (8004d24 <__ieee754_pow+0x264>)
 8004c2a:	4599      	cmp	r9, r3
 8004c2c:	d10c      	bne.n	8004c48 <__ieee754_pow+0x188>
 8004c2e:	2d00      	cmp	r5, #0
 8004c30:	db0a      	blt.n	8004c48 <__ieee754_pow+0x188>
 8004c32:	ec47 6b10 	vmov	d0, r6, r7
 8004c36:	b009      	add	sp, #36	; 0x24
 8004c38:	ecbd 8b06 	vpop	{d8-d10}
 8004c3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c40:	f000 bc6c 	b.w	800551c <__ieee754_sqrt>
 8004c44:	2300      	movs	r3, #0
 8004c46:	9304      	str	r3, [sp, #16]
 8004c48:	ec47 6b10 	vmov	d0, r6, r7
 8004c4c:	f000 fd48 	bl	80056e0 <fabs>
 8004c50:	ec51 0b10 	vmov	r0, r1, d0
 8004c54:	f1ba 0f00 	cmp.w	sl, #0
 8004c58:	d129      	bne.n	8004cae <__ieee754_pow+0x1ee>
 8004c5a:	b124      	cbz	r4, 8004c66 <__ieee754_pow+0x1a6>
 8004c5c:	4b2f      	ldr	r3, [pc, #188]	; (8004d1c <__ieee754_pow+0x25c>)
 8004c5e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d123      	bne.n	8004cae <__ieee754_pow+0x1ee>
 8004c66:	f1b9 0f00 	cmp.w	r9, #0
 8004c6a:	da05      	bge.n	8004c78 <__ieee754_pow+0x1b8>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	2000      	movs	r0, #0
 8004c72:	492a      	ldr	r1, [pc, #168]	; (8004d1c <__ieee754_pow+0x25c>)
 8004c74:	f7fb fd8e 	bl	8000794 <__aeabi_ddiv>
 8004c78:	2d00      	cmp	r5, #0
 8004c7a:	f6bf af40 	bge.w	8004afe <__ieee754_pow+0x3e>
 8004c7e:	9b04      	ldr	r3, [sp, #16]
 8004c80:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004c84:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004c88:	4323      	orrs	r3, r4
 8004c8a:	d108      	bne.n	8004c9e <__ieee754_pow+0x1de>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4610      	mov	r0, r2
 8004c92:	4619      	mov	r1, r3
 8004c94:	f7fb fa9c 	bl	80001d0 <__aeabi_dsub>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	e78f      	b.n	8004bbe <__ieee754_pow+0xfe>
 8004c9e:	9b04      	ldr	r3, [sp, #16]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	f47f af2c 	bne.w	8004afe <__ieee754_pow+0x3e>
 8004ca6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004caa:	4619      	mov	r1, r3
 8004cac:	e727      	b.n	8004afe <__ieee754_pow+0x3e>
 8004cae:	0feb      	lsrs	r3, r5, #31
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	9306      	str	r3, [sp, #24]
 8004cb4:	9a06      	ldr	r2, [sp, #24]
 8004cb6:	9b04      	ldr	r3, [sp, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	d102      	bne.n	8004cc2 <__ieee754_pow+0x202>
 8004cbc:	4632      	mov	r2, r6
 8004cbe:	463b      	mov	r3, r7
 8004cc0:	e7e6      	b.n	8004c90 <__ieee754_pow+0x1d0>
 8004cc2:	4b19      	ldr	r3, [pc, #100]	; (8004d28 <__ieee754_pow+0x268>)
 8004cc4:	4598      	cmp	r8, r3
 8004cc6:	f340 80fb 	ble.w	8004ec0 <__ieee754_pow+0x400>
 8004cca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004cce:	4598      	cmp	r8, r3
 8004cd0:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <__ieee754_pow+0x260>)
 8004cd2:	dd0c      	ble.n	8004cee <__ieee754_pow+0x22e>
 8004cd4:	429c      	cmp	r4, r3
 8004cd6:	dc0f      	bgt.n	8004cf8 <__ieee754_pow+0x238>
 8004cd8:	f1b9 0f00 	cmp.w	r9, #0
 8004cdc:	da0f      	bge.n	8004cfe <__ieee754_pow+0x23e>
 8004cde:	2000      	movs	r0, #0
 8004ce0:	b009      	add	sp, #36	; 0x24
 8004ce2:	ecbd 8b06 	vpop	{d8-d10}
 8004ce6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cea:	f000 bcf0 	b.w	80056ce <__math_oflow>
 8004cee:	429c      	cmp	r4, r3
 8004cf0:	dbf2      	blt.n	8004cd8 <__ieee754_pow+0x218>
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <__ieee754_pow+0x25c>)
 8004cf4:	429c      	cmp	r4, r3
 8004cf6:	dd19      	ble.n	8004d2c <__ieee754_pow+0x26c>
 8004cf8:	f1b9 0f00 	cmp.w	r9, #0
 8004cfc:	dcef      	bgt.n	8004cde <__ieee754_pow+0x21e>
 8004cfe:	2000      	movs	r0, #0
 8004d00:	b009      	add	sp, #36	; 0x24
 8004d02:	ecbd 8b06 	vpop	{d8-d10}
 8004d06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d0a:	f000 bcd7 	b.w	80056bc <__math_uflow>
 8004d0e:	bf00      	nop
 8004d10:	fff00000 	.word	0xfff00000
 8004d14:	7ff00000 	.word	0x7ff00000
 8004d18:	433fffff 	.word	0x433fffff
 8004d1c:	3ff00000 	.word	0x3ff00000
 8004d20:	3fefffff 	.word	0x3fefffff
 8004d24:	3fe00000 	.word	0x3fe00000
 8004d28:	41e00000 	.word	0x41e00000
 8004d2c:	4b60      	ldr	r3, [pc, #384]	; (8004eb0 <__ieee754_pow+0x3f0>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f7fb fa4e 	bl	80001d0 <__aeabi_dsub>
 8004d34:	a354      	add	r3, pc, #336	; (adr r3, 8004e88 <__ieee754_pow+0x3c8>)
 8004d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	460d      	mov	r5, r1
 8004d3e:	f7fb fbff 	bl	8000540 <__aeabi_dmul>
 8004d42:	a353      	add	r3, pc, #332	; (adr r3, 8004e90 <__ieee754_pow+0x3d0>)
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	4606      	mov	r6, r0
 8004d4a:	460f      	mov	r7, r1
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	4629      	mov	r1, r5
 8004d50:	f7fb fbf6 	bl	8000540 <__aeabi_dmul>
 8004d54:	4b57      	ldr	r3, [pc, #348]	; (8004eb4 <__ieee754_pow+0x3f4>)
 8004d56:	4682      	mov	sl, r0
 8004d58:	468b      	mov	fp, r1
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	4629      	mov	r1, r5
 8004d60:	f7fb fbee 	bl	8000540 <__aeabi_dmul>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	a14b      	add	r1, pc, #300	; (adr r1, 8004e98 <__ieee754_pow+0x3d8>)
 8004d6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d6e:	f7fb fa2f 	bl	80001d0 <__aeabi_dsub>
 8004d72:	4622      	mov	r2, r4
 8004d74:	462b      	mov	r3, r5
 8004d76:	f7fb fbe3 	bl	8000540 <__aeabi_dmul>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	2000      	movs	r0, #0
 8004d80:	494d      	ldr	r1, [pc, #308]	; (8004eb8 <__ieee754_pow+0x3f8>)
 8004d82:	f7fb fa25 	bl	80001d0 <__aeabi_dsub>
 8004d86:	4622      	mov	r2, r4
 8004d88:	4680      	mov	r8, r0
 8004d8a:	4689      	mov	r9, r1
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	4620      	mov	r0, r4
 8004d90:	4629      	mov	r1, r5
 8004d92:	f7fb fbd5 	bl	8000540 <__aeabi_dmul>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4640      	mov	r0, r8
 8004d9c:	4649      	mov	r1, r9
 8004d9e:	f7fb fbcf 	bl	8000540 <__aeabi_dmul>
 8004da2:	a33f      	add	r3, pc, #252	; (adr r3, 8004ea0 <__ieee754_pow+0x3e0>)
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f7fb fbca 	bl	8000540 <__aeabi_dmul>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4650      	mov	r0, sl
 8004db2:	4659      	mov	r1, fp
 8004db4:	f7fb fa0c 	bl	80001d0 <__aeabi_dsub>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4680      	mov	r8, r0
 8004dbe:	4689      	mov	r9, r1
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	f7fb fa06 	bl	80001d4 <__adddf3>
 8004dc8:	2000      	movs	r0, #0
 8004dca:	4632      	mov	r2, r6
 8004dcc:	463b      	mov	r3, r7
 8004dce:	4604      	mov	r4, r0
 8004dd0:	460d      	mov	r5, r1
 8004dd2:	f7fb f9fd 	bl	80001d0 <__aeabi_dsub>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4640      	mov	r0, r8
 8004ddc:	4649      	mov	r1, r9
 8004dde:	f7fb f9f7 	bl	80001d0 <__aeabi_dsub>
 8004de2:	9b04      	ldr	r3, [sp, #16]
 8004de4:	9a06      	ldr	r2, [sp, #24]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	4313      	orrs	r3, r2
 8004dea:	4682      	mov	sl, r0
 8004dec:	468b      	mov	fp, r1
 8004dee:	f040 81e7 	bne.w	80051c0 <__ieee754_pow+0x700>
 8004df2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004ea8 <__ieee754_pow+0x3e8>
 8004df6:	eeb0 8a47 	vmov.f32	s16, s14
 8004dfa:	eef0 8a67 	vmov.f32	s17, s15
 8004dfe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004e02:	2600      	movs	r6, #0
 8004e04:	4632      	mov	r2, r6
 8004e06:	463b      	mov	r3, r7
 8004e08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e0c:	f7fb f9e0 	bl	80001d0 <__aeabi_dsub>
 8004e10:	4622      	mov	r2, r4
 8004e12:	462b      	mov	r3, r5
 8004e14:	f7fb fb94 	bl	8000540 <__aeabi_dmul>
 8004e18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e1c:	4680      	mov	r8, r0
 8004e1e:	4689      	mov	r9, r1
 8004e20:	4650      	mov	r0, sl
 8004e22:	4659      	mov	r1, fp
 8004e24:	f7fb fb8c 	bl	8000540 <__aeabi_dmul>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4640      	mov	r0, r8
 8004e2e:	4649      	mov	r1, r9
 8004e30:	f7fb f9d0 	bl	80001d4 <__adddf3>
 8004e34:	4632      	mov	r2, r6
 8004e36:	463b      	mov	r3, r7
 8004e38:	4680      	mov	r8, r0
 8004e3a:	4689      	mov	r9, r1
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	4629      	mov	r1, r5
 8004e40:	f7fb fb7e 	bl	8000540 <__aeabi_dmul>
 8004e44:	460b      	mov	r3, r1
 8004e46:	4604      	mov	r4, r0
 8004e48:	460d      	mov	r5, r1
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	4649      	mov	r1, r9
 8004e4e:	4640      	mov	r0, r8
 8004e50:	f7fb f9c0 	bl	80001d4 <__adddf3>
 8004e54:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <__ieee754_pow+0x3fc>)
 8004e56:	4299      	cmp	r1, r3
 8004e58:	ec45 4b19 	vmov	d9, r4, r5
 8004e5c:	4606      	mov	r6, r0
 8004e5e:	460f      	mov	r7, r1
 8004e60:	468b      	mov	fp, r1
 8004e62:	f340 82f1 	ble.w	8005448 <__ieee754_pow+0x988>
 8004e66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004e6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004e6e:	4303      	orrs	r3, r0
 8004e70:	f000 81e4 	beq.w	800523c <__ieee754_pow+0x77c>
 8004e74:	ec51 0b18 	vmov	r0, r1, d8
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f7fb fdd2 	bl	8000a24 <__aeabi_dcmplt>
 8004e80:	3800      	subs	r0, #0
 8004e82:	bf18      	it	ne
 8004e84:	2001      	movne	r0, #1
 8004e86:	e72b      	b.n	8004ce0 <__ieee754_pow+0x220>
 8004e88:	60000000 	.word	0x60000000
 8004e8c:	3ff71547 	.word	0x3ff71547
 8004e90:	f85ddf44 	.word	0xf85ddf44
 8004e94:	3e54ae0b 	.word	0x3e54ae0b
 8004e98:	55555555 	.word	0x55555555
 8004e9c:	3fd55555 	.word	0x3fd55555
 8004ea0:	652b82fe 	.word	0x652b82fe
 8004ea4:	3ff71547 	.word	0x3ff71547
 8004ea8:	00000000 	.word	0x00000000
 8004eac:	bff00000 	.word	0xbff00000
 8004eb0:	3ff00000 	.word	0x3ff00000
 8004eb4:	3fd00000 	.word	0x3fd00000
 8004eb8:	3fe00000 	.word	0x3fe00000
 8004ebc:	408fffff 	.word	0x408fffff
 8004ec0:	4bd5      	ldr	r3, [pc, #852]	; (8005218 <__ieee754_pow+0x758>)
 8004ec2:	402b      	ands	r3, r5
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	b92b      	cbnz	r3, 8004ed4 <__ieee754_pow+0x414>
 8004ec8:	4bd4      	ldr	r3, [pc, #848]	; (800521c <__ieee754_pow+0x75c>)
 8004eca:	f7fb fb39 	bl	8000540 <__aeabi_dmul>
 8004ece:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	1523      	asrs	r3, r4, #20
 8004ed6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004eda:	4413      	add	r3, r2
 8004edc:	9305      	str	r3, [sp, #20]
 8004ede:	4bd0      	ldr	r3, [pc, #832]	; (8005220 <__ieee754_pow+0x760>)
 8004ee0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004ee4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004ee8:	429c      	cmp	r4, r3
 8004eea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004eee:	dd08      	ble.n	8004f02 <__ieee754_pow+0x442>
 8004ef0:	4bcc      	ldr	r3, [pc, #816]	; (8005224 <__ieee754_pow+0x764>)
 8004ef2:	429c      	cmp	r4, r3
 8004ef4:	f340 8162 	ble.w	80051bc <__ieee754_pow+0x6fc>
 8004ef8:	9b05      	ldr	r3, [sp, #20]
 8004efa:	3301      	adds	r3, #1
 8004efc:	9305      	str	r3, [sp, #20]
 8004efe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004f02:	2400      	movs	r4, #0
 8004f04:	00e3      	lsls	r3, r4, #3
 8004f06:	9307      	str	r3, [sp, #28]
 8004f08:	4bc7      	ldr	r3, [pc, #796]	; (8005228 <__ieee754_pow+0x768>)
 8004f0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f0e:	ed93 7b00 	vldr	d7, [r3]
 8004f12:	4629      	mov	r1, r5
 8004f14:	ec53 2b17 	vmov	r2, r3, d7
 8004f18:	eeb0 9a47 	vmov.f32	s18, s14
 8004f1c:	eef0 9a67 	vmov.f32	s19, s15
 8004f20:	4682      	mov	sl, r0
 8004f22:	f7fb f955 	bl	80001d0 <__aeabi_dsub>
 8004f26:	4652      	mov	r2, sl
 8004f28:	4606      	mov	r6, r0
 8004f2a:	460f      	mov	r7, r1
 8004f2c:	462b      	mov	r3, r5
 8004f2e:	ec51 0b19 	vmov	r0, r1, d9
 8004f32:	f7fb f94f 	bl	80001d4 <__adddf3>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	49bb      	ldr	r1, [pc, #748]	; (800522c <__ieee754_pow+0x76c>)
 8004f3e:	f7fb fc29 	bl	8000794 <__aeabi_ddiv>
 8004f42:	ec41 0b1a 	vmov	d10, r0, r1
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	4639      	mov	r1, r7
 8004f4e:	f7fb faf7 	bl	8000540 <__aeabi_dmul>
 8004f52:	2300      	movs	r3, #0
 8004f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f58:	9302      	str	r3, [sp, #8]
 8004f5a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004f5e:	46ab      	mov	fp, r5
 8004f60:	106d      	asrs	r5, r5, #1
 8004f62:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004f66:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004f6a:	ec41 0b18 	vmov	d8, r0, r1
 8004f6e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004f72:	2200      	movs	r2, #0
 8004f74:	4640      	mov	r0, r8
 8004f76:	4649      	mov	r1, r9
 8004f78:	4614      	mov	r4, r2
 8004f7a:	461d      	mov	r5, r3
 8004f7c:	f7fb fae0 	bl	8000540 <__aeabi_dmul>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4630      	mov	r0, r6
 8004f86:	4639      	mov	r1, r7
 8004f88:	f7fb f922 	bl	80001d0 <__aeabi_dsub>
 8004f8c:	ec53 2b19 	vmov	r2, r3, d9
 8004f90:	4606      	mov	r6, r0
 8004f92:	460f      	mov	r7, r1
 8004f94:	4620      	mov	r0, r4
 8004f96:	4629      	mov	r1, r5
 8004f98:	f7fb f91a 	bl	80001d0 <__aeabi_dsub>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4650      	mov	r0, sl
 8004fa2:	4659      	mov	r1, fp
 8004fa4:	f7fb f914 	bl	80001d0 <__aeabi_dsub>
 8004fa8:	4642      	mov	r2, r8
 8004faa:	464b      	mov	r3, r9
 8004fac:	f7fb fac8 	bl	8000540 <__aeabi_dmul>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	4639      	mov	r1, r7
 8004fb8:	f7fb f90a 	bl	80001d0 <__aeabi_dsub>
 8004fbc:	ec53 2b1a 	vmov	r2, r3, d10
 8004fc0:	f7fb fabe 	bl	8000540 <__aeabi_dmul>
 8004fc4:	ec53 2b18 	vmov	r2, r3, d8
 8004fc8:	ec41 0b19 	vmov	d9, r0, r1
 8004fcc:	ec51 0b18 	vmov	r0, r1, d8
 8004fd0:	f7fb fab6 	bl	8000540 <__aeabi_dmul>
 8004fd4:	a37c      	add	r3, pc, #496	; (adr r3, 80051c8 <__ieee754_pow+0x708>)
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	4604      	mov	r4, r0
 8004fdc:	460d      	mov	r5, r1
 8004fde:	f7fb faaf 	bl	8000540 <__aeabi_dmul>
 8004fe2:	a37b      	add	r3, pc, #492	; (adr r3, 80051d0 <__ieee754_pow+0x710>)
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f7fb f8f4 	bl	80001d4 <__adddf3>
 8004fec:	4622      	mov	r2, r4
 8004fee:	462b      	mov	r3, r5
 8004ff0:	f7fb faa6 	bl	8000540 <__aeabi_dmul>
 8004ff4:	a378      	add	r3, pc, #480	; (adr r3, 80051d8 <__ieee754_pow+0x718>)
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	f7fb f8eb 	bl	80001d4 <__adddf3>
 8004ffe:	4622      	mov	r2, r4
 8005000:	462b      	mov	r3, r5
 8005002:	f7fb fa9d 	bl	8000540 <__aeabi_dmul>
 8005006:	a376      	add	r3, pc, #472	; (adr r3, 80051e0 <__ieee754_pow+0x720>)
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	f7fb f8e2 	bl	80001d4 <__adddf3>
 8005010:	4622      	mov	r2, r4
 8005012:	462b      	mov	r3, r5
 8005014:	f7fb fa94 	bl	8000540 <__aeabi_dmul>
 8005018:	a373      	add	r3, pc, #460	; (adr r3, 80051e8 <__ieee754_pow+0x728>)
 800501a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501e:	f7fb f8d9 	bl	80001d4 <__adddf3>
 8005022:	4622      	mov	r2, r4
 8005024:	462b      	mov	r3, r5
 8005026:	f7fb fa8b 	bl	8000540 <__aeabi_dmul>
 800502a:	a371      	add	r3, pc, #452	; (adr r3, 80051f0 <__ieee754_pow+0x730>)
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	f7fb f8d0 	bl	80001d4 <__adddf3>
 8005034:	4622      	mov	r2, r4
 8005036:	4606      	mov	r6, r0
 8005038:	460f      	mov	r7, r1
 800503a:	462b      	mov	r3, r5
 800503c:	4620      	mov	r0, r4
 800503e:	4629      	mov	r1, r5
 8005040:	f7fb fa7e 	bl	8000540 <__aeabi_dmul>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4630      	mov	r0, r6
 800504a:	4639      	mov	r1, r7
 800504c:	f7fb fa78 	bl	8000540 <__aeabi_dmul>
 8005050:	4642      	mov	r2, r8
 8005052:	4604      	mov	r4, r0
 8005054:	460d      	mov	r5, r1
 8005056:	464b      	mov	r3, r9
 8005058:	ec51 0b18 	vmov	r0, r1, d8
 800505c:	f7fb f8ba 	bl	80001d4 <__adddf3>
 8005060:	ec53 2b19 	vmov	r2, r3, d9
 8005064:	f7fb fa6c 	bl	8000540 <__aeabi_dmul>
 8005068:	4622      	mov	r2, r4
 800506a:	462b      	mov	r3, r5
 800506c:	f7fb f8b2 	bl	80001d4 <__adddf3>
 8005070:	4642      	mov	r2, r8
 8005072:	4682      	mov	sl, r0
 8005074:	468b      	mov	fp, r1
 8005076:	464b      	mov	r3, r9
 8005078:	4640      	mov	r0, r8
 800507a:	4649      	mov	r1, r9
 800507c:	f7fb fa60 	bl	8000540 <__aeabi_dmul>
 8005080:	4b6b      	ldr	r3, [pc, #428]	; (8005230 <__ieee754_pow+0x770>)
 8005082:	2200      	movs	r2, #0
 8005084:	4606      	mov	r6, r0
 8005086:	460f      	mov	r7, r1
 8005088:	f7fb f8a4 	bl	80001d4 <__adddf3>
 800508c:	4652      	mov	r2, sl
 800508e:	465b      	mov	r3, fp
 8005090:	f7fb f8a0 	bl	80001d4 <__adddf3>
 8005094:	2000      	movs	r0, #0
 8005096:	4604      	mov	r4, r0
 8005098:	460d      	mov	r5, r1
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4640      	mov	r0, r8
 80050a0:	4649      	mov	r1, r9
 80050a2:	f7fb fa4d 	bl	8000540 <__aeabi_dmul>
 80050a6:	4b62      	ldr	r3, [pc, #392]	; (8005230 <__ieee754_pow+0x770>)
 80050a8:	4680      	mov	r8, r0
 80050aa:	4689      	mov	r9, r1
 80050ac:	2200      	movs	r2, #0
 80050ae:	4620      	mov	r0, r4
 80050b0:	4629      	mov	r1, r5
 80050b2:	f7fb f88d 	bl	80001d0 <__aeabi_dsub>
 80050b6:	4632      	mov	r2, r6
 80050b8:	463b      	mov	r3, r7
 80050ba:	f7fb f889 	bl	80001d0 <__aeabi_dsub>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	4650      	mov	r0, sl
 80050c4:	4659      	mov	r1, fp
 80050c6:	f7fb f883 	bl	80001d0 <__aeabi_dsub>
 80050ca:	ec53 2b18 	vmov	r2, r3, d8
 80050ce:	f7fb fa37 	bl	8000540 <__aeabi_dmul>
 80050d2:	4622      	mov	r2, r4
 80050d4:	4606      	mov	r6, r0
 80050d6:	460f      	mov	r7, r1
 80050d8:	462b      	mov	r3, r5
 80050da:	ec51 0b19 	vmov	r0, r1, d9
 80050de:	f7fb fa2f 	bl	8000540 <__aeabi_dmul>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4630      	mov	r0, r6
 80050e8:	4639      	mov	r1, r7
 80050ea:	f7fb f873 	bl	80001d4 <__adddf3>
 80050ee:	4606      	mov	r6, r0
 80050f0:	460f      	mov	r7, r1
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4640      	mov	r0, r8
 80050f8:	4649      	mov	r1, r9
 80050fa:	f7fb f86b 	bl	80001d4 <__adddf3>
 80050fe:	a33e      	add	r3, pc, #248	; (adr r3, 80051f8 <__ieee754_pow+0x738>)
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	2000      	movs	r0, #0
 8005106:	4604      	mov	r4, r0
 8005108:	460d      	mov	r5, r1
 800510a:	f7fb fa19 	bl	8000540 <__aeabi_dmul>
 800510e:	4642      	mov	r2, r8
 8005110:	ec41 0b18 	vmov	d8, r0, r1
 8005114:	464b      	mov	r3, r9
 8005116:	4620      	mov	r0, r4
 8005118:	4629      	mov	r1, r5
 800511a:	f7fb f859 	bl	80001d0 <__aeabi_dsub>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4630      	mov	r0, r6
 8005124:	4639      	mov	r1, r7
 8005126:	f7fb f853 	bl	80001d0 <__aeabi_dsub>
 800512a:	a335      	add	r3, pc, #212	; (adr r3, 8005200 <__ieee754_pow+0x740>)
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	f7fb fa06 	bl	8000540 <__aeabi_dmul>
 8005134:	a334      	add	r3, pc, #208	; (adr r3, 8005208 <__ieee754_pow+0x748>)
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	4606      	mov	r6, r0
 800513c:	460f      	mov	r7, r1
 800513e:	4620      	mov	r0, r4
 8005140:	4629      	mov	r1, r5
 8005142:	f7fb f9fd 	bl	8000540 <__aeabi_dmul>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4630      	mov	r0, r6
 800514c:	4639      	mov	r1, r7
 800514e:	f7fb f841 	bl	80001d4 <__adddf3>
 8005152:	9a07      	ldr	r2, [sp, #28]
 8005154:	4b37      	ldr	r3, [pc, #220]	; (8005234 <__ieee754_pow+0x774>)
 8005156:	4413      	add	r3, r2
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f7fb f83a 	bl	80001d4 <__adddf3>
 8005160:	4682      	mov	sl, r0
 8005162:	9805      	ldr	r0, [sp, #20]
 8005164:	468b      	mov	fp, r1
 8005166:	f7fb f981 	bl	800046c <__aeabi_i2d>
 800516a:	9a07      	ldr	r2, [sp, #28]
 800516c:	4b32      	ldr	r3, [pc, #200]	; (8005238 <__ieee754_pow+0x778>)
 800516e:	4413      	add	r3, r2
 8005170:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005174:	4606      	mov	r6, r0
 8005176:	460f      	mov	r7, r1
 8005178:	4652      	mov	r2, sl
 800517a:	465b      	mov	r3, fp
 800517c:	ec51 0b18 	vmov	r0, r1, d8
 8005180:	f7fb f828 	bl	80001d4 <__adddf3>
 8005184:	4642      	mov	r2, r8
 8005186:	464b      	mov	r3, r9
 8005188:	f7fb f824 	bl	80001d4 <__adddf3>
 800518c:	4632      	mov	r2, r6
 800518e:	463b      	mov	r3, r7
 8005190:	f7fb f820 	bl	80001d4 <__adddf3>
 8005194:	2000      	movs	r0, #0
 8005196:	4632      	mov	r2, r6
 8005198:	463b      	mov	r3, r7
 800519a:	4604      	mov	r4, r0
 800519c:	460d      	mov	r5, r1
 800519e:	f7fb f817 	bl	80001d0 <__aeabi_dsub>
 80051a2:	4642      	mov	r2, r8
 80051a4:	464b      	mov	r3, r9
 80051a6:	f7fb f813 	bl	80001d0 <__aeabi_dsub>
 80051aa:	ec53 2b18 	vmov	r2, r3, d8
 80051ae:	f7fb f80f 	bl	80001d0 <__aeabi_dsub>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4650      	mov	r0, sl
 80051b8:	4659      	mov	r1, fp
 80051ba:	e610      	b.n	8004dde <__ieee754_pow+0x31e>
 80051bc:	2401      	movs	r4, #1
 80051be:	e6a1      	b.n	8004f04 <__ieee754_pow+0x444>
 80051c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005210 <__ieee754_pow+0x750>
 80051c4:	e617      	b.n	8004df6 <__ieee754_pow+0x336>
 80051c6:	bf00      	nop
 80051c8:	4a454eef 	.word	0x4a454eef
 80051cc:	3fca7e28 	.word	0x3fca7e28
 80051d0:	93c9db65 	.word	0x93c9db65
 80051d4:	3fcd864a 	.word	0x3fcd864a
 80051d8:	a91d4101 	.word	0xa91d4101
 80051dc:	3fd17460 	.word	0x3fd17460
 80051e0:	518f264d 	.word	0x518f264d
 80051e4:	3fd55555 	.word	0x3fd55555
 80051e8:	db6fabff 	.word	0xdb6fabff
 80051ec:	3fdb6db6 	.word	0x3fdb6db6
 80051f0:	33333303 	.word	0x33333303
 80051f4:	3fe33333 	.word	0x3fe33333
 80051f8:	e0000000 	.word	0xe0000000
 80051fc:	3feec709 	.word	0x3feec709
 8005200:	dc3a03fd 	.word	0xdc3a03fd
 8005204:	3feec709 	.word	0x3feec709
 8005208:	145b01f5 	.word	0x145b01f5
 800520c:	be3e2fe0 	.word	0xbe3e2fe0
 8005210:	00000000 	.word	0x00000000
 8005214:	3ff00000 	.word	0x3ff00000
 8005218:	7ff00000 	.word	0x7ff00000
 800521c:	43400000 	.word	0x43400000
 8005220:	0003988e 	.word	0x0003988e
 8005224:	000bb679 	.word	0x000bb679
 8005228:	08005850 	.word	0x08005850
 800522c:	3ff00000 	.word	0x3ff00000
 8005230:	40080000 	.word	0x40080000
 8005234:	08005870 	.word	0x08005870
 8005238:	08005860 	.word	0x08005860
 800523c:	a3b5      	add	r3, pc, #724	; (adr r3, 8005514 <__ieee754_pow+0xa54>)
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	4640      	mov	r0, r8
 8005244:	4649      	mov	r1, r9
 8005246:	f7fa ffc5 	bl	80001d4 <__adddf3>
 800524a:	4622      	mov	r2, r4
 800524c:	ec41 0b1a 	vmov	d10, r0, r1
 8005250:	462b      	mov	r3, r5
 8005252:	4630      	mov	r0, r6
 8005254:	4639      	mov	r1, r7
 8005256:	f7fa ffbb 	bl	80001d0 <__aeabi_dsub>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	ec51 0b1a 	vmov	r0, r1, d10
 8005262:	f7fb fbfd 	bl	8000a60 <__aeabi_dcmpgt>
 8005266:	2800      	cmp	r0, #0
 8005268:	f47f ae04 	bne.w	8004e74 <__ieee754_pow+0x3b4>
 800526c:	4aa4      	ldr	r2, [pc, #656]	; (8005500 <__ieee754_pow+0xa40>)
 800526e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005272:	4293      	cmp	r3, r2
 8005274:	f340 8108 	ble.w	8005488 <__ieee754_pow+0x9c8>
 8005278:	151b      	asrs	r3, r3, #20
 800527a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800527e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005282:	fa4a f303 	asr.w	r3, sl, r3
 8005286:	445b      	add	r3, fp
 8005288:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800528c:	4e9d      	ldr	r6, [pc, #628]	; (8005504 <__ieee754_pow+0xa44>)
 800528e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005292:	4116      	asrs	r6, r2
 8005294:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005298:	2000      	movs	r0, #0
 800529a:	ea23 0106 	bic.w	r1, r3, r6
 800529e:	f1c2 0214 	rsb	r2, r2, #20
 80052a2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80052a6:	fa4a fa02 	asr.w	sl, sl, r2
 80052aa:	f1bb 0f00 	cmp.w	fp, #0
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4620      	mov	r0, r4
 80052b4:	4629      	mov	r1, r5
 80052b6:	bfb8      	it	lt
 80052b8:	f1ca 0a00 	rsblt	sl, sl, #0
 80052bc:	f7fa ff88 	bl	80001d0 <__aeabi_dsub>
 80052c0:	ec41 0b19 	vmov	d9, r0, r1
 80052c4:	4642      	mov	r2, r8
 80052c6:	464b      	mov	r3, r9
 80052c8:	ec51 0b19 	vmov	r0, r1, d9
 80052cc:	f7fa ff82 	bl	80001d4 <__adddf3>
 80052d0:	a37b      	add	r3, pc, #492	; (adr r3, 80054c0 <__ieee754_pow+0xa00>)
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	2000      	movs	r0, #0
 80052d8:	4604      	mov	r4, r0
 80052da:	460d      	mov	r5, r1
 80052dc:	f7fb f930 	bl	8000540 <__aeabi_dmul>
 80052e0:	ec53 2b19 	vmov	r2, r3, d9
 80052e4:	4606      	mov	r6, r0
 80052e6:	460f      	mov	r7, r1
 80052e8:	4620      	mov	r0, r4
 80052ea:	4629      	mov	r1, r5
 80052ec:	f7fa ff70 	bl	80001d0 <__aeabi_dsub>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4640      	mov	r0, r8
 80052f6:	4649      	mov	r1, r9
 80052f8:	f7fa ff6a 	bl	80001d0 <__aeabi_dsub>
 80052fc:	a372      	add	r3, pc, #456	; (adr r3, 80054c8 <__ieee754_pow+0xa08>)
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	f7fb f91d 	bl	8000540 <__aeabi_dmul>
 8005306:	a372      	add	r3, pc, #456	; (adr r3, 80054d0 <__ieee754_pow+0xa10>)
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	4680      	mov	r8, r0
 800530e:	4689      	mov	r9, r1
 8005310:	4620      	mov	r0, r4
 8005312:	4629      	mov	r1, r5
 8005314:	f7fb f914 	bl	8000540 <__aeabi_dmul>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4640      	mov	r0, r8
 800531e:	4649      	mov	r1, r9
 8005320:	f7fa ff58 	bl	80001d4 <__adddf3>
 8005324:	4604      	mov	r4, r0
 8005326:	460d      	mov	r5, r1
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4630      	mov	r0, r6
 800532e:	4639      	mov	r1, r7
 8005330:	f7fa ff50 	bl	80001d4 <__adddf3>
 8005334:	4632      	mov	r2, r6
 8005336:	463b      	mov	r3, r7
 8005338:	4680      	mov	r8, r0
 800533a:	4689      	mov	r9, r1
 800533c:	f7fa ff48 	bl	80001d0 <__aeabi_dsub>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4620      	mov	r0, r4
 8005346:	4629      	mov	r1, r5
 8005348:	f7fa ff42 	bl	80001d0 <__aeabi_dsub>
 800534c:	4642      	mov	r2, r8
 800534e:	4606      	mov	r6, r0
 8005350:	460f      	mov	r7, r1
 8005352:	464b      	mov	r3, r9
 8005354:	4640      	mov	r0, r8
 8005356:	4649      	mov	r1, r9
 8005358:	f7fb f8f2 	bl	8000540 <__aeabi_dmul>
 800535c:	a35e      	add	r3, pc, #376	; (adr r3, 80054d8 <__ieee754_pow+0xa18>)
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	4604      	mov	r4, r0
 8005364:	460d      	mov	r5, r1
 8005366:	f7fb f8eb 	bl	8000540 <__aeabi_dmul>
 800536a:	a35d      	add	r3, pc, #372	; (adr r3, 80054e0 <__ieee754_pow+0xa20>)
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f7fa ff2e 	bl	80001d0 <__aeabi_dsub>
 8005374:	4622      	mov	r2, r4
 8005376:	462b      	mov	r3, r5
 8005378:	f7fb f8e2 	bl	8000540 <__aeabi_dmul>
 800537c:	a35a      	add	r3, pc, #360	; (adr r3, 80054e8 <__ieee754_pow+0xa28>)
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	f7fa ff27 	bl	80001d4 <__adddf3>
 8005386:	4622      	mov	r2, r4
 8005388:	462b      	mov	r3, r5
 800538a:	f7fb f8d9 	bl	8000540 <__aeabi_dmul>
 800538e:	a358      	add	r3, pc, #352	; (adr r3, 80054f0 <__ieee754_pow+0xa30>)
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f7fa ff1c 	bl	80001d0 <__aeabi_dsub>
 8005398:	4622      	mov	r2, r4
 800539a:	462b      	mov	r3, r5
 800539c:	f7fb f8d0 	bl	8000540 <__aeabi_dmul>
 80053a0:	a355      	add	r3, pc, #340	; (adr r3, 80054f8 <__ieee754_pow+0xa38>)
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f7fa ff15 	bl	80001d4 <__adddf3>
 80053aa:	4622      	mov	r2, r4
 80053ac:	462b      	mov	r3, r5
 80053ae:	f7fb f8c7 	bl	8000540 <__aeabi_dmul>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4640      	mov	r0, r8
 80053b8:	4649      	mov	r1, r9
 80053ba:	f7fa ff09 	bl	80001d0 <__aeabi_dsub>
 80053be:	4604      	mov	r4, r0
 80053c0:	460d      	mov	r5, r1
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4640      	mov	r0, r8
 80053c8:	4649      	mov	r1, r9
 80053ca:	f7fb f8b9 	bl	8000540 <__aeabi_dmul>
 80053ce:	2200      	movs	r2, #0
 80053d0:	ec41 0b19 	vmov	d9, r0, r1
 80053d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053d8:	4620      	mov	r0, r4
 80053da:	4629      	mov	r1, r5
 80053dc:	f7fa fef8 	bl	80001d0 <__aeabi_dsub>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	ec51 0b19 	vmov	r0, r1, d9
 80053e8:	f7fb f9d4 	bl	8000794 <__aeabi_ddiv>
 80053ec:	4632      	mov	r2, r6
 80053ee:	4604      	mov	r4, r0
 80053f0:	460d      	mov	r5, r1
 80053f2:	463b      	mov	r3, r7
 80053f4:	4640      	mov	r0, r8
 80053f6:	4649      	mov	r1, r9
 80053f8:	f7fb f8a2 	bl	8000540 <__aeabi_dmul>
 80053fc:	4632      	mov	r2, r6
 80053fe:	463b      	mov	r3, r7
 8005400:	f7fa fee8 	bl	80001d4 <__adddf3>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	4620      	mov	r0, r4
 800540a:	4629      	mov	r1, r5
 800540c:	f7fa fee0 	bl	80001d0 <__aeabi_dsub>
 8005410:	4642      	mov	r2, r8
 8005412:	464b      	mov	r3, r9
 8005414:	f7fa fedc 	bl	80001d0 <__aeabi_dsub>
 8005418:	460b      	mov	r3, r1
 800541a:	4602      	mov	r2, r0
 800541c:	493a      	ldr	r1, [pc, #232]	; (8005508 <__ieee754_pow+0xa48>)
 800541e:	2000      	movs	r0, #0
 8005420:	f7fa fed6 	bl	80001d0 <__aeabi_dsub>
 8005424:	ec41 0b10 	vmov	d0, r0, r1
 8005428:	ee10 3a90 	vmov	r3, s1
 800542c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005434:	da2b      	bge.n	800548e <__ieee754_pow+0x9ce>
 8005436:	4650      	mov	r0, sl
 8005438:	f000 f966 	bl	8005708 <scalbn>
 800543c:	ec51 0b10 	vmov	r0, r1, d0
 8005440:	ec53 2b18 	vmov	r2, r3, d8
 8005444:	f7ff bbed 	b.w	8004c22 <__ieee754_pow+0x162>
 8005448:	4b30      	ldr	r3, [pc, #192]	; (800550c <__ieee754_pow+0xa4c>)
 800544a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800544e:	429e      	cmp	r6, r3
 8005450:	f77f af0c 	ble.w	800526c <__ieee754_pow+0x7ac>
 8005454:	4b2e      	ldr	r3, [pc, #184]	; (8005510 <__ieee754_pow+0xa50>)
 8005456:	440b      	add	r3, r1
 8005458:	4303      	orrs	r3, r0
 800545a:	d009      	beq.n	8005470 <__ieee754_pow+0x9b0>
 800545c:	ec51 0b18 	vmov	r0, r1, d8
 8005460:	2200      	movs	r2, #0
 8005462:	2300      	movs	r3, #0
 8005464:	f7fb fade 	bl	8000a24 <__aeabi_dcmplt>
 8005468:	3800      	subs	r0, #0
 800546a:	bf18      	it	ne
 800546c:	2001      	movne	r0, #1
 800546e:	e447      	b.n	8004d00 <__ieee754_pow+0x240>
 8005470:	4622      	mov	r2, r4
 8005472:	462b      	mov	r3, r5
 8005474:	f7fa feac 	bl	80001d0 <__aeabi_dsub>
 8005478:	4642      	mov	r2, r8
 800547a:	464b      	mov	r3, r9
 800547c:	f7fb fae6 	bl	8000a4c <__aeabi_dcmpge>
 8005480:	2800      	cmp	r0, #0
 8005482:	f43f aef3 	beq.w	800526c <__ieee754_pow+0x7ac>
 8005486:	e7e9      	b.n	800545c <__ieee754_pow+0x99c>
 8005488:	f04f 0a00 	mov.w	sl, #0
 800548c:	e71a      	b.n	80052c4 <__ieee754_pow+0x804>
 800548e:	ec51 0b10 	vmov	r0, r1, d0
 8005492:	4619      	mov	r1, r3
 8005494:	e7d4      	b.n	8005440 <__ieee754_pow+0x980>
 8005496:	491c      	ldr	r1, [pc, #112]	; (8005508 <__ieee754_pow+0xa48>)
 8005498:	2000      	movs	r0, #0
 800549a:	f7ff bb30 	b.w	8004afe <__ieee754_pow+0x3e>
 800549e:	2000      	movs	r0, #0
 80054a0:	2100      	movs	r1, #0
 80054a2:	f7ff bb2c 	b.w	8004afe <__ieee754_pow+0x3e>
 80054a6:	4630      	mov	r0, r6
 80054a8:	4639      	mov	r1, r7
 80054aa:	f7ff bb28 	b.w	8004afe <__ieee754_pow+0x3e>
 80054ae:	9204      	str	r2, [sp, #16]
 80054b0:	f7ff bb7a 	b.w	8004ba8 <__ieee754_pow+0xe8>
 80054b4:	2300      	movs	r3, #0
 80054b6:	f7ff bb64 	b.w	8004b82 <__ieee754_pow+0xc2>
 80054ba:	bf00      	nop
 80054bc:	f3af 8000 	nop.w
 80054c0:	00000000 	.word	0x00000000
 80054c4:	3fe62e43 	.word	0x3fe62e43
 80054c8:	fefa39ef 	.word	0xfefa39ef
 80054cc:	3fe62e42 	.word	0x3fe62e42
 80054d0:	0ca86c39 	.word	0x0ca86c39
 80054d4:	be205c61 	.word	0xbe205c61
 80054d8:	72bea4d0 	.word	0x72bea4d0
 80054dc:	3e663769 	.word	0x3e663769
 80054e0:	c5d26bf1 	.word	0xc5d26bf1
 80054e4:	3ebbbd41 	.word	0x3ebbbd41
 80054e8:	af25de2c 	.word	0xaf25de2c
 80054ec:	3f11566a 	.word	0x3f11566a
 80054f0:	16bebd93 	.word	0x16bebd93
 80054f4:	3f66c16c 	.word	0x3f66c16c
 80054f8:	5555553e 	.word	0x5555553e
 80054fc:	3fc55555 	.word	0x3fc55555
 8005500:	3fe00000 	.word	0x3fe00000
 8005504:	000fffff 	.word	0x000fffff
 8005508:	3ff00000 	.word	0x3ff00000
 800550c:	4090cbff 	.word	0x4090cbff
 8005510:	3f6f3400 	.word	0x3f6f3400
 8005514:	652b82fe 	.word	0x652b82fe
 8005518:	3c971547 	.word	0x3c971547

0800551c <__ieee754_sqrt>:
 800551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005520:	ec55 4b10 	vmov	r4, r5, d0
 8005524:	4e55      	ldr	r6, [pc, #340]	; (800567c <__ieee754_sqrt+0x160>)
 8005526:	43ae      	bics	r6, r5
 8005528:	ee10 0a10 	vmov	r0, s0
 800552c:	ee10 3a10 	vmov	r3, s0
 8005530:	462a      	mov	r2, r5
 8005532:	4629      	mov	r1, r5
 8005534:	d110      	bne.n	8005558 <__ieee754_sqrt+0x3c>
 8005536:	ee10 2a10 	vmov	r2, s0
 800553a:	462b      	mov	r3, r5
 800553c:	f7fb f800 	bl	8000540 <__aeabi_dmul>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4620      	mov	r0, r4
 8005546:	4629      	mov	r1, r5
 8005548:	f7fa fe44 	bl	80001d4 <__adddf3>
 800554c:	4604      	mov	r4, r0
 800554e:	460d      	mov	r5, r1
 8005550:	ec45 4b10 	vmov	d0, r4, r5
 8005554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005558:	2d00      	cmp	r5, #0
 800555a:	dc10      	bgt.n	800557e <__ieee754_sqrt+0x62>
 800555c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005560:	4330      	orrs	r0, r6
 8005562:	d0f5      	beq.n	8005550 <__ieee754_sqrt+0x34>
 8005564:	b15d      	cbz	r5, 800557e <__ieee754_sqrt+0x62>
 8005566:	ee10 2a10 	vmov	r2, s0
 800556a:	462b      	mov	r3, r5
 800556c:	ee10 0a10 	vmov	r0, s0
 8005570:	f7fa fe2e 	bl	80001d0 <__aeabi_dsub>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	f7fb f90c 	bl	8000794 <__aeabi_ddiv>
 800557c:	e7e6      	b.n	800554c <__ieee754_sqrt+0x30>
 800557e:	1512      	asrs	r2, r2, #20
 8005580:	d074      	beq.n	800566c <__ieee754_sqrt+0x150>
 8005582:	07d4      	lsls	r4, r2, #31
 8005584:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005588:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800558c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005590:	bf5e      	ittt	pl
 8005592:	0fda      	lsrpl	r2, r3, #31
 8005594:	005b      	lslpl	r3, r3, #1
 8005596:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800559a:	2400      	movs	r4, #0
 800559c:	0fda      	lsrs	r2, r3, #31
 800559e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80055a2:	107f      	asrs	r7, r7, #1
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	2516      	movs	r5, #22
 80055a8:	4620      	mov	r0, r4
 80055aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80055ae:	1886      	adds	r6, r0, r2
 80055b0:	428e      	cmp	r6, r1
 80055b2:	bfde      	ittt	le
 80055b4:	1b89      	suble	r1, r1, r6
 80055b6:	18b0      	addle	r0, r6, r2
 80055b8:	18a4      	addle	r4, r4, r2
 80055ba:	0049      	lsls	r1, r1, #1
 80055bc:	3d01      	subs	r5, #1
 80055be:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80055c2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80055c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80055ca:	d1f0      	bne.n	80055ae <__ieee754_sqrt+0x92>
 80055cc:	462a      	mov	r2, r5
 80055ce:	f04f 0e20 	mov.w	lr, #32
 80055d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80055d6:	4281      	cmp	r1, r0
 80055d8:	eb06 0c05 	add.w	ip, r6, r5
 80055dc:	dc02      	bgt.n	80055e4 <__ieee754_sqrt+0xc8>
 80055de:	d113      	bne.n	8005608 <__ieee754_sqrt+0xec>
 80055e0:	459c      	cmp	ip, r3
 80055e2:	d811      	bhi.n	8005608 <__ieee754_sqrt+0xec>
 80055e4:	f1bc 0f00 	cmp.w	ip, #0
 80055e8:	eb0c 0506 	add.w	r5, ip, r6
 80055ec:	da43      	bge.n	8005676 <__ieee754_sqrt+0x15a>
 80055ee:	2d00      	cmp	r5, #0
 80055f0:	db41      	blt.n	8005676 <__ieee754_sqrt+0x15a>
 80055f2:	f100 0801 	add.w	r8, r0, #1
 80055f6:	1a09      	subs	r1, r1, r0
 80055f8:	459c      	cmp	ip, r3
 80055fa:	bf88      	it	hi
 80055fc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005600:	eba3 030c 	sub.w	r3, r3, ip
 8005604:	4432      	add	r2, r6
 8005606:	4640      	mov	r0, r8
 8005608:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800560c:	f1be 0e01 	subs.w	lr, lr, #1
 8005610:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005614:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005618:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800561c:	d1db      	bne.n	80055d6 <__ieee754_sqrt+0xba>
 800561e:	430b      	orrs	r3, r1
 8005620:	d006      	beq.n	8005630 <__ieee754_sqrt+0x114>
 8005622:	1c50      	adds	r0, r2, #1
 8005624:	bf13      	iteet	ne
 8005626:	3201      	addne	r2, #1
 8005628:	3401      	addeq	r4, #1
 800562a:	4672      	moveq	r2, lr
 800562c:	f022 0201 	bicne.w	r2, r2, #1
 8005630:	1063      	asrs	r3, r4, #1
 8005632:	0852      	lsrs	r2, r2, #1
 8005634:	07e1      	lsls	r1, r4, #31
 8005636:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800563a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800563e:	bf48      	it	mi
 8005640:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005644:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005648:	4614      	mov	r4, r2
 800564a:	e781      	b.n	8005550 <__ieee754_sqrt+0x34>
 800564c:	0ad9      	lsrs	r1, r3, #11
 800564e:	3815      	subs	r0, #21
 8005650:	055b      	lsls	r3, r3, #21
 8005652:	2900      	cmp	r1, #0
 8005654:	d0fa      	beq.n	800564c <__ieee754_sqrt+0x130>
 8005656:	02cd      	lsls	r5, r1, #11
 8005658:	d50a      	bpl.n	8005670 <__ieee754_sqrt+0x154>
 800565a:	f1c2 0420 	rsb	r4, r2, #32
 800565e:	fa23 f404 	lsr.w	r4, r3, r4
 8005662:	1e55      	subs	r5, r2, #1
 8005664:	4093      	lsls	r3, r2
 8005666:	4321      	orrs	r1, r4
 8005668:	1b42      	subs	r2, r0, r5
 800566a:	e78a      	b.n	8005582 <__ieee754_sqrt+0x66>
 800566c:	4610      	mov	r0, r2
 800566e:	e7f0      	b.n	8005652 <__ieee754_sqrt+0x136>
 8005670:	0049      	lsls	r1, r1, #1
 8005672:	3201      	adds	r2, #1
 8005674:	e7ef      	b.n	8005656 <__ieee754_sqrt+0x13a>
 8005676:	4680      	mov	r8, r0
 8005678:	e7bd      	b.n	80055f6 <__ieee754_sqrt+0xda>
 800567a:	bf00      	nop
 800567c:	7ff00000 	.word	0x7ff00000

08005680 <with_errno>:
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	4604      	mov	r4, r0
 8005684:	460d      	mov	r5, r1
 8005686:	4616      	mov	r6, r2
 8005688:	f7ff f978 	bl	800497c <__errno>
 800568c:	4629      	mov	r1, r5
 800568e:	6006      	str	r6, [r0, #0]
 8005690:	4620      	mov	r0, r4
 8005692:	bd70      	pop	{r4, r5, r6, pc}

08005694 <xflow>:
 8005694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005696:	4614      	mov	r4, r2
 8005698:	461d      	mov	r5, r3
 800569a:	b108      	cbz	r0, 80056a0 <xflow+0xc>
 800569c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80056a0:	e9cd 2300 	strd	r2, r3, [sp]
 80056a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056a8:	4620      	mov	r0, r4
 80056aa:	4629      	mov	r1, r5
 80056ac:	f7fa ff48 	bl	8000540 <__aeabi_dmul>
 80056b0:	2222      	movs	r2, #34	; 0x22
 80056b2:	b003      	add	sp, #12
 80056b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056b8:	f7ff bfe2 	b.w	8005680 <with_errno>

080056bc <__math_uflow>:
 80056bc:	b508      	push	{r3, lr}
 80056be:	2200      	movs	r2, #0
 80056c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80056c4:	f7ff ffe6 	bl	8005694 <xflow>
 80056c8:	ec41 0b10 	vmov	d0, r0, r1
 80056cc:	bd08      	pop	{r3, pc}

080056ce <__math_oflow>:
 80056ce:	b508      	push	{r3, lr}
 80056d0:	2200      	movs	r2, #0
 80056d2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80056d6:	f7ff ffdd 	bl	8005694 <xflow>
 80056da:	ec41 0b10 	vmov	d0, r0, r1
 80056de:	bd08      	pop	{r3, pc}

080056e0 <fabs>:
 80056e0:	ec51 0b10 	vmov	r0, r1, d0
 80056e4:	ee10 2a10 	vmov	r2, s0
 80056e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80056ec:	ec43 2b10 	vmov	d0, r2, r3
 80056f0:	4770      	bx	lr

080056f2 <finite>:
 80056f2:	b082      	sub	sp, #8
 80056f4:	ed8d 0b00 	vstr	d0, [sp]
 80056f8:	9801      	ldr	r0, [sp, #4]
 80056fa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80056fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005702:	0fc0      	lsrs	r0, r0, #31
 8005704:	b002      	add	sp, #8
 8005706:	4770      	bx	lr

08005708 <scalbn>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	ec55 4b10 	vmov	r4, r5, d0
 800570e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005712:	4606      	mov	r6, r0
 8005714:	462b      	mov	r3, r5
 8005716:	b99a      	cbnz	r2, 8005740 <scalbn+0x38>
 8005718:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800571c:	4323      	orrs	r3, r4
 800571e:	d036      	beq.n	800578e <scalbn+0x86>
 8005720:	4b39      	ldr	r3, [pc, #228]	; (8005808 <scalbn+0x100>)
 8005722:	4629      	mov	r1, r5
 8005724:	ee10 0a10 	vmov	r0, s0
 8005728:	2200      	movs	r2, #0
 800572a:	f7fa ff09 	bl	8000540 <__aeabi_dmul>
 800572e:	4b37      	ldr	r3, [pc, #220]	; (800580c <scalbn+0x104>)
 8005730:	429e      	cmp	r6, r3
 8005732:	4604      	mov	r4, r0
 8005734:	460d      	mov	r5, r1
 8005736:	da10      	bge.n	800575a <scalbn+0x52>
 8005738:	a32b      	add	r3, pc, #172	; (adr r3, 80057e8 <scalbn+0xe0>)
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	e03a      	b.n	80057b6 <scalbn+0xae>
 8005740:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005744:	428a      	cmp	r2, r1
 8005746:	d10c      	bne.n	8005762 <scalbn+0x5a>
 8005748:	ee10 2a10 	vmov	r2, s0
 800574c:	4620      	mov	r0, r4
 800574e:	4629      	mov	r1, r5
 8005750:	f7fa fd40 	bl	80001d4 <__adddf3>
 8005754:	4604      	mov	r4, r0
 8005756:	460d      	mov	r5, r1
 8005758:	e019      	b.n	800578e <scalbn+0x86>
 800575a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800575e:	460b      	mov	r3, r1
 8005760:	3a36      	subs	r2, #54	; 0x36
 8005762:	4432      	add	r2, r6
 8005764:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005768:	428a      	cmp	r2, r1
 800576a:	dd08      	ble.n	800577e <scalbn+0x76>
 800576c:	2d00      	cmp	r5, #0
 800576e:	a120      	add	r1, pc, #128	; (adr r1, 80057f0 <scalbn+0xe8>)
 8005770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005774:	da1c      	bge.n	80057b0 <scalbn+0xa8>
 8005776:	a120      	add	r1, pc, #128	; (adr r1, 80057f8 <scalbn+0xf0>)
 8005778:	e9d1 0100 	ldrd	r0, r1, [r1]
 800577c:	e018      	b.n	80057b0 <scalbn+0xa8>
 800577e:	2a00      	cmp	r2, #0
 8005780:	dd08      	ble.n	8005794 <scalbn+0x8c>
 8005782:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005786:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800578a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800578e:	ec45 4b10 	vmov	d0, r4, r5
 8005792:	bd70      	pop	{r4, r5, r6, pc}
 8005794:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005798:	da19      	bge.n	80057ce <scalbn+0xc6>
 800579a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800579e:	429e      	cmp	r6, r3
 80057a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80057a4:	dd0a      	ble.n	80057bc <scalbn+0xb4>
 80057a6:	a112      	add	r1, pc, #72	; (adr r1, 80057f0 <scalbn+0xe8>)
 80057a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e2      	bne.n	8005776 <scalbn+0x6e>
 80057b0:	a30f      	add	r3, pc, #60	; (adr r3, 80057f0 <scalbn+0xe8>)
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f7fa fec3 	bl	8000540 <__aeabi_dmul>
 80057ba:	e7cb      	b.n	8005754 <scalbn+0x4c>
 80057bc:	a10a      	add	r1, pc, #40	; (adr r1, 80057e8 <scalbn+0xe0>)
 80057be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0b8      	beq.n	8005738 <scalbn+0x30>
 80057c6:	a10e      	add	r1, pc, #56	; (adr r1, 8005800 <scalbn+0xf8>)
 80057c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057cc:	e7b4      	b.n	8005738 <scalbn+0x30>
 80057ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80057d2:	3236      	adds	r2, #54	; 0x36
 80057d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80057d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80057dc:	4620      	mov	r0, r4
 80057de:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <scalbn+0x108>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	e7e8      	b.n	80057b6 <scalbn+0xae>
 80057e4:	f3af 8000 	nop.w
 80057e8:	c2f8f359 	.word	0xc2f8f359
 80057ec:	01a56e1f 	.word	0x01a56e1f
 80057f0:	8800759c 	.word	0x8800759c
 80057f4:	7e37e43c 	.word	0x7e37e43c
 80057f8:	8800759c 	.word	0x8800759c
 80057fc:	fe37e43c 	.word	0xfe37e43c
 8005800:	c2f8f359 	.word	0xc2f8f359
 8005804:	81a56e1f 	.word	0x81a56e1f
 8005808:	43500000 	.word	0x43500000
 800580c:	ffff3cb0 	.word	0xffff3cb0
 8005810:	3c900000 	.word	0x3c900000

08005814 <_init>:
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005816:	bf00      	nop
 8005818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581a:	bc08      	pop	{r3}
 800581c:	469e      	mov	lr, r3
 800581e:	4770      	bx	lr

08005820 <_fini>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	bf00      	nop
 8005824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005826:	bc08      	pop	{r3}
 8005828:	469e      	mov	lr, r3
 800582a:	4770      	bx	lr
