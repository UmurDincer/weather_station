
weather_measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800a240  0800a240  0001a240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a770  0800a770  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a770  0800a770  0001a770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a778  0800a778  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a778  0800a778  0001a778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a77c  0800a77c  0001a77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000001ac  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000038c  2000038c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001000b  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f15  00000000  00000000  0003021b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  00032130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e80  00000000  00000000  00033060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227cd  00000000  00000000  00033ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000122af  00000000  00000000  000566ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf30e  00000000  00000000  0006895c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137c6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000598c  00000000  00000000  00137cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a224 	.word	0x0800a224

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a224 	.word	0x0800a224

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <bmp180_init>:
unsigned long b7 = 0;

long pressure;
float temperature;

void bmp180_init(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af04      	add	r7, sp, #16

	uint8_t regAddr = BMP180_REG_CALIB_START;
 8000ffe:	23aa      	movs	r3, #170	; 0xaa
 8001000:	75fb      	strb	r3, [r7, #23]
	uint8_t calibData[22] = {0};
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	821a      	strh	r2, [r3, #16]


	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR_WRITE, regAddr, 1, calibData, 22, HAL_MAX_DELAY);
 8001014:	7dfb      	ldrb	r3, [r7, #23]
 8001016:	b29a      	uxth	r2, r3
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2316      	movs	r3, #22
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	463b      	mov	r3, r7
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	21ee      	movs	r1, #238	; 0xee
 800102a:	4836      	ldr	r0, [pc, #216]	; (8001104 <bmp180_init+0x10c>)
 800102c:	f001 fdf6 	bl	8002c1c <HAL_I2C_Mem_Read>

	ac1 = ((calibData[0] << 8) | calibData[1]);
 8001030:	783b      	ldrb	r3, [r7, #0]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	787b      	ldrb	r3, [r7, #1]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21a      	sxth	r2, r3
 800103e:	4b32      	ldr	r3, [pc, #200]	; (8001108 <bmp180_init+0x110>)
 8001040:	801a      	strh	r2, [r3, #0]
	ac2 = ((calibData[2] << 8) | calibData[3]);
 8001042:	78bb      	ldrb	r3, [r7, #2]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21a      	sxth	r2, r3
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	b21b      	sxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b21a      	sxth	r2, r3
 8001050:	4b2e      	ldr	r3, [pc, #184]	; (800110c <bmp180_init+0x114>)
 8001052:	801a      	strh	r2, [r3, #0]
	ac3 = ((calibData[4] << 8) | calibData[5]);
 8001054:	793b      	ldrb	r3, [r7, #4]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b21a      	sxth	r2, r3
 800105a:	797b      	ldrb	r3, [r7, #5]
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b21a      	sxth	r2, r3
 8001062:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <bmp180_init+0x118>)
 8001064:	801a      	strh	r2, [r3, #0]
	ac4 = ((calibData[6] << 8) | calibData[7]);
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b21a      	sxth	r2, r3
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21b      	sxth	r3, r3
 8001074:	b29a      	uxth	r2, r3
 8001076:	4b27      	ldr	r3, [pc, #156]	; (8001114 <bmp180_init+0x11c>)
 8001078:	801a      	strh	r2, [r3, #0]
	ac5 = ((calibData[8] << 8) | calibData[9]);
 800107a:	7a3b      	ldrb	r3, [r7, #8]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	7a7b      	ldrb	r3, [r7, #9]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b21b      	sxth	r3, r3
 8001088:	b29a      	uxth	r2, r3
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <bmp180_init+0x120>)
 800108c:	801a      	strh	r2, [r3, #0]
	ac6 = ((calibData[10] << 8) | calibData[11]);
 800108e:	7abb      	ldrb	r3, [r7, #10]
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	b21a      	sxth	r2, r3
 8001094:	7afb      	ldrb	r3, [r7, #11]
 8001096:	b21b      	sxth	r3, r3
 8001098:	4313      	orrs	r3, r2
 800109a:	b21b      	sxth	r3, r3
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <bmp180_init+0x124>)
 80010a0:	801a      	strh	r2, [r3, #0]
	b1  = ((calibData[12] << 8) | calibData[13]);
 80010a2:	7b3b      	ldrb	r3, [r7, #12]
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	7b7b      	ldrb	r3, [r7, #13]
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <bmp180_init+0x128>)
 80010b2:	801a      	strh	r2, [r3, #0]
	b2  = ((calibData[14] << 8) | calibData[15]);
 80010b4:	7bbb      	ldrb	r3, [r7, #14]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <bmp180_init+0x12c>)
 80010c4:	801a      	strh	r2, [r3, #0]
	mb  = ((calibData[16] << 8) | calibData[17]);
 80010c6:	7c3b      	ldrb	r3, [r7, #16]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	7c7b      	ldrb	r3, [r7, #17]
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <bmp180_init+0x130>)
 80010d6:	801a      	strh	r2, [r3, #0]
	mc  = ((calibData[18] << 8) | calibData[19]);
 80010d8:	7cbb      	ldrb	r3, [r7, #18]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	7cfb      	ldrb	r3, [r7, #19]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <bmp180_init+0x134>)
 80010e8:	801a      	strh	r2, [r3, #0]
	md  = ((calibData[20] << 8) | calibData[21]);
 80010ea:	7d3b      	ldrb	r3, [r7, #20]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	7d7b      	ldrb	r3, [r7, #21]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <bmp180_init+0x138>)
 80010fa:	801a      	strh	r2, [r3, #0]

}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000240 	.word	0x20000240
 8001108:	200001fc 	.word	0x200001fc
 800110c:	200001fe 	.word	0x200001fe
 8001110:	20000200 	.word	0x20000200
 8001114:	20000202 	.word	0x20000202
 8001118:	20000204 	.word	0x20000204
 800111c:	20000206 	.word	0x20000206
 8001120:	20000208 	.word	0x20000208
 8001124:	2000020a 	.word	0x2000020a
 8001128:	2000020c 	.word	0x2000020c
 800112c:	2000020e 	.word	0x2000020e
 8001130:	20000210 	.word	0x20000210

08001134 <uncompensated_temperature>:


uint16_t uncompensated_temperature(void){
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af04      	add	r7, sp, #16
	uint8_t data_to_write = 0x2E; //temperature's stored address in CR
 800113a:	232e      	movs	r3, #46	; 0x2e
 800113c:	71bb      	strb	r3, [r7, #6]
	uint8_t CR_addr = 0xF4; // control register address
 800113e:	23f4      	movs	r3, #244	; 0xf4
 8001140:	71fb      	strb	r3, [r7, #7]
	uint8_t raw_value[2] = {0};
 8001142:	2300      	movs	r3, #0
 8001144:	80bb      	strh	r3, [r7, #4]

	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDR_WRITE, CR_addr, 1, &data_to_write, 1, 1000);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	b29a      	uxth	r2, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	9302      	str	r3, [sp, #8]
 8001150:	2301      	movs	r3, #1
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	1dbb      	adds	r3, r7, #6
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	21ee      	movs	r1, #238	; 0xee
 800115c:	480f      	ldr	r0, [pc, #60]	; (800119c <uncompensated_temperature+0x68>)
 800115e:	f001 fc63 	bl	8002a28 <HAL_I2C_Mem_Write>
	HAL_Delay(5); // max conversion time for temperature 4.5 ms
 8001162:	2005      	movs	r0, #5
 8001164:	f001 f85c 	bl	8002220 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR_WRITE, 0xF6, I2C_MEMADD_SIZE_8BIT, raw_value, 2, 1000); //read reg 0xF6(msb) and 0xF7(lsb)
 8001168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	2302      	movs	r3, #2
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	22f6      	movs	r2, #246	; 0xf6
 800117a:	21ee      	movs	r1, #238	; 0xee
 800117c:	4807      	ldr	r0, [pc, #28]	; (800119c <uncompensated_temperature+0x68>)
 800117e:	f001 fd4d 	bl	8002c1c <HAL_I2C_Mem_Read>
	return ((raw_value[0] << 8) + raw_value[1]);
 8001182:	793b      	ldrb	r3, [r7, #4]
 8001184:	b29b      	uxth	r3, r3
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b29a      	uxth	r2, r3
 800118a:	797b      	ldrb	r3, [r7, #5]
 800118c:	b29b      	uxth	r3, r3
 800118e:	4413      	add	r3, r2
 8001190:	b29b      	uxth	r3, r3
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000240 	.word	0x20000240

080011a0 <bmp180_read_temperature>:
float bmp180_read_temperature(void) {
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	af00      	add	r7, sp, #0

	ut = uncompensated_temperature();
 80011a4:	f7ff ffc6 	bl	8001134 <uncompensated_temperature>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <bmp180_read_temperature+0xc8>)
 80011ae:	801a      	strh	r2, [r3, #0]

	x1 = (ut - ac6) * (ac5 / (pow(2, 15)));
 80011b0:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <bmp180_read_temperature+0xc8>)
 80011b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b2c      	ldr	r3, [pc, #176]	; (800126c <bmp180_read_temperature+0xcc>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f9b0 	bl	8000524 <__aeabi_i2d>
 80011c4:	4604      	mov	r4, r0
 80011c6:	460d      	mov	r5, r1
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <bmp180_read_temperature+0xd0>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9a9 	bl	8000524 <__aeabi_i2d>
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b27      	ldr	r3, [pc, #156]	; (8001274 <bmp180_read_temperature+0xd4>)
 80011d8:	f7ff fb38 	bl	800084c <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4620      	mov	r0, r4
 80011e2:	4629      	mov	r1, r5
 80011e4:	f7ff fa08 	bl	80005f8 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fcb2 	bl	8000b58 <__aeabi_d2iz>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a20      	ldr	r2, [pc, #128]	; (8001278 <bmp180_read_temperature+0xd8>)
 80011f8:	6013      	str	r3, [r2, #0]
	x2 = (mc * (1 << 11)) / (x1 + md);
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <bmp180_read_temperature+0xdc>)
 80011fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001200:	02da      	lsls	r2, r3, #11
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <bmp180_read_temperature+0xe0>)
 8001204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001208:	4619      	mov	r1, r3
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <bmp180_read_temperature+0xd8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	440b      	add	r3, r1
 8001210:	fb92 f3f3 	sdiv	r3, r2, r3
 8001214:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <bmp180_read_temperature+0xe4>)
 8001216:	6013      	str	r3, [r2, #0]
	b5 = x1 + x2;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <bmp180_read_temperature+0xd8>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b19      	ldr	r3, [pc, #100]	; (8001284 <bmp180_read_temperature+0xe4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4413      	add	r3, r2
 8001222:	4a19      	ldr	r2, [pc, #100]	; (8001288 <bmp180_read_temperature+0xe8>)
 8001224:	6013      	str	r3, [r2, #0]
	temperature = (b5 + 8) / (pow(2, 4));
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <bmp180_read_temperature+0xe8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3308      	adds	r3, #8
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f979 	bl	8000524 <__aeabi_i2d>
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <bmp180_read_temperature+0xec>)
 8001238:	f7ff fb08 	bl	800084c <__aeabi_ddiv>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff fcd0 	bl	8000be8 <__aeabi_d2f>
 8001248:	4603      	mov	r3, r0
 800124a:	4a11      	ldr	r2, [pc, #68]	; (8001290 <bmp180_read_temperature+0xf0>)
 800124c:	6013      	str	r3, [r2, #0]

	return (temperature / 10.0);
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <bmp180_read_temperature+0xf0>)
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001258:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800125c:	eef0 7a66 	vmov.f32	s15, s13

}
 8001260:	eeb0 0a67 	vmov.f32	s0, s15
 8001264:	bdb0      	pop	{r4, r5, r7, pc}
 8001266:	bf00      	nop
 8001268:	20000212 	.word	0x20000212
 800126c:	20000206 	.word	0x20000206
 8001270:	20000204 	.word	0x20000204
 8001274:	40e00000 	.word	0x40e00000
 8001278:	20000218 	.word	0x20000218
 800127c:	2000020e 	.word	0x2000020e
 8001280:	20000210 	.word	0x20000210
 8001284:	2000021c 	.word	0x2000021c
 8001288:	20000228 	.word	0x20000228
 800128c:	40300000 	.word	0x40300000
 8001290:	2000023c 	.word	0x2000023c

08001294 <uncompensated_pressure>:

uint32_t uncompensated_pressure(int oversampling){
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af04      	add	r7, sp, #16
 800129a:	6078      	str	r0, [r7, #4]
	uint8_t write_data = 0x34 + (oversampling << 6);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	019b      	lsls	r3, r3, #6
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	3334      	adds	r3, #52	; 0x34
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	73fb      	strb	r3, [r7, #15]
	uint8_t raw_data[3] = {0};
 80012aa:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <uncompensated_pressure+0xc4>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	81bb      	strh	r3, [r7, #12]
 80012b0:	2300      	movs	r3, #0
 80012b2:	73bb      	strb	r3, [r7, #14]


	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDR_WRITE, 0xF4, 1, &write_data, 1, 1000);
 80012b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	2301      	movs	r3, #1
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	f107 030f 	add.w	r3, r7, #15
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2301      	movs	r3, #1
 80012c6:	22f4      	movs	r2, #244	; 0xf4
 80012c8:	21ee      	movs	r1, #238	; 0xee
 80012ca:	4824      	ldr	r0, [pc, #144]	; (800135c <uncompensated_pressure+0xc8>)
 80012cc:	f001 fbac 	bl	8002a28 <HAL_I2C_Mem_Write>

	switch(oversampling)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d820      	bhi.n	8001318 <uncompensated_pressure+0x84>
 80012d6:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <uncompensated_pressure+0x48>)
 80012d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012dc:	080012f1 	.word	0x080012f1
 80012e0:	080012f9 	.word	0x080012f9
 80012e4:	08001301 	.word	0x08001301
 80012e8:	08001309 	.word	0x08001309
 80012ec:	08001311 	.word	0x08001311
	{
	case ultra_low_power:
		HAL_Delay(5);
 80012f0:	2005      	movs	r0, #5
 80012f2:	f000 ff95 	bl	8002220 <HAL_Delay>
		break;
 80012f6:	e010      	b.n	800131a <uncompensated_pressure+0x86>
	case standard:
		HAL_Delay(8);
 80012f8:	2008      	movs	r0, #8
 80012fa:	f000 ff91 	bl	8002220 <HAL_Delay>
		break;
 80012fe:	e00c      	b.n	800131a <uncompensated_pressure+0x86>
	case high_resolution:
		HAL_Delay(14);
 8001300:	200e      	movs	r0, #14
 8001302:	f000 ff8d 	bl	8002220 <HAL_Delay>
		break;
 8001306:	e008      	b.n	800131a <uncompensated_pressure+0x86>
	case ultra_high_resolution:
		HAL_Delay(26);
 8001308:	201a      	movs	r0, #26
 800130a:	f000 ff89 	bl	8002220 <HAL_Delay>
		break;
 800130e:	e004      	b.n	800131a <uncompensated_pressure+0x86>
	case advanced_resolution:
		HAL_Delay(77);
 8001310:	204d      	movs	r0, #77	; 0x4d
 8001312:	f000 ff85 	bl	8002220 <HAL_Delay>
		break;
 8001316:	e000      	b.n	800131a <uncompensated_pressure+0x86>
	default:
		break;
 8001318:	bf00      	nop
	}

	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR_WRITE, 0xF6, I2C_MEMADD_SIZE_8BIT, raw_data, 3, HAL_MAX_DELAY);
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	9302      	str	r3, [sp, #8]
 8001320:	2303      	movs	r3, #3
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2301      	movs	r3, #1
 800132c:	22f6      	movs	r2, #246	; 0xf6
 800132e:	21ee      	movs	r1, #238	; 0xee
 8001330:	480a      	ldr	r0, [pc, #40]	; (800135c <uncompensated_pressure+0xc8>)
 8001332:	f001 fc73 	bl	8002c1c <HAL_I2C_Mem_Read>

	return (((raw_data[0] << 16) + (raw_data[1] << 8) + raw_data[2]) >> (8 - oversampling));
 8001336:	7b3b      	ldrb	r3, [r7, #12]
 8001338:	041a      	lsls	r2, r3, #16
 800133a:	7b7b      	ldrb	r3, [r7, #13]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	4413      	add	r3, r2
 8001340:	7bba      	ldrb	r2, [r7, #14]
 8001342:	441a      	add	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f1c3 0308 	rsb	r3, r3, #8
 800134a:	fa42 f303 	asr.w	r3, r2, r3
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	0800a240 	.word	0x0800a240
 800135c:	20000240 	.word	0x20000240

08001360 <bmp180_read_pressure>:

float bmp180_read_pressure(uint8_t oss) {
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]


	up = uncompensated_pressure(oss);
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff91 	bl	8001294 <uncompensated_pressure>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4ba9      	ldr	r3, [pc, #676]	; (800161c <bmp180_read_pressure+0x2bc>)
 8001378:	601a      	str	r2, [r3, #0]
	x1 = ((ut - ac6) * (ac5 / (pow(2, 15))));
 800137a:	4ba9      	ldr	r3, [pc, #676]	; (8001620 <bmp180_read_pressure+0x2c0>)
 800137c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001380:	461a      	mov	r2, r3
 8001382:	4ba8      	ldr	r3, [pc, #672]	; (8001624 <bmp180_read_pressure+0x2c4>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8cb 	bl	8000524 <__aeabi_i2d>
 800138e:	4604      	mov	r4, r0
 8001390:	460d      	mov	r5, r1
 8001392:	4ba5      	ldr	r3, [pc, #660]	; (8001628 <bmp180_read_pressure+0x2c8>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8c4 	bl	8000524 <__aeabi_i2d>
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4ba2      	ldr	r3, [pc, #648]	; (800162c <bmp180_read_pressure+0x2cc>)
 80013a2:	f7ff fa53 	bl	800084c <__aeabi_ddiv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4620      	mov	r0, r4
 80013ac:	4629      	mov	r1, r5
 80013ae:	f7ff f923 	bl	80005f8 <__aeabi_dmul>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fbcd 	bl	8000b58 <__aeabi_d2iz>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a9b      	ldr	r2, [pc, #620]	; (8001630 <bmp180_read_pressure+0x2d0>)
 80013c2:	6013      	str	r3, [r2, #0]
	x2 = ((mc*(pow(2, 11))) / (x1 + md));
 80013c4:	4b9b      	ldr	r3, [pc, #620]	; (8001634 <bmp180_read_pressure+0x2d4>)
 80013c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f8aa 	bl	8000524 <__aeabi_i2d>
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	4b98      	ldr	r3, [pc, #608]	; (8001638 <bmp180_read_pressure+0x2d8>)
 80013d6:	f7ff f90f 	bl	80005f8 <__aeabi_dmul>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4614      	mov	r4, r2
 80013e0:	461d      	mov	r5, r3
 80013e2:	4b96      	ldr	r3, [pc, #600]	; (800163c <bmp180_read_pressure+0x2dc>)
 80013e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b91      	ldr	r3, [pc, #580]	; (8001630 <bmp180_read_pressure+0x2d0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f897 	bl	8000524 <__aeabi_i2d>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4620      	mov	r0, r4
 80013fc:	4629      	mov	r1, r5
 80013fe:	f7ff fa25 	bl	800084c <__aeabi_ddiv>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fba5 	bl	8000b58 <__aeabi_d2iz>
 800140e:	4603      	mov	r3, r0
 8001410:	4a8b      	ldr	r2, [pc, #556]	; (8001640 <bmp180_read_pressure+0x2e0>)
 8001412:	6013      	str	r3, [r2, #0]
	b5 = x1 + x2;
 8001414:	4b86      	ldr	r3, [pc, #536]	; (8001630 <bmp180_read_pressure+0x2d0>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b89      	ldr	r3, [pc, #548]	; (8001640 <bmp180_read_pressure+0x2e0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4413      	add	r3, r2
 800141e:	4a89      	ldr	r2, [pc, #548]	; (8001644 <bmp180_read_pressure+0x2e4>)
 8001420:	6013      	str	r3, [r2, #0]
	b6 = b5 - 4000L;
 8001422:	4b88      	ldr	r3, [pc, #544]	; (8001644 <bmp180_read_pressure+0x2e4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800142a:	4a87      	ldr	r2, [pc, #540]	; (8001648 <bmp180_read_pressure+0x2e8>)
 800142c:	6013      	str	r3, [r2, #0]
	x1 = (b2 * (b6 * b6 / (pow(2, 12)))) / (pow(2, 11));
 800142e:	4b87      	ldr	r3, [pc, #540]	; (800164c <bmp180_read_pressure+0x2ec>)
 8001430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f875 	bl	8000524 <__aeabi_i2d>
 800143a:	4604      	mov	r4, r0
 800143c:	460d      	mov	r5, r1
 800143e:	4b82      	ldr	r3, [pc, #520]	; (8001648 <bmp180_read_pressure+0x2e8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a81      	ldr	r2, [pc, #516]	; (8001648 <bmp180_read_pressure+0x2e8>)
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f86a 	bl	8000524 <__aeabi_i2d>
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	4b7e      	ldr	r3, [pc, #504]	; (8001650 <bmp180_read_pressure+0x2f0>)
 8001456:	f7ff f9f9 	bl	800084c <__aeabi_ddiv>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4620      	mov	r0, r4
 8001460:	4629      	mov	r1, r5
 8001462:	f7ff f8c9 	bl	80005f8 <__aeabi_dmul>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	4b71      	ldr	r3, [pc, #452]	; (8001638 <bmp180_read_pressure+0x2d8>)
 8001474:	f7ff f9ea 	bl	800084c <__aeabi_ddiv>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff fb6a 	bl	8000b58 <__aeabi_d2iz>
 8001484:	4603      	mov	r3, r0
 8001486:	4a6a      	ldr	r2, [pc, #424]	; (8001630 <bmp180_read_pressure+0x2d0>)
 8001488:	6013      	str	r3, [r2, #0]
	x2 = ac2 * b6 / (pow(2, 11));
 800148a:	4b72      	ldr	r3, [pc, #456]	; (8001654 <bmp180_read_pressure+0x2f4>)
 800148c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001490:	461a      	mov	r2, r3
 8001492:	4b6d      	ldr	r3, [pc, #436]	; (8001648 <bmp180_read_pressure+0x2e8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	fb02 f303 	mul.w	r3, r2, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f842 	bl	8000524 <__aeabi_i2d>
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b64      	ldr	r3, [pc, #400]	; (8001638 <bmp180_read_pressure+0x2d8>)
 80014a6:	f7ff f9d1 	bl	800084c <__aeabi_ddiv>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fb51 	bl	8000b58 <__aeabi_d2iz>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a61      	ldr	r2, [pc, #388]	; (8001640 <bmp180_read_pressure+0x2e0>)
 80014ba:	6013      	str	r3, [r2, #0]
	x3 = x1 + x2;
 80014bc:	4b5c      	ldr	r3, [pc, #368]	; (8001630 <bmp180_read_pressure+0x2d0>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b5f      	ldr	r3, [pc, #380]	; (8001640 <bmp180_read_pressure+0x2e0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a64      	ldr	r2, [pc, #400]	; (8001658 <bmp180_read_pressure+0x2f8>)
 80014c8:	6013      	str	r3, [r2, #0]
	b3 = ((((ac1 * 4 + x3) << oss) + 2) / 4);
 80014ca:	4b64      	ldr	r3, [pc, #400]	; (800165c <bmp180_read_pressure+0x2fc>)
 80014cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d0:	009a      	lsls	r2, r3, #2
 80014d2:	4b61      	ldr	r3, [pc, #388]	; (8001658 <bmp180_read_pressure+0x2f8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	441a      	add	r2, r3
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	3302      	adds	r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	da00      	bge.n	80014e6 <bmp180_read_pressure+0x186>
 80014e4:	3303      	adds	r3, #3
 80014e6:	109b      	asrs	r3, r3, #2
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b5d      	ldr	r3, [pc, #372]	; (8001660 <bmp180_read_pressure+0x300>)
 80014ec:	601a      	str	r2, [r3, #0]
	x1 = ac3 * b6 / (pow(2, 13));
 80014ee:	4b5d      	ldr	r3, [pc, #372]	; (8001664 <bmp180_read_pressure+0x304>)
 80014f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b54      	ldr	r3, [pc, #336]	; (8001648 <bmp180_read_pressure+0x2e8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f810 	bl	8000524 <__aeabi_i2d>
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b57      	ldr	r3, [pc, #348]	; (8001668 <bmp180_read_pressure+0x308>)
 800150a:	f7ff f99f 	bl	800084c <__aeabi_ddiv>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fb1f 	bl	8000b58 <__aeabi_d2iz>
 800151a:	4603      	mov	r3, r0
 800151c:	4a44      	ldr	r2, [pc, #272]	; (8001630 <bmp180_read_pressure+0x2d0>)
 800151e:	6013      	str	r3, [r2, #0]
	x2 = (b1 * (b6 * b6 /(pow(2, 12)))) / (pow(2, 16));
 8001520:	4b52      	ldr	r3, [pc, #328]	; (800166c <bmp180_read_pressure+0x30c>)
 8001522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe fffc 	bl	8000524 <__aeabi_i2d>
 800152c:	4604      	mov	r4, r0
 800152e:	460d      	mov	r5, r1
 8001530:	4b45      	ldr	r3, [pc, #276]	; (8001648 <bmp180_read_pressure+0x2e8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a44      	ldr	r2, [pc, #272]	; (8001648 <bmp180_read_pressure+0x2e8>)
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fff1 	bl	8000524 <__aeabi_i2d>
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b42      	ldr	r3, [pc, #264]	; (8001650 <bmp180_read_pressure+0x2f0>)
 8001548:	f7ff f980 	bl	800084c <__aeabi_ddiv>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4620      	mov	r0, r4
 8001552:	4629      	mov	r1, r5
 8001554:	f7ff f850 	bl	80005f8 <__aeabi_dmul>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b42      	ldr	r3, [pc, #264]	; (8001670 <bmp180_read_pressure+0x310>)
 8001566:	f7ff f971 	bl	800084c <__aeabi_ddiv>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff faf1 	bl	8000b58 <__aeabi_d2iz>
 8001576:	4603      	mov	r3, r0
 8001578:	4a31      	ldr	r2, [pc, #196]	; (8001640 <bmp180_read_pressure+0x2e0>)
 800157a:	6013      	str	r3, [r2, #0]
	x3 = ((x1 + x2) + 2) / (pow(2, 2));
 800157c:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <bmp180_read_pressure+0x2d0>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <bmp180_read_pressure+0x2e0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4413      	add	r3, r2
 8001586:	3302      	adds	r3, #2
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffcb 	bl	8000524 <__aeabi_i2d>
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	4b38      	ldr	r3, [pc, #224]	; (8001674 <bmp180_read_pressure+0x314>)
 8001594:	f7ff f95a 	bl	800084c <__aeabi_ddiv>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f7ff fada 	bl	8000b58 <__aeabi_d2iz>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4a2c      	ldr	r2, [pc, #176]	; (8001658 <bmp180_read_pressure+0x2f8>)
 80015a8:	6013      	str	r3, [r2, #0]
	b4 = ac4 * (unsigned long)(x3 + 32768) / (pow(2, 15));
 80015aa:	4b33      	ldr	r3, [pc, #204]	; (8001678 <bmp180_read_pressure+0x318>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b29      	ldr	r3, [pc, #164]	; (8001658 <bmp180_read_pressure+0x2f8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015b8:	fb02 f303 	mul.w	r3, r2, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffa1 	bl	8000504 <__aeabi_ui2d>
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <bmp180_read_pressure+0x2cc>)
 80015c8:	f7ff f940 	bl	800084c <__aeabi_ddiv>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	f7ff fae8 	bl	8000ba8 <__aeabi_d2uiz>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a28      	ldr	r2, [pc, #160]	; (800167c <bmp180_read_pressure+0x31c>)
 80015dc:	6013      	str	r3, [r2, #0]
	b7 = ((unsigned long)up - b3) * (50000 >> oss);
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <bmp180_read_pressure+0x2bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <bmp180_read_pressure+0x300>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	79fa      	ldrb	r2, [r7, #7]
 80015ec:	f24c 3150 	movw	r1, #50000	; 0xc350
 80015f0:	fa41 f202 	asr.w	r2, r1, r2
 80015f4:	fb02 f303 	mul.w	r3, r2, r3
 80015f8:	4a21      	ldr	r2, [pc, #132]	; (8001680 <bmp180_read_pressure+0x320>)
 80015fa:	6013      	str	r3, [r2, #0]
	if(b7 < 0x80000000) pressure = (b7 * 2) / b4; //pressure = (b7 << 1) / b4;
 80015fc:	4b20      	ldr	r3, [pc, #128]	; (8001680 <bmp180_read_pressure+0x320>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	db41      	blt.n	8001688 <bmp180_read_pressure+0x328>
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <bmp180_read_pressure+0x320>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	005a      	lsls	r2, r3, #1
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <bmp180_read_pressure+0x31c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	461a      	mov	r2, r3
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <bmp180_read_pressure+0x324>)
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e040      	b.n	800169c <bmp180_read_pressure+0x33c>
 800161a:	bf00      	nop
 800161c:	20000214 	.word	0x20000214
 8001620:	20000212 	.word	0x20000212
 8001624:	20000206 	.word	0x20000206
 8001628:	20000204 	.word	0x20000204
 800162c:	40e00000 	.word	0x40e00000
 8001630:	20000218 	.word	0x20000218
 8001634:	2000020e 	.word	0x2000020e
 8001638:	40a00000 	.word	0x40a00000
 800163c:	20000210 	.word	0x20000210
 8001640:	2000021c 	.word	0x2000021c
 8001644:	20000228 	.word	0x20000228
 8001648:	2000022c 	.word	0x2000022c
 800164c:	2000020a 	.word	0x2000020a
 8001650:	40b00000 	.word	0x40b00000
 8001654:	200001fe 	.word	0x200001fe
 8001658:	20000220 	.word	0x20000220
 800165c:	200001fc 	.word	0x200001fc
 8001660:	20000224 	.word	0x20000224
 8001664:	20000200 	.word	0x20000200
 8001668:	40c00000 	.word	0x40c00000
 800166c:	20000208 	.word	0x20000208
 8001670:	40f00000 	.word	0x40f00000
 8001674:	40100000 	.word	0x40100000
 8001678:	20000202 	.word	0x20000202
 800167c:	20000230 	.word	0x20000230
 8001680:	20000234 	.word	0x20000234
 8001684:	20000238 	.word	0x20000238
	else pressure = (b7 /b4) * 2;
 8001688:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <bmp180_read_pressure+0x440>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b45      	ldr	r3, [pc, #276]	; (80017a4 <bmp180_read_pressure+0x444>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	fbb2 f3f3 	udiv	r3, r2, r3
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	461a      	mov	r2, r3
 8001698:	4b43      	ldr	r3, [pc, #268]	; (80017a8 <bmp180_read_pressure+0x448>)
 800169a:	601a      	str	r2, [r3, #0]
	x1 = (pressure/(1 << 8)) * (pressure / (pow(2, 8)));
 800169c:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <bmp180_read_pressure+0x448>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da00      	bge.n	80016a6 <bmp180_read_pressure+0x346>
 80016a4:	33ff      	adds	r3, #255	; 0xff
 80016a6:	121b      	asrs	r3, r3, #8
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff3b 	bl	8000524 <__aeabi_i2d>
 80016ae:	4604      	mov	r4, r0
 80016b0:	460d      	mov	r5, r1
 80016b2:	4b3d      	ldr	r3, [pc, #244]	; (80017a8 <bmp180_read_pressure+0x448>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff34 	bl	8000524 <__aeabi_i2d>
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	4b3a      	ldr	r3, [pc, #232]	; (80017ac <bmp180_read_pressure+0x44c>)
 80016c2:	f7ff f8c3 	bl	800084c <__aeabi_ddiv>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe ff93 	bl	80005f8 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	f7ff fa3d 	bl	8000b58 <__aeabi_d2iz>
 80016de:	4603      	mov	r3, r0
 80016e0:	4a33      	ldr	r2, [pc, #204]	; (80017b0 <bmp180_read_pressure+0x450>)
 80016e2:	6013      	str	r3, [r2, #0]
	x1 = (x1 * 3038) / (pow(2, 16));
 80016e4:	4b32      	ldr	r3, [pc, #200]	; (80017b0 <bmp180_read_pressure+0x450>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f640 32de 	movw	r2, #3038	; 0xbde
 80016ec:	fb02 f303 	mul.w	r3, r2, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff17 	bl	8000524 <__aeabi_i2d>
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <bmp180_read_pressure+0x454>)
 80016fc:	f7ff f8a6 	bl	800084c <__aeabi_ddiv>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	f7ff fa26 	bl	8000b58 <__aeabi_d2iz>
 800170c:	4603      	mov	r3, r0
 800170e:	4a28      	ldr	r2, [pc, #160]	; (80017b0 <bmp180_read_pressure+0x450>)
 8001710:	6013      	str	r3, [r2, #0]
	x2 = (-7357 * pressure) / (pow(2, 16));
 8001712:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <bmp180_read_pressure+0x448>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a28      	ldr	r2, [pc, #160]	; (80017b8 <bmp180_read_pressure+0x458>)
 8001718:	fb02 f303 	mul.w	r3, r2, r3
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff01 	bl	8000524 <__aeabi_i2d>
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <bmp180_read_pressure+0x454>)
 8001728:	f7ff f890 	bl	800084c <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff fa10 	bl	8000b58 <__aeabi_d2iz>
 8001738:	4603      	mov	r3, r0
 800173a:	4a20      	ldr	r2, [pc, #128]	; (80017bc <bmp180_read_pressure+0x45c>)
 800173c:	6013      	str	r3, [r2, #0]
	pressure = pressure + (x1 + x2+ 3791) / (pow(2, 4));
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <bmp180_read_pressure+0x448>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe feee 	bl	8000524 <__aeabi_i2d>
 8001748:	4604      	mov	r4, r0
 800174a:	460d      	mov	r5, r1
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <bmp180_read_pressure+0x450>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <bmp180_read_pressure+0x45c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4413      	add	r3, r2
 8001756:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fee2 	bl	8000524 <__aeabi_i2d>
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <bmp180_read_pressure+0x460>)
 8001766:	f7ff f871 	bl	800084c <__aeabi_ddiv>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4620      	mov	r0, r4
 8001770:	4629      	mov	r1, r5
 8001772:	f7fe fd8b 	bl	800028c <__adddf3>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff f9eb 	bl	8000b58 <__aeabi_d2iz>
 8001782:	4603      	mov	r3, r0
 8001784:	4a08      	ldr	r2, [pc, #32]	; (80017a8 <bmp180_read_pressure+0x448>)
 8001786:	6013      	str	r3, [r2, #0]

	return (pressure);
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <bmp180_read_pressure+0x448>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eef8 7ae7 	vcvt.f32.s32	s15, s15

}
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bdb0      	pop	{r4, r5, r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000234 	.word	0x20000234
 80017a4:	20000230 	.word	0x20000230
 80017a8:	20000238 	.word	0x20000238
 80017ac:	40700000 	.word	0x40700000
 80017b0:	20000218 	.word	0x20000218
 80017b4:	40f00000 	.word	0x40f00000
 80017b8:	ffffe343 	.word	0xffffe343
 80017bc:	2000021c 	.word	0x2000021c
 80017c0:	40300000 	.word	0x40300000
 80017c4:	00000000 	.word	0x00000000

080017c8 <bmp180_read_altitude>:


float bmp180_read_altitude(int oss) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	long int _pressure = bmp180_read_pressure(oss);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fdc3 	bl	8001360 <bmp180_read_pressure>
 80017da:	eef0 7a40 	vmov.f32	s15, s0
 80017de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e2:	ee17 3a90 	vmov	r3, s15
 80017e6:	60fb      	str	r3, [r7, #12]
	return (44330 * (1 - (pow((_pressure / (float) ATM_PRESSURE), 0.1903))));
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	ee07 3a90 	vmov	s15, r3
 80017ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001860 <bmp180_read_altitude+0x98>
 80017f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017fa:	ee16 0a90 	vmov	r0, s13
 80017fe:	f7fe fea3 	bl	8000548 <__aeabi_f2d>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001850 <bmp180_read_altitude+0x88>
 800180a:	ec43 2b10 	vmov	d0, r2, r3
 800180e:	f007 fdef 	bl	80093f0 <pow>
 8001812:	ec53 2b10 	vmov	r2, r3, d0
 8001816:	f04f 0000 	mov.w	r0, #0
 800181a:	4912      	ldr	r1, [pc, #72]	; (8001864 <bmp180_read_altitude+0x9c>)
 800181c:	f7fe fd34 	bl	8000288 <__aeabi_dsub>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	a30b      	add	r3, pc, #44	; (adr r3, 8001858 <bmp180_read_altitude+0x90>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7fe fee3 	bl	80005f8 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f9d5 	bl	8000be8 <__aeabi_d2f>
 800183e:	4603      	mov	r3, r0
 8001840:	ee07 3a90 	vmov	s15, r3
}
 8001844:	eeb0 0a67 	vmov.f32	s0, s15
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	1a36e2eb 	.word	0x1a36e2eb
 8001854:	3fc85bc0 	.word	0x3fc85bc0
 8001858:	00000000 	.word	0x00000000
 800185c:	40e5a540 	.word	0x40e5a540
 8001860:	47c5e680 	.word	0x47c5e680
 8001864:	3ff00000 	.word	0x3ff00000

08001868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186c:	f000 fc66 	bl	800213c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001870:	f000 f840 	bl	80018f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001874:	f000 f96c 	bl	8001b50 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001878:	f000 f8a6 	bl	80019c8 <MX_I2C1_Init>
  MX_TIM6_Init();
 800187c:	f000 f8d2 	bl	8001a24 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001880:	f000 f906 	bl	8001a90 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8001884:	f000 f93a 	bl	8001afc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  bmp180_init();
 8001888:	f7ff fbb6 	bl	8000ff8 <bmp180_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  my_temperature = bmp180_read_temperature();
 800188c:	f7ff fc88 	bl	80011a0 <bmp180_read_temperature>
 8001890:	eef0 7a40 	vmov.f32	s15, s0
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <main+0x80>)
 8001896:	edc3 7a00 	vstr	s15, [r3]
	  my_pressure = bmp180_read_pressure(1);
 800189a:	2001      	movs	r0, #1
 800189c:	f7ff fd60 	bl	8001360 <bmp180_read_pressure>
 80018a0:	eef0 7a40 	vmov.f32	s15, s0
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <main+0x84>)
 80018a6:	edc3 7a00 	vstr	s15, [r3]
	  altitude = bmp180_read_altitude(1);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f7ff ff8c 	bl	80017c8 <bmp180_read_altitude>
 80018b0:	eef0 7a40 	vmov.f32	s15, s0
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <main+0x88>)
 80018b6:	edc3 7a00 	vstr	s15, [r3]

	  HAL_Delay(2000);
 80018ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018be:	f000 fcaf 	bl	8002220 <HAL_Delay>

	  tx_json_data(my_temperature, my_pressure, altitude);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <main+0x80>)
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <main+0x84>)
 80018ca:	ed93 7a00 	vldr	s14, [r3]
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <main+0x88>)
 80018d0:	edd3 6a00 	vldr	s13, [r3]
 80018d4:	eeb0 1a66 	vmov.f32	s2, s13
 80018d8:	eef0 0a47 	vmov.f32	s1, s14
 80018dc:	eeb0 0a67 	vmov.f32	s0, s15
 80018e0:	f000 f9c6 	bl	8001c70 <tx_json_data>
	  my_temperature = bmp180_read_temperature();
 80018e4:	e7d2      	b.n	800188c <main+0x24>
 80018e6:	bf00      	nop
 80018e8:	20000368 	.word	0x20000368
 80018ec:	2000036c 	.word	0x2000036c
 80018f0:	20000370 	.word	0x20000370

080018f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b094      	sub	sp, #80	; 0x50
 80018f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fa:	f107 0320 	add.w	r3, r7, #32
 80018fe:	2230      	movs	r2, #48	; 0x30
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f003 f8fc 	bl	8004b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <SystemClock_Config+0xcc>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	4a27      	ldr	r2, [pc, #156]	; (80019c0 <SystemClock_Config+0xcc>)
 8001922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001926:	6413      	str	r3, [r2, #64]	; 0x40
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <SystemClock_Config+0xcc>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <SystemClock_Config+0xd0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <SystemClock_Config+0xd0>)
 800193e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <SystemClock_Config+0xd0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001950:	2301      	movs	r3, #1
 8001952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195a:	2302      	movs	r3, #2
 800195c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800195e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001964:	2308      	movs	r3, #8
 8001966:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001968:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800196c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800196e:	2302      	movs	r3, #2
 8001970:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001972:	2307      	movs	r3, #7
 8001974:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001976:	f107 0320 	add.w	r3, r7, #32
 800197a:	4618      	mov	r0, r3
 800197c:	f001 fed0 	bl	8003720 <HAL_RCC_OscConfig>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001986:	f000 f9b7 	bl	8001cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800198a:	230f      	movs	r3, #15
 800198c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800198e:	2302      	movs	r3, #2
 8001990:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001996:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800199a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800199c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	2105      	movs	r1, #5
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 f931 	bl	8003c10 <HAL_RCC_ClockConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019b4:	f000 f9a0 	bl	8001cf8 <Error_Handler>
  }
}
 80019b8:	bf00      	nop
 80019ba:	3750      	adds	r7, #80	; 0x50
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40007000 	.word	0x40007000

080019c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019ce:	4a13      	ldr	r2, [pc, #76]	; (8001a1c <MX_I2C1_Init+0x54>)
 80019d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019d4:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <MX_I2C1_Init+0x58>)
 80019d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_I2C1_Init+0x50>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <MX_I2C1_Init+0x50>)
 8001a06:	f000 fecb 	bl	80027a0 <HAL_I2C_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a10:	f000 f972 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000240 	.word	0x20000240
 8001a1c:	40005400 	.word	0x40005400
 8001a20:	000186a0 	.word	0x000186a0

08001a24 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <MX_TIM6_Init+0x64>)
 8001a34:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <MX_TIM6_Init+0x68>)
 8001a36:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <MX_TIM6_Init+0x64>)
 8001a3a:	2253      	movs	r2, #83	; 0x53
 8001a3c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <MX_TIM6_Init+0x64>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <MX_TIM6_Init+0x64>)
 8001a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <MX_TIM6_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a52:	480d      	ldr	r0, [pc, #52]	; (8001a88 <MX_TIM6_Init+0x64>)
 8001a54:	f002 fafc 	bl	8004050 <HAL_TIM_Base_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001a5e:	f000 f94b 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4806      	ldr	r0, [pc, #24]	; (8001a88 <MX_TIM6_Init+0x64>)
 8001a70:	f002 fbde 	bl	8004230 <HAL_TIMEx_MasterConfigSynchronization>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001a7a:	f000 f93d 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000294 	.word	0x20000294
 8001a8c:	40001000 	.word	0x40001000

08001a90 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a96:	463b      	mov	r3, r7
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <MX_TIM7_Init+0x64>)
 8001aa0:	4a15      	ldr	r2, [pc, #84]	; (8001af8 <MX_TIM7_Init+0x68>)
 8001aa2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 65535;
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <MX_TIM7_Init+0x64>)
 8001aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aaa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <MX_TIM7_Init+0x64>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <MX_TIM7_Init+0x64>)
 8001ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <MX_TIM7_Init+0x64>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <MX_TIM7_Init+0x64>)
 8001ac2:	f002 fac5 	bl	8004050 <HAL_TIM_Base_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001acc:	f000 f914 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ad8:	463b      	mov	r3, r7
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <MX_TIM7_Init+0x64>)
 8001ade:	f002 fba7 	bl	8004230 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001ae8:	f000 f906 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200002dc 	.word	0x200002dc
 8001af8:	40001400 	.word	0x40001400

08001afc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <MX_USART2_UART_Init+0x50>)
 8001b04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b34:	f002 fbf8 	bl	8004328 <HAL_UART_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b3e:	f000 f8db 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000324 	.word	0x20000324
 8001b4c:	40004400 	.word	0x40004400

08001b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <MX_GPIO_Init+0x110>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a3c      	ldr	r2, [pc, #240]	; (8001c60 <MX_GPIO_Init+0x110>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <MX_GPIO_Init+0x110>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <MX_GPIO_Init+0x110>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a35      	ldr	r2, [pc, #212]	; (8001c60 <MX_GPIO_Init+0x110>)
 8001b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <MX_GPIO_Init+0x110>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <MX_GPIO_Init+0x110>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a2e      	ldr	r2, [pc, #184]	; (8001c60 <MX_GPIO_Init+0x110>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <MX_GPIO_Init+0x110>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <MX_GPIO_Init+0x110>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a27      	ldr	r2, [pc, #156]	; (8001c60 <MX_GPIO_Init+0x110>)
 8001bc4:	f043 0302 	orr.w	r3, r3, #2
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <MX_GPIO_Init+0x110>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <MX_GPIO_Init+0x110>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a20      	ldr	r2, [pc, #128]	; (8001c60 <MX_GPIO_Init+0x110>)
 8001be0:	f043 0310 	orr.w	r3, r3, #16
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <MX_GPIO_Init+0x110>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	481b      	ldr	r0, [pc, #108]	; (8001c64 <MX_GPIO_Init+0x114>)
 8001bf8:	f000 fdb8 	bl	800276c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dht11_GPIO_Port, dht11_Pin, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2101      	movs	r1, #1
 8001c00:	4819      	ldr	r0, [pc, #100]	; (8001c68 <MX_GPIO_Init+0x118>)
 8001c02:	f000 fdb3 	bl	800276c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : buzzer_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 8001c06:	2302      	movs	r3, #2
 8001c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4811      	ldr	r0, [pc, #68]	; (8001c64 <MX_GPIO_Init+0x114>)
 8001c1e:	f000 fc09 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pin : dht11_Pin */
  GPIO_InitStruct.Pin = dht11_Pin;
 8001c22:	2301      	movs	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c26:	2301      	movs	r3, #1
 8001c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(dht11_GPIO_Port, &GPIO_InitStruct);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	480b      	ldr	r0, [pc, #44]	; (8001c68 <MX_GPIO_Init+0x118>)
 8001c3a:	f000 fbfb 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_interrupt_Pin */
  GPIO_InitStruct.Pin = button_interrupt_Pin;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_interrupt_GPIO_Port, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	4806      	ldr	r0, [pc, #24]	; (8001c6c <MX_GPIO_Init+0x11c>)
 8001c54:	f000 fbee 	bl	8002434 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	; 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	40021000 	.word	0x40021000

08001c70 <tx_json_data>:
 * 		 3) add timer to send datas automatically
 * 		 4)
 * */

void tx_json_data(float temp, float press, float alt)
{
 8001c70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c74:	b0a2      	sub	sp, #136	; 0x88
 8001c76:	af04      	add	r7, sp, #16
 8001c78:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c7c:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c80:	ed87 1a01 	vstr	s2, [r7, #4]
	char json_buff[100] = "";
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	f107 0318 	add.w	r3, r7, #24
 8001c8c:	2260      	movs	r2, #96	; 0x60
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 ff35 	bl	8004b00 <memset>

	sprintf(json_buff,	"{ \"temp\" : \"%.2f\", \"press\": \"%.2f\", \"alt\" : \"%.2f\" }", temp, press, alt);
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7fe fc56 	bl	8000548 <__aeabi_f2d>
 8001c9c:	4680      	mov	r8, r0
 8001c9e:	4689      	mov	r9, r1
 8001ca0:	68b8      	ldr	r0, [r7, #8]
 8001ca2:	f7fe fc51 	bl	8000548 <__aeabi_f2d>
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	460d      	mov	r5, r1
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fc4c 	bl	8000548 <__aeabi_f2d>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	f107 0014 	add.w	r0, r7, #20
 8001cb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cbc:	e9cd 4500 	strd	r4, r5, [sp]
 8001cc0:	4642      	mov	r2, r8
 8001cc2:	464b      	mov	r3, r9
 8001cc4:	490a      	ldr	r1, [pc, #40]	; (8001cf0 <tx_json_data+0x80>)
 8001cc6:	f003 fda3 	bl	8005810 <siprintf>
    strcat(json_buff, "\0");

	HAL_UART_Transmit(&huart2, (uint8_t*)json_buff, strlen(json_buff), HAL_MAX_DELAY);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fa7e 	bl	80001d0 <strlen>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f107 0114 	add.w	r1, r7, #20
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce0:	4804      	ldr	r0, [pc, #16]	; (8001cf4 <tx_json_data+0x84>)
 8001ce2:	f002 fb6e 	bl	80043c2 <HAL_UART_Transmit>


}
 8001ce6:	bf00      	nop
 8001ce8:	3778      	adds	r7, #120	; 0x78
 8001cea:	46bd      	mov	sp, r7
 8001cec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cf0:	0800a244 	.word	0x0800a244
 8001cf4:	20000324 	.word	0x20000324

08001cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfc:	b672      	cpsid	i
}
 8001cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <Error_Handler+0x8>
	...

08001d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	4a0f      	ldr	r2, [pc, #60]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d18:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a08      	ldr	r2, [pc, #32]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d42:	2007      	movs	r0, #7
 8001d44:	f000 fb42 	bl	80023cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800

08001d54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a19      	ldr	r2, [pc, #100]	; (8001dd8 <HAL_I2C_MspInit+0x84>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d12b      	bne.n	8001dce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <HAL_I2C_MspInit+0x88>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <HAL_I2C_MspInit+0x88>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_I2C_MspInit+0x88>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = bmp180_SLC_Pin|bmp180_SDA_Pin;
 8001d92:	23c0      	movs	r3, #192	; 0xc0
 8001d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d96:	2312      	movs	r3, #18
 8001d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001da2:	2304      	movs	r3, #4
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	4619      	mov	r1, r3
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <HAL_I2C_MspInit+0x8c>)
 8001dae:	f000 fb41 	bl	8002434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_I2C_MspInit+0x88>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <HAL_I2C_MspInit+0x88>)
 8001dbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_I2C_MspInit+0x88>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dce:	bf00      	nop
 8001dd0:	3728      	adds	r7, #40	; 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40005400 	.word	0x40005400
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020400 	.word	0x40020400

08001de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <HAL_TIM_Base_MspInit+0x64>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d10e      	bne.n	8001e14 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_TIM_Base_MspInit+0x68>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a13      	ldr	r2, [pc, #76]	; (8001e4c <HAL_TIM_Base_MspInit+0x68>)
 8001e00:	f043 0310 	orr.w	r3, r3, #16
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_TIM_Base_MspInit+0x68>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001e12:	e012      	b.n	8001e3a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <HAL_TIM_Base_MspInit+0x6c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d10d      	bne.n	8001e3a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_TIM_Base_MspInit+0x68>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <HAL_TIM_Base_MspInit+0x68>)
 8001e28:	f043 0320 	orr.w	r3, r3, #32
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_TIM_Base_MspInit+0x68>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40001000 	.word	0x40001000
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40001400 	.word	0x40001400

08001e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <HAL_UART_MspInit+0x84>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d12b      	bne.n	8001ece <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a17      	ldr	r2, [pc, #92]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a10      	ldr	r2, [pc, #64]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eae:	230c      	movs	r3, #12
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <HAL_UART_MspInit+0x8c>)
 8001eca:	f000 fab3 	bl	8002434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	; 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40004400 	.word	0x40004400
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <NMI_Handler+0x4>

08001eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eee:	e7fe      	b.n	8001eee <HardFault_Handler+0x4>

08001ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <MemManage_Handler+0x4>

08001ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efa:	e7fe      	b.n	8001efa <BusFault_Handler+0x4>

08001efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <UsageFault_Handler+0x4>

08001f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f30:	f000 f956 	bl	80021e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return 1;
 8001f3c:	2301      	movs	r3, #1
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_kill>:

int _kill(int pid, int sig)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f52:	f002 fdab 	bl	8004aac <__errno>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2216      	movs	r2, #22
 8001f5a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <_exit>:

void _exit (int status)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ffe7 	bl	8001f48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f7a:	e7fe      	b.n	8001f7a <_exit+0x12>

08001f7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	e00a      	b.n	8001fa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f8e:	f3af 8000 	nop.w
 8001f92:	4601      	mov	r1, r0
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	60ba      	str	r2, [r7, #8]
 8001f9a:	b2ca      	uxtb	r2, r1
 8001f9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	dbf0      	blt.n	8001f8e <_read+0x12>
  }

  return len;
 8001fac:	687b      	ldr	r3, [r7, #4]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	e009      	b.n	8001fdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	60ba      	str	r2, [r7, #8]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	dbf1      	blt.n	8001fc8 <_write+0x12>
  }
  return len;
 8001fe4:	687b      	ldr	r3, [r7, #4]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <_close>:

int _close(int file)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002016:	605a      	str	r2, [r3, #4]
  return 0;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_isatty>:

int _isatty(int file)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800202e:	2301      	movs	r3, #1
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <_sbrk+0x5c>)
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <_sbrk+0x60>)
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <_sbrk+0x64>)
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <_sbrk+0x68>)
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	429a      	cmp	r2, r3
 8002086:	d207      	bcs.n	8002098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002088:	f002 fd10 	bl	8004aac <__errno>
 800208c:	4603      	mov	r3, r0
 800208e:	220c      	movs	r2, #12
 8002090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	e009      	b.n	80020ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <_sbrk+0x64>)
 80020a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20020000 	.word	0x20020000
 80020b8:	00000400 	.word	0x00000400
 80020bc:	20000374 	.word	0x20000374
 80020c0:	20000390 	.word	0x20000390

080020c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <SystemInit+0x20>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ce:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <SystemInit+0x20>)
 80020d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002120 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020ec:	480d      	ldr	r0, [pc, #52]	; (8002124 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ee:	490e      	ldr	r1, [pc, #56]	; (8002128 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020f0:	4a0e      	ldr	r2, [pc, #56]	; (800212c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f4:	e002      	b.n	80020fc <LoopCopyDataInit>

080020f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fa:	3304      	adds	r3, #4

080020fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002100:	d3f9      	bcc.n	80020f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002102:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002104:	4c0b      	ldr	r4, [pc, #44]	; (8002134 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002108:	e001      	b.n	800210e <LoopFillZerobss>

0800210a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800210c:	3204      	adds	r2, #4

0800210e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002110:	d3fb      	bcc.n	800210a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002112:	f7ff ffd7 	bl	80020c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002116:	f002 fccf 	bl	8004ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800211a:	f7ff fba5 	bl	8001868 <main>
  bx  lr    
 800211e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002120:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002128:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800212c:	0800a780 	.word	0x0800a780
  ldr r2, =_sbss
 8002130:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002134:	2000038c 	.word	0x2000038c

08002138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002138:	e7fe      	b.n	8002138 <ADC_IRQHandler>
	...

0800213c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002140:	4b0e      	ldr	r3, [pc, #56]	; (800217c <HAL_Init+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0d      	ldr	r2, [pc, #52]	; (800217c <HAL_Init+0x40>)
 8002146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800214a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_Init+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0a      	ldr	r2, [pc, #40]	; (800217c <HAL_Init+0x40>)
 8002152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002156:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a07      	ldr	r2, [pc, #28]	; (800217c <HAL_Init+0x40>)
 800215e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002162:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002164:	2003      	movs	r0, #3
 8002166:	f000 f931 	bl	80023cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216a:	2000      	movs	r0, #0
 800216c:	f000 f808 	bl	8002180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002170:	f7ff fdc8 	bl	8001d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023c00 	.word	0x40023c00

08002180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_InitTick+0x54>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_InitTick+0x58>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002196:	fbb3 f3f1 	udiv	r3, r3, r1
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f93b 	bl	800241a <HAL_SYSTICK_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00e      	b.n	80021cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	d80a      	bhi.n	80021ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b4:	2200      	movs	r2, #0
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f000 f911 	bl	80023e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c0:	4a06      	ldr	r2, [pc, #24]	; (80021dc <HAL_InitTick+0x5c>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000000 	.word	0x20000000
 80021d8:	20000008 	.word	0x20000008
 80021dc:	20000004 	.word	0x20000004

080021e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_IncTick+0x20>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_IncTick+0x24>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_IncTick+0x24>)
 80021f2:	6013      	str	r3, [r2, #0]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000008 	.word	0x20000008
 8002204:	20000378 	.word	0x20000378

08002208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_GetTick+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000378 	.word	0x20000378

08002220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff ffee 	bl	8002208 <HAL_GetTick>
 800222c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d005      	beq.n	8002246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_Delay+0x44>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002246:	bf00      	nop
 8002248:	f7ff ffde 	bl	8002208 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	429a      	cmp	r2, r3
 8002256:	d8f7      	bhi.n	8002248 <HAL_Delay+0x28>
  {
  }
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000008 	.word	0x20000008

08002268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002284:	4013      	ands	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229a:	4a04      	ldr	r2, [pc, #16]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	60d3      	str	r3, [r2, #12]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <__NVIC_GetPriorityGrouping+0x18>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f003 0307 	and.w	r3, r3, #7
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	6039      	str	r1, [r7, #0]
 80022d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db0a      	blt.n	80022f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	490c      	ldr	r1, [pc, #48]	; (8002318 <__NVIC_SetPriority+0x4c>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	440b      	add	r3, r1
 80022f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f4:	e00a      	b.n	800230c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4908      	ldr	r1, [pc, #32]	; (800231c <__NVIC_SetPriority+0x50>)
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	3b04      	subs	r3, #4
 8002304:	0112      	lsls	r2, r2, #4
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	440b      	add	r3, r1
 800230a:	761a      	strb	r2, [r3, #24]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	; 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f1c3 0307 	rsb	r3, r3, #7
 800233a:	2b04      	cmp	r3, #4
 800233c:	bf28      	it	cs
 800233e:	2304      	movcs	r3, #4
 8002340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3304      	adds	r3, #4
 8002346:	2b06      	cmp	r3, #6
 8002348:	d902      	bls.n	8002350 <NVIC_EncodePriority+0x30>
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3b03      	subs	r3, #3
 800234e:	e000      	b.n	8002352 <NVIC_EncodePriority+0x32>
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	f04f 32ff 	mov.w	r2, #4294967295
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43da      	mvns	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	401a      	ands	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002368:	f04f 31ff 	mov.w	r1, #4294967295
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	43d9      	mvns	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	4313      	orrs	r3, r2
         );
}
 800237a:	4618      	mov	r0, r3
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002398:	d301      	bcc.n	800239e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239a:	2301      	movs	r3, #1
 800239c:	e00f      	b.n	80023be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <SysTick_Config+0x40>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023a6:	210f      	movs	r1, #15
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f7ff ff8e 	bl	80022cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <SysTick_Config+0x40>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <SysTick_Config+0x40>)
 80023b8:	2207      	movs	r2, #7
 80023ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	e000e010 	.word	0xe000e010

080023cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff47 	bl	8002268 <__NVIC_SetPriorityGrouping>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f4:	f7ff ff5c 	bl	80022b0 <__NVIC_GetPriorityGrouping>
 80023f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	6978      	ldr	r0, [r7, #20]
 8002400:	f7ff ff8e 	bl	8002320 <NVIC_EncodePriority>
 8002404:	4602      	mov	r2, r0
 8002406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff5d 	bl	80022cc <__NVIC_SetPriority>
}
 8002412:	bf00      	nop
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffb0 	bl	8002388 <SysTick_Config>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	; 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	e16b      	b.n	8002728 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002450:	2201      	movs	r2, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	429a      	cmp	r2, r3
 800246a:	f040 815a 	bne.w	8002722 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d005      	beq.n	8002486 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002482:	2b02      	cmp	r3, #2
 8002484:	d130      	bne.n	80024e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	2203      	movs	r2, #3
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024bc:	2201      	movs	r2, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 0201 	and.w	r2, r3, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d017      	beq.n	8002524 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d123      	bne.n	8002578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	08da      	lsrs	r2, r3, #3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3208      	adds	r2, #8
 8002538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	220f      	movs	r2, #15
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	08da      	lsrs	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3208      	adds	r2, #8
 8002572:	69b9      	ldr	r1, [r7, #24]
 8002574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0203 	and.w	r2, r3, #3
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80b4 	beq.w	8002722 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b60      	ldr	r3, [pc, #384]	; (8002740 <HAL_GPIO_Init+0x30c>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	4a5f      	ldr	r2, [pc, #380]	; (8002740 <HAL_GPIO_Init+0x30c>)
 80025c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ca:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <HAL_GPIO_Init+0x30c>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025d6:	4a5b      	ldr	r2, [pc, #364]	; (8002744 <HAL_GPIO_Init+0x310>)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	3302      	adds	r3, #2
 80025de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	220f      	movs	r2, #15
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a52      	ldr	r2, [pc, #328]	; (8002748 <HAL_GPIO_Init+0x314>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d02b      	beq.n	800265a <HAL_GPIO_Init+0x226>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a51      	ldr	r2, [pc, #324]	; (800274c <HAL_GPIO_Init+0x318>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d025      	beq.n	8002656 <HAL_GPIO_Init+0x222>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a50      	ldr	r2, [pc, #320]	; (8002750 <HAL_GPIO_Init+0x31c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01f      	beq.n	8002652 <HAL_GPIO_Init+0x21e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4f      	ldr	r2, [pc, #316]	; (8002754 <HAL_GPIO_Init+0x320>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d019      	beq.n	800264e <HAL_GPIO_Init+0x21a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4e      	ldr	r2, [pc, #312]	; (8002758 <HAL_GPIO_Init+0x324>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d013      	beq.n	800264a <HAL_GPIO_Init+0x216>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4d      	ldr	r2, [pc, #308]	; (800275c <HAL_GPIO_Init+0x328>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00d      	beq.n	8002646 <HAL_GPIO_Init+0x212>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4c      	ldr	r2, [pc, #304]	; (8002760 <HAL_GPIO_Init+0x32c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d007      	beq.n	8002642 <HAL_GPIO_Init+0x20e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4b      	ldr	r2, [pc, #300]	; (8002764 <HAL_GPIO_Init+0x330>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_GPIO_Init+0x20a>
 800263a:	2307      	movs	r3, #7
 800263c:	e00e      	b.n	800265c <HAL_GPIO_Init+0x228>
 800263e:	2308      	movs	r3, #8
 8002640:	e00c      	b.n	800265c <HAL_GPIO_Init+0x228>
 8002642:	2306      	movs	r3, #6
 8002644:	e00a      	b.n	800265c <HAL_GPIO_Init+0x228>
 8002646:	2305      	movs	r3, #5
 8002648:	e008      	b.n	800265c <HAL_GPIO_Init+0x228>
 800264a:	2304      	movs	r3, #4
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x228>
 800264e:	2303      	movs	r3, #3
 8002650:	e004      	b.n	800265c <HAL_GPIO_Init+0x228>
 8002652:	2302      	movs	r3, #2
 8002654:	e002      	b.n	800265c <HAL_GPIO_Init+0x228>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x228>
 800265a:	2300      	movs	r3, #0
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f002 0203 	and.w	r2, r2, #3
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	4093      	lsls	r3, r2
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800266c:	4935      	ldr	r1, [pc, #212]	; (8002744 <HAL_GPIO_Init+0x310>)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3302      	adds	r3, #2
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267a:	4b3b      	ldr	r3, [pc, #236]	; (8002768 <HAL_GPIO_Init+0x334>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800269e:	4a32      	ldr	r2, [pc, #200]	; (8002768 <HAL_GPIO_Init+0x334>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a4:	4b30      	ldr	r3, [pc, #192]	; (8002768 <HAL_GPIO_Init+0x334>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c8:	4a27      	ldr	r2, [pc, #156]	; (8002768 <HAL_GPIO_Init+0x334>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ce:	4b26      	ldr	r3, [pc, #152]	; (8002768 <HAL_GPIO_Init+0x334>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f2:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <HAL_GPIO_Init+0x334>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_GPIO_Init+0x334>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800271c:	4a12      	ldr	r2, [pc, #72]	; (8002768 <HAL_GPIO_Init+0x334>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3301      	adds	r3, #1
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b0f      	cmp	r3, #15
 800272c:	f67f ae90 	bls.w	8002450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	3724      	adds	r7, #36	; 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	40013800 	.word	0x40013800
 8002748:	40020000 	.word	0x40020000
 800274c:	40020400 	.word	0x40020400
 8002750:	40020800 	.word	0x40020800
 8002754:	40020c00 	.word	0x40020c00
 8002758:	40021000 	.word	0x40021000
 800275c:	40021400 	.word	0x40021400
 8002760:	40021800 	.word	0x40021800
 8002764:	40021c00 	.word	0x40021c00
 8002768:	40013c00 	.word	0x40013c00

0800276c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
 8002778:	4613      	mov	r3, r2
 800277a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800277c:	787b      	ldrb	r3, [r7, #1]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002782:	887a      	ldrh	r2, [r7, #2]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002788:	e003      	b.n	8002792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800278a:	887b      	ldrh	r3, [r7, #2]
 800278c:	041a      	lsls	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	619a      	str	r2, [r3, #24]
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e12b      	b.n	8002a0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff fac4 	bl	8001d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2224      	movs	r2, #36	; 0x24
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002802:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002804:	f001 fbfc 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 8002808:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4a81      	ldr	r2, [pc, #516]	; (8002a14 <HAL_I2C_Init+0x274>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d807      	bhi.n	8002824 <HAL_I2C_Init+0x84>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4a80      	ldr	r2, [pc, #512]	; (8002a18 <HAL_I2C_Init+0x278>)
 8002818:	4293      	cmp	r3, r2
 800281a:	bf94      	ite	ls
 800281c:	2301      	movls	r3, #1
 800281e:	2300      	movhi	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	e006      	b.n	8002832 <HAL_I2C_Init+0x92>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4a7d      	ldr	r2, [pc, #500]	; (8002a1c <HAL_I2C_Init+0x27c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	bf94      	ite	ls
 800282c:	2301      	movls	r3, #1
 800282e:	2300      	movhi	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e0e7      	b.n	8002a0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4a78      	ldr	r2, [pc, #480]	; (8002a20 <HAL_I2C_Init+0x280>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	0c9b      	lsrs	r3, r3, #18
 8002844:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	430a      	orrs	r2, r1
 8002858:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4a6a      	ldr	r2, [pc, #424]	; (8002a14 <HAL_I2C_Init+0x274>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d802      	bhi.n	8002874 <HAL_I2C_Init+0xd4>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	3301      	adds	r3, #1
 8002872:	e009      	b.n	8002888 <HAL_I2C_Init+0xe8>
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	4a69      	ldr	r2, [pc, #420]	; (8002a24 <HAL_I2C_Init+0x284>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	099b      	lsrs	r3, r3, #6
 8002886:	3301      	adds	r3, #1
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	430b      	orrs	r3, r1
 800288e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800289a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	495c      	ldr	r1, [pc, #368]	; (8002a14 <HAL_I2C_Init+0x274>)
 80028a4:	428b      	cmp	r3, r1
 80028a6:	d819      	bhi.n	80028dc <HAL_I2C_Init+0x13c>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e59      	subs	r1, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028b6:	1c59      	adds	r1, r3, #1
 80028b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028bc:	400b      	ands	r3, r1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_I2C_Init+0x138>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1e59      	subs	r1, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d6:	e051      	b.n	800297c <HAL_I2C_Init+0x1dc>
 80028d8:	2304      	movs	r3, #4
 80028da:	e04f      	b.n	800297c <HAL_I2C_Init+0x1dc>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d111      	bne.n	8002908 <HAL_I2C_Init+0x168>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1e58      	subs	r0, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	440b      	add	r3, r1
 80028f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f6:	3301      	adds	r3, #1
 80028f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf0c      	ite	eq
 8002900:	2301      	moveq	r3, #1
 8002902:	2300      	movne	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	e012      	b.n	800292e <HAL_I2C_Init+0x18e>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1e58      	subs	r0, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	0099      	lsls	r1, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	fbb0 f3f3 	udiv	r3, r0, r3
 800291e:	3301      	adds	r3, #1
 8002920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf0c      	ite	eq
 8002928:	2301      	moveq	r3, #1
 800292a:	2300      	movne	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_Init+0x196>
 8002932:	2301      	movs	r3, #1
 8002934:	e022      	b.n	800297c <HAL_I2C_Init+0x1dc>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10e      	bne.n	800295c <HAL_I2C_Init+0x1bc>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1e58      	subs	r0, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	460b      	mov	r3, r1
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	440b      	add	r3, r1
 800294c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002950:	3301      	adds	r3, #1
 8002952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800295a:	e00f      	b.n	800297c <HAL_I2C_Init+0x1dc>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1e58      	subs	r0, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	0099      	lsls	r1, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002972:	3301      	adds	r3, #1
 8002974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	6809      	ldr	r1, [r1, #0]
 8002980:	4313      	orrs	r3, r2
 8002982:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6911      	ldr	r1, [r2, #16]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68d2      	ldr	r2, [r2, #12]
 80029b6:	4311      	orrs	r1, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	430b      	orrs	r3, r1
 80029be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	000186a0 	.word	0x000186a0
 8002a18:	001e847f 	.word	0x001e847f
 8002a1c:	003d08ff 	.word	0x003d08ff
 8002a20:	431bde83 	.word	0x431bde83
 8002a24:	10624dd3 	.word	0x10624dd3

08002a28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	461a      	mov	r2, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	817b      	strh	r3, [r7, #10]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	813b      	strh	r3, [r7, #8]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a42:	f7ff fbe1 	bl	8002208 <HAL_GetTick>
 8002a46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	f040 80d9 	bne.w	8002c08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2319      	movs	r3, #25
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	496d      	ldr	r1, [pc, #436]	; (8002c14 <HAL_I2C_Mem_Write+0x1ec>)
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 fc7f 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e0cc      	b.n	8002c0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_I2C_Mem_Write+0x56>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e0c5      	b.n	8002c0a <HAL_I2C_Mem_Write+0x1e2>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d007      	beq.n	8002aa4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2221      	movs	r2, #33	; 0x21
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2240      	movs	r2, #64	; 0x40
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a3a      	ldr	r2, [r7, #32]
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4a4d      	ldr	r2, [pc, #308]	; (8002c18 <HAL_I2C_Mem_Write+0x1f0>)
 8002ae4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ae6:	88f8      	ldrh	r0, [r7, #6]
 8002ae8:	893a      	ldrh	r2, [r7, #8]
 8002aea:	8979      	ldrh	r1, [r7, #10]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4603      	mov	r3, r0
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fab6 	bl	8003068 <I2C_RequestMemoryWrite>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d052      	beq.n	8002ba8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e081      	b.n	8002c0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fd00 	bl	8003510 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00d      	beq.n	8002b32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d107      	bne.n	8002b2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e06b      	b.n	8002c0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	781a      	ldrb	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d11b      	bne.n	8002ba8 <HAL_I2C_Mem_Write+0x180>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d017      	beq.n	8002ba8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	781a      	ldrb	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1aa      	bne.n	8002b06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fcec 	bl	8003592 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00d      	beq.n	8002bdc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d107      	bne.n	8002bd8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e016      	b.n	8002c0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e000      	b.n	8002c0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c08:	2302      	movs	r3, #2
  }
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	00100002 	.word	0x00100002
 8002c18:	ffff0000 	.word	0xffff0000

08002c1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08c      	sub	sp, #48	; 0x30
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	4608      	mov	r0, r1
 8002c26:	4611      	mov	r1, r2
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	817b      	strh	r3, [r7, #10]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	813b      	strh	r3, [r7, #8]
 8002c32:	4613      	mov	r3, r2
 8002c34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c36:	f7ff fae7 	bl	8002208 <HAL_GetTick>
 8002c3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	f040 8208 	bne.w	800305a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	2319      	movs	r3, #25
 8002c50:	2201      	movs	r2, #1
 8002c52:	497b      	ldr	r1, [pc, #492]	; (8002e40 <HAL_I2C_Mem_Read+0x224>)
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fb85 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c60:	2302      	movs	r3, #2
 8002c62:	e1fb      	b.n	800305c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_I2C_Mem_Read+0x56>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e1f4      	b.n	800305c <HAL_I2C_Mem_Read+0x440>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d007      	beq.n	8002c98 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2222      	movs	r2, #34	; 0x22
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2240      	movs	r2, #64	; 0x40
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a5b      	ldr	r2, [pc, #364]	; (8002e44 <HAL_I2C_Mem_Read+0x228>)
 8002cd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cda:	88f8      	ldrh	r0, [r7, #6]
 8002cdc:	893a      	ldrh	r2, [r7, #8]
 8002cde:	8979      	ldrh	r1, [r7, #10]
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	9301      	str	r3, [sp, #4]
 8002ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	4603      	mov	r3, r0
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fa52 	bl	8003194 <I2C_RequestMemoryRead>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e1b0      	b.n	800305c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d113      	bne.n	8002d2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d02:	2300      	movs	r3, #0
 8002d04:	623b      	str	r3, [r7, #32]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	623b      	str	r3, [r7, #32]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	623b      	str	r3, [r7, #32]
 8002d16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	e184      	b.n	8003034 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d11b      	bne.n	8002d6a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	e164      	b.n	8003034 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d11b      	bne.n	8002daa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	e144      	b.n	8003034 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002dc0:	e138      	b.n	8003034 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	f200 80f1 	bhi.w	8002fae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d123      	bne.n	8002e1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 fc1b 	bl	8003614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e139      	b.n	800305c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e1a:	e10b      	b.n	8003034 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d14e      	bne.n	8002ec2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	4906      	ldr	r1, [pc, #24]	; (8002e48 <HAL_I2C_Mem_Read+0x22c>)
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 fa98 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e10e      	b.n	800305c <HAL_I2C_Mem_Read+0x440>
 8002e3e:	bf00      	nop
 8002e40:	00100002 	.word	0x00100002
 8002e44:	ffff0000 	.word	0xffff0000
 8002e48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ec0:	e0b8      	b.n	8003034 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec8:	2200      	movs	r2, #0
 8002eca:	4966      	ldr	r1, [pc, #408]	; (8003064 <HAL_I2C_Mem_Read+0x448>)
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fa49 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0bf      	b.n	800305c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	2200      	movs	r2, #0
 8002f26:	494f      	ldr	r1, [pc, #316]	; (8003064 <HAL_I2C_Mem_Read+0x448>)
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fa1b 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e091      	b.n	800305c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fac:	e042      	b.n	8003034 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 fb2e 	bl	8003614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e04c      	b.n	800305c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d118      	bne.n	8003034 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	f47f aec2 	bne.w	8002dc2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	e000      	b.n	800305c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800305a:	2302      	movs	r3, #2
  }
}
 800305c:	4618      	mov	r0, r3
 800305e:	3728      	adds	r7, #40	; 0x28
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	00010004 	.word	0x00010004

08003068 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	461a      	mov	r2, r3
 8003076:	4603      	mov	r3, r0
 8003078:	817b      	strh	r3, [r7, #10]
 800307a:	460b      	mov	r3, r1
 800307c:	813b      	strh	r3, [r7, #8]
 800307e:	4613      	mov	r3, r2
 8003080:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003090:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	2200      	movs	r2, #0
 800309a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f960 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b8:	d103      	bne.n	80030c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e05f      	b.n	8003186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030c6:	897b      	ldrh	r3, [r7, #10]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	6a3a      	ldr	r2, [r7, #32]
 80030da:	492d      	ldr	r1, [pc, #180]	; (8003190 <I2C_RequestMemoryWrite+0x128>)
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f998 	bl	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e04c      	b.n	8003186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003104:	6a39      	ldr	r1, [r7, #32]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 fa02 	bl	8003510 <I2C_WaitOnTXEFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00d      	beq.n	800312e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2b04      	cmp	r3, #4
 8003118:	d107      	bne.n	800312a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003128:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e02b      	b.n	8003186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d105      	bne.n	8003140 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003134:	893b      	ldrh	r3, [r7, #8]
 8003136:	b2da      	uxtb	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	611a      	str	r2, [r3, #16]
 800313e:	e021      	b.n	8003184 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003140:	893b      	ldrh	r3, [r7, #8]
 8003142:	0a1b      	lsrs	r3, r3, #8
 8003144:	b29b      	uxth	r3, r3
 8003146:	b2da      	uxtb	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003150:	6a39      	ldr	r1, [r7, #32]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f9dc 	bl	8003510 <I2C_WaitOnTXEFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00d      	beq.n	800317a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b04      	cmp	r3, #4
 8003164:	d107      	bne.n	8003176 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003174:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e005      	b.n	8003186 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800317a:	893b      	ldrh	r3, [r7, #8]
 800317c:	b2da      	uxtb	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	00010002 	.word	0x00010002

08003194 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af02      	add	r7, sp, #8
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	4608      	mov	r0, r1
 800319e:	4611      	mov	r1, r2
 80031a0:	461a      	mov	r2, r3
 80031a2:	4603      	mov	r3, r0
 80031a4:	817b      	strh	r3, [r7, #10]
 80031a6:	460b      	mov	r3, r1
 80031a8:	813b      	strh	r3, [r7, #8]
 80031aa:	4613      	mov	r3, r2
 80031ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f8c2 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00d      	beq.n	8003202 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f4:	d103      	bne.n	80031fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e0aa      	b.n	8003358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003202:	897b      	ldrh	r3, [r7, #10]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003210:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	6a3a      	ldr	r2, [r7, #32]
 8003216:	4952      	ldr	r1, [pc, #328]	; (8003360 <I2C_RequestMemoryRead+0x1cc>)
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f8fa 	bl	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e097      	b.n	8003358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800323e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003240:	6a39      	ldr	r1, [r7, #32]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f964 	bl	8003510 <I2C_WaitOnTXEFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2b04      	cmp	r3, #4
 8003254:	d107      	bne.n	8003266 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003264:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e076      	b.n	8003358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d105      	bne.n	800327c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003270:	893b      	ldrh	r3, [r7, #8]
 8003272:	b2da      	uxtb	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	611a      	str	r2, [r3, #16]
 800327a:	e021      	b.n	80032c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800327c:	893b      	ldrh	r3, [r7, #8]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	b29b      	uxth	r3, r3
 8003282:	b2da      	uxtb	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800328a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328c:	6a39      	ldr	r1, [r7, #32]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f93e 	bl	8003510 <I2C_WaitOnTXEFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00d      	beq.n	80032b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d107      	bne.n	80032b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e050      	b.n	8003358 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032b6:	893b      	ldrh	r3, [r7, #8]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c2:	6a39      	ldr	r1, [r7, #32]
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f923 	bl	8003510 <I2C_WaitOnTXEFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00d      	beq.n	80032ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d107      	bne.n	80032e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e035      	b.n	8003358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	2200      	movs	r2, #0
 8003304:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f82b 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00d      	beq.n	8003330 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003322:	d103      	bne.n	800332c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800332a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e013      	b.n	8003358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003330:	897b      	ldrh	r3, [r7, #10]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	b2da      	uxtb	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	6a3a      	ldr	r2, [r7, #32]
 8003344:	4906      	ldr	r1, [pc, #24]	; (8003360 <I2C_RequestMemoryRead+0x1cc>)
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f863 	bl	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	00010002 	.word	0x00010002

08003364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003374:	e025      	b.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d021      	beq.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337e:	f7fe ff43 	bl	8002208 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d302      	bcc.n	8003394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d116      	bne.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f043 0220 	orr.w	r2, r3, #32
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e023      	b.n	800340a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d10d      	bne.n	80033e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	43da      	mvns	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4013      	ands	r3, r2
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf0c      	ite	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	2300      	movne	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	e00c      	b.n	8003402 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	43da      	mvns	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4013      	ands	r3, r2
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf0c      	ite	eq
 80033fa:	2301      	moveq	r3, #1
 80033fc:	2300      	movne	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	429a      	cmp	r2, r3
 8003406:	d0b6      	beq.n	8003376 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003420:	e051      	b.n	80034c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003430:	d123      	bne.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003440:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800344a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f043 0204 	orr.w	r2, r3, #4
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e046      	b.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d021      	beq.n	80034c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003482:	f7fe fec1 	bl	8002208 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	429a      	cmp	r2, r3
 8003490:	d302      	bcc.n	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d116      	bne.n	80034c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f043 0220 	orr.w	r2, r3, #32
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e020      	b.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	0c1b      	lsrs	r3, r3, #16
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d10c      	bne.n	80034ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	43da      	mvns	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4013      	ands	r3, r2
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	bf14      	ite	ne
 80034e2:	2301      	movne	r3, #1
 80034e4:	2300      	moveq	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e00b      	b.n	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	43da      	mvns	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4013      	ands	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d18d      	bne.n	8003422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800351c:	e02d      	b.n	800357a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f8ce 	bl	80036c0 <I2C_IsAcknowledgeFailed>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e02d      	b.n	800358a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d021      	beq.n	800357a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7fe fe67 	bl	8002208 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d116      	bne.n	800357a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e007      	b.n	800358a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	2b80      	cmp	r3, #128	; 0x80
 8003586:	d1ca      	bne.n	800351e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800359e:	e02d      	b.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f88d 	bl	80036c0 <I2C_IsAcknowledgeFailed>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e02d      	b.n	800360c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b6:	d021      	beq.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b8:	f7fe fe26 	bl	8002208 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d302      	bcc.n	80035ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d116      	bne.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e007      	b.n	800360c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b04      	cmp	r3, #4
 8003608:	d1ca      	bne.n	80035a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003620:	e042      	b.n	80036a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b10      	cmp	r3, #16
 800362e:	d119      	bne.n	8003664 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0210 	mvn.w	r2, #16
 8003638:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e029      	b.n	80036b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003664:	f7fe fdd0 	bl	8002208 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	429a      	cmp	r2, r3
 8003672:	d302      	bcc.n	800367a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d116      	bne.n	80036a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	f043 0220 	orr.w	r2, r3, #32
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e007      	b.n	80036b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d1b5      	bne.n	8003622 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d6:	d11b      	bne.n	8003710 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	f043 0204 	orr.w	r2, r3, #4
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e267      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d075      	beq.n	800382a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800373e:	4b88      	ldr	r3, [pc, #544]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b04      	cmp	r3, #4
 8003748:	d00c      	beq.n	8003764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374a:	4b85      	ldr	r3, [pc, #532]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003752:	2b08      	cmp	r3, #8
 8003754:	d112      	bne.n	800377c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003756:	4b82      	ldr	r3, [pc, #520]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003762:	d10b      	bne.n	800377c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	4b7e      	ldr	r3, [pc, #504]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d05b      	beq.n	8003828 <HAL_RCC_OscConfig+0x108>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d157      	bne.n	8003828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e242      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003784:	d106      	bne.n	8003794 <HAL_RCC_OscConfig+0x74>
 8003786:	4b76      	ldr	r3, [pc, #472]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a75      	ldr	r2, [pc, #468]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e01d      	b.n	80037d0 <HAL_RCC_OscConfig+0xb0>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800379c:	d10c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x98>
 800379e:	4b70      	ldr	r3, [pc, #448]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a6f      	ldr	r2, [pc, #444]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	4b6d      	ldr	r3, [pc, #436]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a6c      	ldr	r2, [pc, #432]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e00b      	b.n	80037d0 <HAL_RCC_OscConfig+0xb0>
 80037b8:	4b69      	ldr	r3, [pc, #420]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a68      	ldr	r2, [pc, #416]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4b66      	ldr	r3, [pc, #408]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a65      	ldr	r2, [pc, #404]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d013      	beq.n	8003800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7fe fd16 	bl	8002208 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e0:	f7fe fd12 	bl	8002208 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e207      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	4b5b      	ldr	r3, [pc, #364]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0xc0>
 80037fe:	e014      	b.n	800382a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7fe fd02 	bl	8002208 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003808:	f7fe fcfe 	bl	8002208 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e1f3      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	4b51      	ldr	r3, [pc, #324]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0xe8>
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d063      	beq.n	80038fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003836:	4b4a      	ldr	r3, [pc, #296]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003842:	4b47      	ldr	r3, [pc, #284]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800384a:	2b08      	cmp	r3, #8
 800384c:	d11c      	bne.n	8003888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384e:	4b44      	ldr	r3, [pc, #272]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d116      	bne.n	8003888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385a:	4b41      	ldr	r3, [pc, #260]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_RCC_OscConfig+0x152>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d001      	beq.n	8003872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e1c7      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003872:	4b3b      	ldr	r3, [pc, #236]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4937      	ldr	r1, [pc, #220]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003886:	e03a      	b.n	80038fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d020      	beq.n	80038d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003890:	4b34      	ldr	r3, [pc, #208]	; (8003964 <HAL_RCC_OscConfig+0x244>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003896:	f7fe fcb7 	bl	8002208 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800389e:	f7fe fcb3 	bl	8002208 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e1a8      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b0:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038bc:	4b28      	ldr	r3, [pc, #160]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4925      	ldr	r1, [pc, #148]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]
 80038d0:	e015      	b.n	80038fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038d2:	4b24      	ldr	r3, [pc, #144]	; (8003964 <HAL_RCC_OscConfig+0x244>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fe fc96 	bl	8002208 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e0:	f7fe fc92 	bl	8002208 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e187      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f2:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d036      	beq.n	8003978 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d016      	beq.n	8003940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003912:	4b15      	ldr	r3, [pc, #84]	; (8003968 <HAL_RCC_OscConfig+0x248>)
 8003914:	2201      	movs	r2, #1
 8003916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fe fc76 	bl	8002208 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003920:	f7fe fc72 	bl	8002208 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e167      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCC_OscConfig+0x240>)
 8003934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCC_OscConfig+0x200>
 800393e:	e01b      	b.n	8003978 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003940:	4b09      	ldr	r3, [pc, #36]	; (8003968 <HAL_RCC_OscConfig+0x248>)
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003946:	f7fe fc5f 	bl	8002208 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394c:	e00e      	b.n	800396c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800394e:	f7fe fc5b 	bl	8002208 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d907      	bls.n	800396c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e150      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
 8003960:	40023800 	.word	0x40023800
 8003964:	42470000 	.word	0x42470000
 8003968:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396c:	4b88      	ldr	r3, [pc, #544]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 800396e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1ea      	bne.n	800394e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8097 	beq.w	8003ab4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003986:	2300      	movs	r3, #0
 8003988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398a:	4b81      	ldr	r3, [pc, #516]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10f      	bne.n	80039b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	4b7d      	ldr	r3, [pc, #500]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	4a7c      	ldr	r2, [pc, #496]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a4:	6413      	str	r3, [r2, #64]	; 0x40
 80039a6:	4b7a      	ldr	r3, [pc, #488]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b6:	4b77      	ldr	r3, [pc, #476]	; (8003b94 <HAL_RCC_OscConfig+0x474>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d118      	bne.n	80039f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039c2:	4b74      	ldr	r3, [pc, #464]	; (8003b94 <HAL_RCC_OscConfig+0x474>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a73      	ldr	r2, [pc, #460]	; (8003b94 <HAL_RCC_OscConfig+0x474>)
 80039c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ce:	f7fe fc1b 	bl	8002208 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d6:	f7fe fc17 	bl	8002208 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e10c      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e8:	4b6a      	ldr	r3, [pc, #424]	; (8003b94 <HAL_RCC_OscConfig+0x474>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d106      	bne.n	8003a0a <HAL_RCC_OscConfig+0x2ea>
 80039fc:	4b64      	ldr	r3, [pc, #400]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 80039fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a00:	4a63      	ldr	r2, [pc, #396]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6713      	str	r3, [r2, #112]	; 0x70
 8003a08:	e01c      	b.n	8003a44 <HAL_RCC_OscConfig+0x324>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b05      	cmp	r3, #5
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x30c>
 8003a12:	4b5f      	ldr	r3, [pc, #380]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	4a5e      	ldr	r2, [pc, #376]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a18:	f043 0304 	orr.w	r3, r3, #4
 8003a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1e:	4b5c      	ldr	r3, [pc, #368]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	4a5b      	ldr	r2, [pc, #364]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2a:	e00b      	b.n	8003a44 <HAL_RCC_OscConfig+0x324>
 8003a2c:	4b58      	ldr	r3, [pc, #352]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	4a57      	ldr	r2, [pc, #348]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	6713      	str	r3, [r2, #112]	; 0x70
 8003a38:	4b55      	ldr	r3, [pc, #340]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	4a54      	ldr	r2, [pc, #336]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a3e:	f023 0304 	bic.w	r3, r3, #4
 8003a42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d015      	beq.n	8003a78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4c:	f7fe fbdc 	bl	8002208 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a54:	f7fe fbd8 	bl	8002208 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e0cb      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6a:	4b49      	ldr	r3, [pc, #292]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0ee      	beq.n	8003a54 <HAL_RCC_OscConfig+0x334>
 8003a76:	e014      	b.n	8003aa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a78:	f7fe fbc6 	bl	8002208 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a80:	f7fe fbc2 	bl	8002208 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e0b5      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a96:	4b3e      	ldr	r3, [pc, #248]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1ee      	bne.n	8003a80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa8:	4b39      	ldr	r3, [pc, #228]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	4a38      	ldr	r2, [pc, #224]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80a1 	beq.w	8003c00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003abe:	4b34      	ldr	r3, [pc, #208]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d05c      	beq.n	8003b84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d141      	bne.n	8003b56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad2:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <HAL_RCC_OscConfig+0x478>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fe fb96 	bl	8002208 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae0:	f7fe fb92 	bl	8002208 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e087      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af2:	4b27      	ldr	r3, [pc, #156]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69da      	ldr	r2, [r3, #28]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	019b      	lsls	r3, r3, #6
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	085b      	lsrs	r3, r3, #1
 8003b16:	3b01      	subs	r3, #1
 8003b18:	041b      	lsls	r3, r3, #16
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	061b      	lsls	r3, r3, #24
 8003b22:	491b      	ldr	r1, [pc, #108]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b28:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <HAL_RCC_OscConfig+0x478>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2e:	f7fe fb6b 	bl	8002208 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b36:	f7fe fb67 	bl	8002208 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e05c      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b48:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x416>
 8003b54:	e054      	b.n	8003c00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b56:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <HAL_RCC_OscConfig+0x478>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fe fb54 	bl	8002208 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b64:	f7fe fb50 	bl	8002208 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e045      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x444>
 8003b82:	e03d      	b.n	8003c00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d107      	bne.n	8003b9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e038      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
 8003b90:	40023800 	.word	0x40023800
 8003b94:	40007000 	.word	0x40007000
 8003b98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_RCC_OscConfig+0x4ec>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d028      	beq.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d121      	bne.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d11a      	bne.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bcc:	4013      	ands	r3, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d111      	bne.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	3b01      	subs	r3, #1
 8003be6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d107      	bne.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800

08003c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0cc      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c24:	4b68      	ldr	r3, [pc, #416]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d90c      	bls.n	8003c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b65      	ldr	r3, [pc, #404]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3a:	4b63      	ldr	r3, [pc, #396]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0b8      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d020      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c64:	4b59      	ldr	r3, [pc, #356]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a58      	ldr	r2, [pc, #352]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c7c:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4a52      	ldr	r2, [pc, #328]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c88:	4b50      	ldr	r3, [pc, #320]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	494d      	ldr	r1, [pc, #308]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d044      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	4b47      	ldr	r3, [pc, #284]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d119      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e07f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d003      	beq.n	8003cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d107      	bne.n	8003cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cce:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e06f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cde:	4b3b      	ldr	r3, [pc, #236]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e067      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cee:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f023 0203 	bic.w	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	4934      	ldr	r1, [pc, #208]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d00:	f7fe fa82 	bl	8002208 <HAL_GetTick>
 8003d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d08:	f7fe fa7e 	bl	8002208 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e04f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	4b2b      	ldr	r3, [pc, #172]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 020c 	and.w	r2, r3, #12
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d1eb      	bne.n	8003d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d20c      	bcs.n	8003d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b20      	ldr	r3, [pc, #128]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e032      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d64:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4916      	ldr	r1, [pc, #88]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d82:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	490e      	ldr	r1, [pc, #56]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d96:	f000 f821 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	490a      	ldr	r1, [pc, #40]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003da8:	5ccb      	ldrb	r3, [r1, r3]
 8003daa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dae:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fe f9e2 	bl	8002180 <HAL_InitTick>

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023c00 	.word	0x40023c00
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	0800a27c 	.word	0x0800a27c
 8003dd4:	20000000 	.word	0x20000000
 8003dd8:	20000004 	.word	0x20000004

08003ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de0:	b094      	sub	sp, #80	; 0x50
 8003de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	647b      	str	r3, [r7, #68]	; 0x44
 8003de8:	2300      	movs	r3, #0
 8003dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dec:	2300      	movs	r3, #0
 8003dee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003df4:	4b79      	ldr	r3, [pc, #484]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d00d      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x40>
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	f200 80e1 	bhi.w	8003fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_RCC_GetSysClockFreq+0x34>
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e0e:	e0db      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e10:	4b73      	ldr	r3, [pc, #460]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e14:	e0db      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e16:	4b73      	ldr	r3, [pc, #460]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e1a:	e0d8      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e1c:	4b6f      	ldr	r3, [pc, #444]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e26:	4b6d      	ldr	r3, [pc, #436]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d063      	beq.n	8003efa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e32:	4b6a      	ldr	r3, [pc, #424]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	099b      	lsrs	r3, r3, #6
 8003e38:	2200      	movs	r2, #0
 8003e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e44:	633b      	str	r3, [r7, #48]	; 0x30
 8003e46:	2300      	movs	r3, #0
 8003e48:	637b      	str	r3, [r7, #52]	; 0x34
 8003e4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e4e:	4622      	mov	r2, r4
 8003e50:	462b      	mov	r3, r5
 8003e52:	f04f 0000 	mov.w	r0, #0
 8003e56:	f04f 0100 	mov.w	r1, #0
 8003e5a:	0159      	lsls	r1, r3, #5
 8003e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e60:	0150      	lsls	r0, r2, #5
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4621      	mov	r1, r4
 8003e68:	1a51      	subs	r1, r2, r1
 8003e6a:	6139      	str	r1, [r7, #16]
 8003e6c:	4629      	mov	r1, r5
 8003e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e80:	4659      	mov	r1, fp
 8003e82:	018b      	lsls	r3, r1, #6
 8003e84:	4651      	mov	r1, sl
 8003e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e8a:	4651      	mov	r1, sl
 8003e8c:	018a      	lsls	r2, r1, #6
 8003e8e:	4651      	mov	r1, sl
 8003e90:	ebb2 0801 	subs.w	r8, r2, r1
 8003e94:	4659      	mov	r1, fp
 8003e96:	eb63 0901 	sbc.w	r9, r3, r1
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eae:	4690      	mov	r8, r2
 8003eb0:	4699      	mov	r9, r3
 8003eb2:	4623      	mov	r3, r4
 8003eb4:	eb18 0303 	adds.w	r3, r8, r3
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	462b      	mov	r3, r5
 8003ebc:	eb49 0303 	adc.w	r3, r9, r3
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ece:	4629      	mov	r1, r5
 8003ed0:	024b      	lsls	r3, r1, #9
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ed8:	4621      	mov	r1, r4
 8003eda:	024a      	lsls	r2, r1, #9
 8003edc:	4610      	mov	r0, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ee8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003eec:	f7fc fecc 	bl	8000c88 <__aeabi_uldivmod>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef8:	e058      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003efa:	4b38      	ldr	r3, [pc, #224]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	099b      	lsrs	r3, r3, #6
 8003f00:	2200      	movs	r2, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	4611      	mov	r1, r2
 8003f06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f0a:	623b      	str	r3, [r7, #32]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f14:	4642      	mov	r2, r8
 8003f16:	464b      	mov	r3, r9
 8003f18:	f04f 0000 	mov.w	r0, #0
 8003f1c:	f04f 0100 	mov.w	r1, #0
 8003f20:	0159      	lsls	r1, r3, #5
 8003f22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f26:	0150      	lsls	r0, r2, #5
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f32:	4649      	mov	r1, r9
 8003f34:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f4c:	ebb2 040a 	subs.w	r4, r2, sl
 8003f50:	eb63 050b 	sbc.w	r5, r3, fp
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	00eb      	lsls	r3, r5, #3
 8003f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f62:	00e2      	lsls	r2, r4, #3
 8003f64:	4614      	mov	r4, r2
 8003f66:	461d      	mov	r5, r3
 8003f68:	4643      	mov	r3, r8
 8003f6a:	18e3      	adds	r3, r4, r3
 8003f6c:	603b      	str	r3, [r7, #0]
 8003f6e:	464b      	mov	r3, r9
 8003f70:	eb45 0303 	adc.w	r3, r5, r3
 8003f74:	607b      	str	r3, [r7, #4]
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f82:	4629      	mov	r1, r5
 8003f84:	028b      	lsls	r3, r1, #10
 8003f86:	4621      	mov	r1, r4
 8003f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	028a      	lsls	r2, r1, #10
 8003f90:	4610      	mov	r0, r2
 8003f92:	4619      	mov	r1, r3
 8003f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f96:	2200      	movs	r2, #0
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	61fa      	str	r2, [r7, #28]
 8003f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fa0:	f7fc fe72 	bl	8000c88 <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4613      	mov	r3, r2
 8003faa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fc6:	e002      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fc8:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3750      	adds	r7, #80	; 0x50
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	00f42400 	.word	0x00f42400
 8003fe4:	007a1200 	.word	0x007a1200

08003fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000000 	.word	0x20000000

08004000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004004:	f7ff fff0 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004008:	4602      	mov	r2, r0
 800400a:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	0a9b      	lsrs	r3, r3, #10
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	4903      	ldr	r1, [pc, #12]	; (8004024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004016:	5ccb      	ldrb	r3, [r1, r3]
 8004018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40023800 	.word	0x40023800
 8004024:	0800a28c 	.word	0x0800a28c

08004028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800402c:	f7ff ffdc 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004030:	4602      	mov	r2, r0
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	0b5b      	lsrs	r3, r3, #13
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	4903      	ldr	r1, [pc, #12]	; (800404c <HAL_RCC_GetPCLK2Freq+0x24>)
 800403e:	5ccb      	ldrb	r3, [r1, r3]
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004044:	4618      	mov	r0, r3
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40023800 	.word	0x40023800
 800404c:	0800a28c 	.word	0x0800a28c

08004050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e041      	b.n	80040e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fd feb4 	bl	8001de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	4619      	mov	r1, r3
 800408e:	4610      	mov	r0, r2
 8004090:	f000 f82e 	bl	80040f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a40      	ldr	r2, [pc, #256]	; (8004204 <TIM_Base_SetConfig+0x114>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d013      	beq.n	8004130 <TIM_Base_SetConfig+0x40>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410e:	d00f      	beq.n	8004130 <TIM_Base_SetConfig+0x40>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a3d      	ldr	r2, [pc, #244]	; (8004208 <TIM_Base_SetConfig+0x118>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00b      	beq.n	8004130 <TIM_Base_SetConfig+0x40>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a3c      	ldr	r2, [pc, #240]	; (800420c <TIM_Base_SetConfig+0x11c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d007      	beq.n	8004130 <TIM_Base_SetConfig+0x40>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a3b      	ldr	r2, [pc, #236]	; (8004210 <TIM_Base_SetConfig+0x120>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_Base_SetConfig+0x40>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a3a      	ldr	r2, [pc, #232]	; (8004214 <TIM_Base_SetConfig+0x124>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d108      	bne.n	8004142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a2f      	ldr	r2, [pc, #188]	; (8004204 <TIM_Base_SetConfig+0x114>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d02b      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004150:	d027      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a2c      	ldr	r2, [pc, #176]	; (8004208 <TIM_Base_SetConfig+0x118>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d023      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a2b      	ldr	r2, [pc, #172]	; (800420c <TIM_Base_SetConfig+0x11c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d01f      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a2a      	ldr	r2, [pc, #168]	; (8004210 <TIM_Base_SetConfig+0x120>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d01b      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a29      	ldr	r2, [pc, #164]	; (8004214 <TIM_Base_SetConfig+0x124>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d017      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a28      	ldr	r2, [pc, #160]	; (8004218 <TIM_Base_SetConfig+0x128>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d013      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a27      	ldr	r2, [pc, #156]	; (800421c <TIM_Base_SetConfig+0x12c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00f      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a26      	ldr	r2, [pc, #152]	; (8004220 <TIM_Base_SetConfig+0x130>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00b      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a25      	ldr	r2, [pc, #148]	; (8004224 <TIM_Base_SetConfig+0x134>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d007      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a24      	ldr	r2, [pc, #144]	; (8004228 <TIM_Base_SetConfig+0x138>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d003      	beq.n	80041a2 <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a23      	ldr	r2, [pc, #140]	; (800422c <TIM_Base_SetConfig+0x13c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d108      	bne.n	80041b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a0a      	ldr	r2, [pc, #40]	; (8004204 <TIM_Base_SetConfig+0x114>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d003      	beq.n	80041e8 <TIM_Base_SetConfig+0xf8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a0c      	ldr	r2, [pc, #48]	; (8004214 <TIM_Base_SetConfig+0x124>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d103      	bne.n	80041f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	615a      	str	r2, [r3, #20]
}
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40010000 	.word	0x40010000
 8004208:	40000400 	.word	0x40000400
 800420c:	40000800 	.word	0x40000800
 8004210:	40000c00 	.word	0x40000c00
 8004214:	40010400 	.word	0x40010400
 8004218:	40014000 	.word	0x40014000
 800421c:	40014400 	.word	0x40014400
 8004220:	40014800 	.word	0x40014800
 8004224:	40001800 	.word	0x40001800
 8004228:	40001c00 	.word	0x40001c00
 800422c:	40002000 	.word	0x40002000

08004230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004244:	2302      	movs	r3, #2
 8004246:	e05a      	b.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a21      	ldr	r2, [pc, #132]	; (800430c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d022      	beq.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004294:	d01d      	beq.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d018      	beq.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1b      	ldr	r2, [pc, #108]	; (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1a      	ldr	r2, [pc, #104]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00e      	beq.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a18      	ldr	r2, [pc, #96]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d009      	beq.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a17      	ldr	r2, [pc, #92]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a15      	ldr	r2, [pc, #84]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d10c      	bne.n	80042ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40010000 	.word	0x40010000
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800
 8004318:	40000c00 	.word	0x40000c00
 800431c:	40010400 	.word	0x40010400
 8004320:	40014000 	.word	0x40014000
 8004324:	40001800 	.word	0x40001800

08004328 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e03f      	b.n	80043ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fd fd80 	bl	8001e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2224      	movs	r2, #36	; 0x24
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800436a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f929 	bl	80045c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004380:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695a      	ldr	r2, [r3, #20]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004390:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b08a      	sub	sp, #40	; 0x28
 80043c6:	af02      	add	r7, sp, #8
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	4613      	mov	r3, r2
 80043d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b20      	cmp	r3, #32
 80043e0:	d17c      	bne.n	80044dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <HAL_UART_Transmit+0x2c>
 80043e8:	88fb      	ldrh	r3, [r7, #6]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e075      	b.n	80044de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_UART_Transmit+0x3e>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e06e      	b.n	80044de <HAL_UART_Transmit+0x11c>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2221      	movs	r2, #33	; 0x21
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004416:	f7fd fef7 	bl	8002208 <HAL_GetTick>
 800441a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	88fa      	ldrh	r2, [r7, #6]
 8004426:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004430:	d108      	bne.n	8004444 <HAL_UART_Transmit+0x82>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d104      	bne.n	8004444 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	e003      	b.n	800444c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004448:	2300      	movs	r3, #0
 800444a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004454:	e02a      	b.n	80044ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2200      	movs	r2, #0
 800445e:	2180      	movs	r1, #128	; 0x80
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f840 	bl	80044e6 <UART_WaitOnFlagUntilTimeout>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e036      	b.n	80044de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10b      	bne.n	800448e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004484:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	3302      	adds	r3, #2
 800448a:	61bb      	str	r3, [r7, #24]
 800448c:	e007      	b.n	800449e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	781a      	ldrb	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	3301      	adds	r3, #1
 800449c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1cf      	bne.n	8004456 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2200      	movs	r2, #0
 80044be:	2140      	movs	r1, #64	; 0x40
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f810 	bl	80044e6 <UART_WaitOnFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e006      	b.n	80044de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	e000      	b.n	80044de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80044dc:	2302      	movs	r3, #2
  }
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b090      	sub	sp, #64	; 0x40
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	603b      	str	r3, [r7, #0]
 80044f2:	4613      	mov	r3, r2
 80044f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f6:	e050      	b.n	800459a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fe:	d04c      	beq.n	800459a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <UART_WaitOnFlagUntilTimeout+0x30>
 8004506:	f7fd fe7f 	bl	8002208 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004512:	429a      	cmp	r2, r3
 8004514:	d241      	bcs.n	800459a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800452c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	330c      	adds	r3, #12
 8004534:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004536:	637a      	str	r2, [r7, #52]	; 0x34
 8004538:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800453c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1e5      	bne.n	8004516 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3314      	adds	r3, #20
 8004550:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	613b      	str	r3, [r7, #16]
   return(result);
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f023 0301 	bic.w	r3, r3, #1
 8004560:	63bb      	str	r3, [r7, #56]	; 0x38
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3314      	adds	r3, #20
 8004568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800456a:	623a      	str	r2, [r7, #32]
 800456c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	69f9      	ldr	r1, [r7, #28]
 8004570:	6a3a      	ldr	r2, [r7, #32]
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	61bb      	str	r3, [r7, #24]
   return(result);
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e5      	bne.n	800454a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e00f      	b.n	80045ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4013      	ands	r3, r2
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d09f      	beq.n	80044f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3740      	adds	r7, #64	; 0x40
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c8:	b0c0      	sub	sp, #256	; 0x100
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e0:	68d9      	ldr	r1, [r3, #12]
 80045e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	ea40 0301 	orr.w	r3, r0, r1
 80045ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	431a      	orrs	r2, r3
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800461c:	f021 010c 	bic.w	r1, r1, #12
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800462a:	430b      	orrs	r3, r1
 800462c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800463a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463e:	6999      	ldr	r1, [r3, #24]
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	ea40 0301 	orr.w	r3, r0, r1
 800464a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800464c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4b8f      	ldr	r3, [pc, #572]	; (8004890 <UART_SetConfig+0x2cc>)
 8004654:	429a      	cmp	r2, r3
 8004656:	d005      	beq.n	8004664 <UART_SetConfig+0xa0>
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	4b8d      	ldr	r3, [pc, #564]	; (8004894 <UART_SetConfig+0x2d0>)
 8004660:	429a      	cmp	r2, r3
 8004662:	d104      	bne.n	800466e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004664:	f7ff fce0 	bl	8004028 <HAL_RCC_GetPCLK2Freq>
 8004668:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800466c:	e003      	b.n	8004676 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800466e:	f7ff fcc7 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 8004672:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004680:	f040 810c 	bne.w	800489c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004688:	2200      	movs	r2, #0
 800468a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800468e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004692:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004696:	4622      	mov	r2, r4
 8004698:	462b      	mov	r3, r5
 800469a:	1891      	adds	r1, r2, r2
 800469c:	65b9      	str	r1, [r7, #88]	; 0x58
 800469e:	415b      	adcs	r3, r3
 80046a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046a6:	4621      	mov	r1, r4
 80046a8:	eb12 0801 	adds.w	r8, r2, r1
 80046ac:	4629      	mov	r1, r5
 80046ae:	eb43 0901 	adc.w	r9, r3, r1
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046c6:	4690      	mov	r8, r2
 80046c8:	4699      	mov	r9, r3
 80046ca:	4623      	mov	r3, r4
 80046cc:	eb18 0303 	adds.w	r3, r8, r3
 80046d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046d4:	462b      	mov	r3, r5
 80046d6:	eb49 0303 	adc.w	r3, r9, r3
 80046da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046f2:	460b      	mov	r3, r1
 80046f4:	18db      	adds	r3, r3, r3
 80046f6:	653b      	str	r3, [r7, #80]	; 0x50
 80046f8:	4613      	mov	r3, r2
 80046fa:	eb42 0303 	adc.w	r3, r2, r3
 80046fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004700:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004704:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004708:	f7fc fabe 	bl	8000c88 <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4b61      	ldr	r3, [pc, #388]	; (8004898 <UART_SetConfig+0x2d4>)
 8004712:	fba3 2302 	umull	r2, r3, r3, r2
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	011c      	lsls	r4, r3, #4
 800471a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800471e:	2200      	movs	r2, #0
 8004720:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004724:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004728:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800472c:	4642      	mov	r2, r8
 800472e:	464b      	mov	r3, r9
 8004730:	1891      	adds	r1, r2, r2
 8004732:	64b9      	str	r1, [r7, #72]	; 0x48
 8004734:	415b      	adcs	r3, r3
 8004736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004738:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800473c:	4641      	mov	r1, r8
 800473e:	eb12 0a01 	adds.w	sl, r2, r1
 8004742:	4649      	mov	r1, r9
 8004744:	eb43 0b01 	adc.w	fp, r3, r1
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004754:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800475c:	4692      	mov	sl, r2
 800475e:	469b      	mov	fp, r3
 8004760:	4643      	mov	r3, r8
 8004762:	eb1a 0303 	adds.w	r3, sl, r3
 8004766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800476a:	464b      	mov	r3, r9
 800476c:	eb4b 0303 	adc.w	r3, fp, r3
 8004770:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004780:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004784:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004788:	460b      	mov	r3, r1
 800478a:	18db      	adds	r3, r3, r3
 800478c:	643b      	str	r3, [r7, #64]	; 0x40
 800478e:	4613      	mov	r3, r2
 8004790:	eb42 0303 	adc.w	r3, r2, r3
 8004794:	647b      	str	r3, [r7, #68]	; 0x44
 8004796:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800479a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800479e:	f7fc fa73 	bl	8000c88 <__aeabi_uldivmod>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4611      	mov	r1, r2
 80047a8:	4b3b      	ldr	r3, [pc, #236]	; (8004898 <UART_SetConfig+0x2d4>)
 80047aa:	fba3 2301 	umull	r2, r3, r3, r1
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	2264      	movs	r2, #100	; 0x64
 80047b2:	fb02 f303 	mul.w	r3, r2, r3
 80047b6:	1acb      	subs	r3, r1, r3
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047be:	4b36      	ldr	r3, [pc, #216]	; (8004898 <UART_SetConfig+0x2d4>)
 80047c0:	fba3 2302 	umull	r2, r3, r3, r2
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047cc:	441c      	add	r4, r3
 80047ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047e0:	4642      	mov	r2, r8
 80047e2:	464b      	mov	r3, r9
 80047e4:	1891      	adds	r1, r2, r2
 80047e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80047e8:	415b      	adcs	r3, r3
 80047ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047f0:	4641      	mov	r1, r8
 80047f2:	1851      	adds	r1, r2, r1
 80047f4:	6339      	str	r1, [r7, #48]	; 0x30
 80047f6:	4649      	mov	r1, r9
 80047f8:	414b      	adcs	r3, r1
 80047fa:	637b      	str	r3, [r7, #52]	; 0x34
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004808:	4659      	mov	r1, fp
 800480a:	00cb      	lsls	r3, r1, #3
 800480c:	4651      	mov	r1, sl
 800480e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004812:	4651      	mov	r1, sl
 8004814:	00ca      	lsls	r2, r1, #3
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	4603      	mov	r3, r0
 800481c:	4642      	mov	r2, r8
 800481e:	189b      	adds	r3, r3, r2
 8004820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004824:	464b      	mov	r3, r9
 8004826:	460a      	mov	r2, r1
 8004828:	eb42 0303 	adc.w	r3, r2, r3
 800482c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800483c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004840:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004844:	460b      	mov	r3, r1
 8004846:	18db      	adds	r3, r3, r3
 8004848:	62bb      	str	r3, [r7, #40]	; 0x28
 800484a:	4613      	mov	r3, r2
 800484c:	eb42 0303 	adc.w	r3, r2, r3
 8004850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004852:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004856:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800485a:	f7fc fa15 	bl	8000c88 <__aeabi_uldivmod>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <UART_SetConfig+0x2d4>)
 8004864:	fba3 1302 	umull	r1, r3, r3, r2
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	2164      	movs	r1, #100	; 0x64
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	3332      	adds	r3, #50	; 0x32
 8004876:	4a08      	ldr	r2, [pc, #32]	; (8004898 <UART_SetConfig+0x2d4>)
 8004878:	fba2 2303 	umull	r2, r3, r2, r3
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	f003 0207 	and.w	r2, r3, #7
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4422      	add	r2, r4
 800488a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800488c:	e105      	b.n	8004a9a <UART_SetConfig+0x4d6>
 800488e:	bf00      	nop
 8004890:	40011000 	.word	0x40011000
 8004894:	40011400 	.word	0x40011400
 8004898:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800489c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048a0:	2200      	movs	r2, #0
 80048a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80048aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80048ae:	4642      	mov	r2, r8
 80048b0:	464b      	mov	r3, r9
 80048b2:	1891      	adds	r1, r2, r2
 80048b4:	6239      	str	r1, [r7, #32]
 80048b6:	415b      	adcs	r3, r3
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048be:	4641      	mov	r1, r8
 80048c0:	1854      	adds	r4, r2, r1
 80048c2:	4649      	mov	r1, r9
 80048c4:	eb43 0501 	adc.w	r5, r3, r1
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	00eb      	lsls	r3, r5, #3
 80048d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048d6:	00e2      	lsls	r2, r4, #3
 80048d8:	4614      	mov	r4, r2
 80048da:	461d      	mov	r5, r3
 80048dc:	4643      	mov	r3, r8
 80048de:	18e3      	adds	r3, r4, r3
 80048e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048e4:	464b      	mov	r3, r9
 80048e6:	eb45 0303 	adc.w	r3, r5, r3
 80048ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800490a:	4629      	mov	r1, r5
 800490c:	008b      	lsls	r3, r1, #2
 800490e:	4621      	mov	r1, r4
 8004910:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004914:	4621      	mov	r1, r4
 8004916:	008a      	lsls	r2, r1, #2
 8004918:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800491c:	f7fc f9b4 	bl	8000c88 <__aeabi_uldivmod>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4b60      	ldr	r3, [pc, #384]	; (8004aa8 <UART_SetConfig+0x4e4>)
 8004926:	fba3 2302 	umull	r2, r3, r3, r2
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	011c      	lsls	r4, r3, #4
 800492e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004932:	2200      	movs	r2, #0
 8004934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004938:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800493c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004940:	4642      	mov	r2, r8
 8004942:	464b      	mov	r3, r9
 8004944:	1891      	adds	r1, r2, r2
 8004946:	61b9      	str	r1, [r7, #24]
 8004948:	415b      	adcs	r3, r3
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004950:	4641      	mov	r1, r8
 8004952:	1851      	adds	r1, r2, r1
 8004954:	6139      	str	r1, [r7, #16]
 8004956:	4649      	mov	r1, r9
 8004958:	414b      	adcs	r3, r1
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004968:	4659      	mov	r1, fp
 800496a:	00cb      	lsls	r3, r1, #3
 800496c:	4651      	mov	r1, sl
 800496e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004972:	4651      	mov	r1, sl
 8004974:	00ca      	lsls	r2, r1, #3
 8004976:	4610      	mov	r0, r2
 8004978:	4619      	mov	r1, r3
 800497a:	4603      	mov	r3, r0
 800497c:	4642      	mov	r2, r8
 800497e:	189b      	adds	r3, r3, r2
 8004980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004984:	464b      	mov	r3, r9
 8004986:	460a      	mov	r2, r1
 8004988:	eb42 0303 	adc.w	r3, r2, r3
 800498c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	67bb      	str	r3, [r7, #120]	; 0x78
 800499a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80049a8:	4649      	mov	r1, r9
 80049aa:	008b      	lsls	r3, r1, #2
 80049ac:	4641      	mov	r1, r8
 80049ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049b2:	4641      	mov	r1, r8
 80049b4:	008a      	lsls	r2, r1, #2
 80049b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049ba:	f7fc f965 	bl	8000c88 <__aeabi_uldivmod>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4b39      	ldr	r3, [pc, #228]	; (8004aa8 <UART_SetConfig+0x4e4>)
 80049c4:	fba3 1302 	umull	r1, r3, r3, r2
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	2164      	movs	r1, #100	; 0x64
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	3332      	adds	r3, #50	; 0x32
 80049d6:	4a34      	ldr	r2, [pc, #208]	; (8004aa8 <UART_SetConfig+0x4e4>)
 80049d8:	fba2 2303 	umull	r2, r3, r2, r3
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049e2:	441c      	add	r4, r3
 80049e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e8:	2200      	movs	r2, #0
 80049ea:	673b      	str	r3, [r7, #112]	; 0x70
 80049ec:	677a      	str	r2, [r7, #116]	; 0x74
 80049ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049f2:	4642      	mov	r2, r8
 80049f4:	464b      	mov	r3, r9
 80049f6:	1891      	adds	r1, r2, r2
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	415b      	adcs	r3, r3
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a02:	4641      	mov	r1, r8
 8004a04:	1851      	adds	r1, r2, r1
 8004a06:	6039      	str	r1, [r7, #0]
 8004a08:	4649      	mov	r1, r9
 8004a0a:	414b      	adcs	r3, r1
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a1a:	4659      	mov	r1, fp
 8004a1c:	00cb      	lsls	r3, r1, #3
 8004a1e:	4651      	mov	r1, sl
 8004a20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a24:	4651      	mov	r1, sl
 8004a26:	00ca      	lsls	r2, r1, #3
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	4642      	mov	r2, r8
 8004a30:	189b      	adds	r3, r3, r2
 8004a32:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a34:	464b      	mov	r3, r9
 8004a36:	460a      	mov	r2, r1
 8004a38:	eb42 0303 	adc.w	r3, r2, r3
 8004a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	663b      	str	r3, [r7, #96]	; 0x60
 8004a48:	667a      	str	r2, [r7, #100]	; 0x64
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a56:	4649      	mov	r1, r9
 8004a58:	008b      	lsls	r3, r1, #2
 8004a5a:	4641      	mov	r1, r8
 8004a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a60:	4641      	mov	r1, r8
 8004a62:	008a      	lsls	r2, r1, #2
 8004a64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a68:	f7fc f90e 	bl	8000c88 <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <UART_SetConfig+0x4e4>)
 8004a72:	fba3 1302 	umull	r1, r3, r3, r2
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	2164      	movs	r1, #100	; 0x64
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	3332      	adds	r3, #50	; 0x32
 8004a84:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <UART_SetConfig+0x4e4>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	f003 020f 	and.w	r2, r3, #15
 8004a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4422      	add	r2, r4
 8004a98:	609a      	str	r2, [r3, #8]
}
 8004a9a:	bf00      	nop
 8004a9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aa6:	bf00      	nop
 8004aa8:	51eb851f 	.word	0x51eb851f

08004aac <__errno>:
 8004aac:	4b01      	ldr	r3, [pc, #4]	; (8004ab4 <__errno+0x8>)
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	2000000c 	.word	0x2000000c

08004ab8 <__libc_init_array>:
 8004ab8:	b570      	push	{r4, r5, r6, lr}
 8004aba:	4d0d      	ldr	r5, [pc, #52]	; (8004af0 <__libc_init_array+0x38>)
 8004abc:	4c0d      	ldr	r4, [pc, #52]	; (8004af4 <__libc_init_array+0x3c>)
 8004abe:	1b64      	subs	r4, r4, r5
 8004ac0:	10a4      	asrs	r4, r4, #2
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	42a6      	cmp	r6, r4
 8004ac6:	d109      	bne.n	8004adc <__libc_init_array+0x24>
 8004ac8:	4d0b      	ldr	r5, [pc, #44]	; (8004af8 <__libc_init_array+0x40>)
 8004aca:	4c0c      	ldr	r4, [pc, #48]	; (8004afc <__libc_init_array+0x44>)
 8004acc:	f005 fbaa 	bl	800a224 <_init>
 8004ad0:	1b64      	subs	r4, r4, r5
 8004ad2:	10a4      	asrs	r4, r4, #2
 8004ad4:	2600      	movs	r6, #0
 8004ad6:	42a6      	cmp	r6, r4
 8004ad8:	d105      	bne.n	8004ae6 <__libc_init_array+0x2e>
 8004ada:	bd70      	pop	{r4, r5, r6, pc}
 8004adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae0:	4798      	blx	r3
 8004ae2:	3601      	adds	r6, #1
 8004ae4:	e7ee      	b.n	8004ac4 <__libc_init_array+0xc>
 8004ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aea:	4798      	blx	r3
 8004aec:	3601      	adds	r6, #1
 8004aee:	e7f2      	b.n	8004ad6 <__libc_init_array+0x1e>
 8004af0:	0800a778 	.word	0x0800a778
 8004af4:	0800a778 	.word	0x0800a778
 8004af8:	0800a778 	.word	0x0800a778
 8004afc:	0800a77c 	.word	0x0800a77c

08004b00 <memset>:
 8004b00:	4402      	add	r2, r0
 8004b02:	4603      	mov	r3, r0
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d100      	bne.n	8004b0a <memset+0xa>
 8004b08:	4770      	bx	lr
 8004b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0e:	e7f9      	b.n	8004b04 <memset+0x4>

08004b10 <__cvt>:
 8004b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b14:	ec55 4b10 	vmov	r4, r5, d0
 8004b18:	2d00      	cmp	r5, #0
 8004b1a:	460e      	mov	r6, r1
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	462b      	mov	r3, r5
 8004b20:	bfbb      	ittet	lt
 8004b22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b26:	461d      	movlt	r5, r3
 8004b28:	2300      	movge	r3, #0
 8004b2a:	232d      	movlt	r3, #45	; 0x2d
 8004b2c:	700b      	strb	r3, [r1, #0]
 8004b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b34:	4691      	mov	r9, r2
 8004b36:	f023 0820 	bic.w	r8, r3, #32
 8004b3a:	bfbc      	itt	lt
 8004b3c:	4622      	movlt	r2, r4
 8004b3e:	4614      	movlt	r4, r2
 8004b40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b44:	d005      	beq.n	8004b52 <__cvt+0x42>
 8004b46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004b4a:	d100      	bne.n	8004b4e <__cvt+0x3e>
 8004b4c:	3601      	adds	r6, #1
 8004b4e:	2102      	movs	r1, #2
 8004b50:	e000      	b.n	8004b54 <__cvt+0x44>
 8004b52:	2103      	movs	r1, #3
 8004b54:	ab03      	add	r3, sp, #12
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	ab02      	add	r3, sp, #8
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	ec45 4b10 	vmov	d0, r4, r5
 8004b60:	4653      	mov	r3, sl
 8004b62:	4632      	mov	r2, r6
 8004b64:	f001 fdac 	bl	80066c0 <_dtoa_r>
 8004b68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b6c:	4607      	mov	r7, r0
 8004b6e:	d102      	bne.n	8004b76 <__cvt+0x66>
 8004b70:	f019 0f01 	tst.w	r9, #1
 8004b74:	d022      	beq.n	8004bbc <__cvt+0xac>
 8004b76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b7a:	eb07 0906 	add.w	r9, r7, r6
 8004b7e:	d110      	bne.n	8004ba2 <__cvt+0x92>
 8004b80:	783b      	ldrb	r3, [r7, #0]
 8004b82:	2b30      	cmp	r3, #48	; 0x30
 8004b84:	d10a      	bne.n	8004b9c <__cvt+0x8c>
 8004b86:	2200      	movs	r2, #0
 8004b88:	2300      	movs	r3, #0
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	4629      	mov	r1, r5
 8004b8e:	f7fb ff9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b92:	b918      	cbnz	r0, 8004b9c <__cvt+0x8c>
 8004b94:	f1c6 0601 	rsb	r6, r6, #1
 8004b98:	f8ca 6000 	str.w	r6, [sl]
 8004b9c:	f8da 3000 	ldr.w	r3, [sl]
 8004ba0:	4499      	add	r9, r3
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	4629      	mov	r1, r5
 8004baa:	f7fb ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bae:	b108      	cbz	r0, 8004bb4 <__cvt+0xa4>
 8004bb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004bb4:	2230      	movs	r2, #48	; 0x30
 8004bb6:	9b03      	ldr	r3, [sp, #12]
 8004bb8:	454b      	cmp	r3, r9
 8004bba:	d307      	bcc.n	8004bcc <__cvt+0xbc>
 8004bbc:	9b03      	ldr	r3, [sp, #12]
 8004bbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bc0:	1bdb      	subs	r3, r3, r7
 8004bc2:	4638      	mov	r0, r7
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	b004      	add	sp, #16
 8004bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bcc:	1c59      	adds	r1, r3, #1
 8004bce:	9103      	str	r1, [sp, #12]
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	e7f0      	b.n	8004bb6 <__cvt+0xa6>

08004bd4 <__exponent>:
 8004bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2900      	cmp	r1, #0
 8004bda:	bfb8      	it	lt
 8004bdc:	4249      	neglt	r1, r1
 8004bde:	f803 2b02 	strb.w	r2, [r3], #2
 8004be2:	bfb4      	ite	lt
 8004be4:	222d      	movlt	r2, #45	; 0x2d
 8004be6:	222b      	movge	r2, #43	; 0x2b
 8004be8:	2909      	cmp	r1, #9
 8004bea:	7042      	strb	r2, [r0, #1]
 8004bec:	dd2a      	ble.n	8004c44 <__exponent+0x70>
 8004bee:	f10d 0407 	add.w	r4, sp, #7
 8004bf2:	46a4      	mov	ip, r4
 8004bf4:	270a      	movs	r7, #10
 8004bf6:	46a6      	mov	lr, r4
 8004bf8:	460a      	mov	r2, r1
 8004bfa:	fb91 f6f7 	sdiv	r6, r1, r7
 8004bfe:	fb07 1516 	mls	r5, r7, r6, r1
 8004c02:	3530      	adds	r5, #48	; 0x30
 8004c04:	2a63      	cmp	r2, #99	; 0x63
 8004c06:	f104 34ff 	add.w	r4, r4, #4294967295
 8004c0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004c0e:	4631      	mov	r1, r6
 8004c10:	dcf1      	bgt.n	8004bf6 <__exponent+0x22>
 8004c12:	3130      	adds	r1, #48	; 0x30
 8004c14:	f1ae 0502 	sub.w	r5, lr, #2
 8004c18:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004c1c:	1c44      	adds	r4, r0, #1
 8004c1e:	4629      	mov	r1, r5
 8004c20:	4561      	cmp	r1, ip
 8004c22:	d30a      	bcc.n	8004c3a <__exponent+0x66>
 8004c24:	f10d 0209 	add.w	r2, sp, #9
 8004c28:	eba2 020e 	sub.w	r2, r2, lr
 8004c2c:	4565      	cmp	r5, ip
 8004c2e:	bf88      	it	hi
 8004c30:	2200      	movhi	r2, #0
 8004c32:	4413      	add	r3, r2
 8004c34:	1a18      	subs	r0, r3, r0
 8004c36:	b003      	add	sp, #12
 8004c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004c42:	e7ed      	b.n	8004c20 <__exponent+0x4c>
 8004c44:	2330      	movs	r3, #48	; 0x30
 8004c46:	3130      	adds	r1, #48	; 0x30
 8004c48:	7083      	strb	r3, [r0, #2]
 8004c4a:	70c1      	strb	r1, [r0, #3]
 8004c4c:	1d03      	adds	r3, r0, #4
 8004c4e:	e7f1      	b.n	8004c34 <__exponent+0x60>

08004c50 <_printf_float>:
 8004c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c54:	ed2d 8b02 	vpush	{d8}
 8004c58:	b08d      	sub	sp, #52	; 0x34
 8004c5a:	460c      	mov	r4, r1
 8004c5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004c60:	4616      	mov	r6, r2
 8004c62:	461f      	mov	r7, r3
 8004c64:	4605      	mov	r5, r0
 8004c66:	f002 fe89 	bl	800797c <_localeconv_r>
 8004c6a:	f8d0 a000 	ldr.w	sl, [r0]
 8004c6e:	4650      	mov	r0, sl
 8004c70:	f7fb faae 	bl	80001d0 <strlen>
 8004c74:	2300      	movs	r3, #0
 8004c76:	930a      	str	r3, [sp, #40]	; 0x28
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	9305      	str	r3, [sp, #20]
 8004c7c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004c84:	3307      	adds	r3, #7
 8004c86:	f023 0307 	bic.w	r3, r3, #7
 8004c8a:	f103 0208 	add.w	r2, r3, #8
 8004c8e:	f8c8 2000 	str.w	r2, [r8]
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004c9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ca2:	9307      	str	r3, [sp, #28]
 8004ca4:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ca8:	ee08 0a10 	vmov	s16, r0
 8004cac:	4b9f      	ldr	r3, [pc, #636]	; (8004f2c <_printf_float+0x2dc>)
 8004cae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb6:	f7fb ff39 	bl	8000b2c <__aeabi_dcmpun>
 8004cba:	bb88      	cbnz	r0, 8004d20 <_printf_float+0xd0>
 8004cbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cc0:	4b9a      	ldr	r3, [pc, #616]	; (8004f2c <_printf_float+0x2dc>)
 8004cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc6:	f7fb ff13 	bl	8000af0 <__aeabi_dcmple>
 8004cca:	bb48      	cbnz	r0, 8004d20 <_printf_float+0xd0>
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2300      	movs	r3, #0
 8004cd0:	4640      	mov	r0, r8
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	f7fb ff02 	bl	8000adc <__aeabi_dcmplt>
 8004cd8:	b110      	cbz	r0, 8004ce0 <_printf_float+0x90>
 8004cda:	232d      	movs	r3, #45	; 0x2d
 8004cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ce0:	4b93      	ldr	r3, [pc, #588]	; (8004f30 <_printf_float+0x2e0>)
 8004ce2:	4894      	ldr	r0, [pc, #592]	; (8004f34 <_printf_float+0x2e4>)
 8004ce4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ce8:	bf94      	ite	ls
 8004cea:	4698      	movls	r8, r3
 8004cec:	4680      	movhi	r8, r0
 8004cee:	2303      	movs	r3, #3
 8004cf0:	6123      	str	r3, [r4, #16]
 8004cf2:	9b05      	ldr	r3, [sp, #20]
 8004cf4:	f023 0204 	bic.w	r2, r3, #4
 8004cf8:	6022      	str	r2, [r4, #0]
 8004cfa:	f04f 0900 	mov.w	r9, #0
 8004cfe:	9700      	str	r7, [sp, #0]
 8004d00:	4633      	mov	r3, r6
 8004d02:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d04:	4621      	mov	r1, r4
 8004d06:	4628      	mov	r0, r5
 8004d08:	f000 f9d8 	bl	80050bc <_printf_common>
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	f040 8090 	bne.w	8004e32 <_printf_float+0x1e2>
 8004d12:	f04f 30ff 	mov.w	r0, #4294967295
 8004d16:	b00d      	add	sp, #52	; 0x34
 8004d18:	ecbd 8b02 	vpop	{d8}
 8004d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d20:	4642      	mov	r2, r8
 8004d22:	464b      	mov	r3, r9
 8004d24:	4640      	mov	r0, r8
 8004d26:	4649      	mov	r1, r9
 8004d28:	f7fb ff00 	bl	8000b2c <__aeabi_dcmpun>
 8004d2c:	b140      	cbz	r0, 8004d40 <_printf_float+0xf0>
 8004d2e:	464b      	mov	r3, r9
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bfbc      	itt	lt
 8004d34:	232d      	movlt	r3, #45	; 0x2d
 8004d36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d3a:	487f      	ldr	r0, [pc, #508]	; (8004f38 <_printf_float+0x2e8>)
 8004d3c:	4b7f      	ldr	r3, [pc, #508]	; (8004f3c <_printf_float+0x2ec>)
 8004d3e:	e7d1      	b.n	8004ce4 <_printf_float+0x94>
 8004d40:	6863      	ldr	r3, [r4, #4]
 8004d42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004d46:	9206      	str	r2, [sp, #24]
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	d13f      	bne.n	8004dcc <_printf_float+0x17c>
 8004d4c:	2306      	movs	r3, #6
 8004d4e:	6063      	str	r3, [r4, #4]
 8004d50:	9b05      	ldr	r3, [sp, #20]
 8004d52:	6861      	ldr	r1, [r4, #4]
 8004d54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004d58:	2300      	movs	r3, #0
 8004d5a:	9303      	str	r3, [sp, #12]
 8004d5c:	ab0a      	add	r3, sp, #40	; 0x28
 8004d5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004d62:	ab09      	add	r3, sp, #36	; 0x24
 8004d64:	ec49 8b10 	vmov	d0, r8, r9
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	6022      	str	r2, [r4, #0]
 8004d6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d70:	4628      	mov	r0, r5
 8004d72:	f7ff fecd 	bl	8004b10 <__cvt>
 8004d76:	9b06      	ldr	r3, [sp, #24]
 8004d78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d7a:	2b47      	cmp	r3, #71	; 0x47
 8004d7c:	4680      	mov	r8, r0
 8004d7e:	d108      	bne.n	8004d92 <_printf_float+0x142>
 8004d80:	1cc8      	adds	r0, r1, #3
 8004d82:	db02      	blt.n	8004d8a <_printf_float+0x13a>
 8004d84:	6863      	ldr	r3, [r4, #4]
 8004d86:	4299      	cmp	r1, r3
 8004d88:	dd41      	ble.n	8004e0e <_printf_float+0x1be>
 8004d8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8004d8e:	fa5f fb8b 	uxtb.w	fp, fp
 8004d92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d96:	d820      	bhi.n	8004dda <_printf_float+0x18a>
 8004d98:	3901      	subs	r1, #1
 8004d9a:	465a      	mov	r2, fp
 8004d9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004da0:	9109      	str	r1, [sp, #36]	; 0x24
 8004da2:	f7ff ff17 	bl	8004bd4 <__exponent>
 8004da6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004da8:	1813      	adds	r3, r2, r0
 8004daa:	2a01      	cmp	r2, #1
 8004dac:	4681      	mov	r9, r0
 8004dae:	6123      	str	r3, [r4, #16]
 8004db0:	dc02      	bgt.n	8004db8 <_printf_float+0x168>
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	07d2      	lsls	r2, r2, #31
 8004db6:	d501      	bpl.n	8004dbc <_printf_float+0x16c>
 8004db8:	3301      	adds	r3, #1
 8004dba:	6123      	str	r3, [r4, #16]
 8004dbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d09c      	beq.n	8004cfe <_printf_float+0xae>
 8004dc4:	232d      	movs	r3, #45	; 0x2d
 8004dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dca:	e798      	b.n	8004cfe <_printf_float+0xae>
 8004dcc:	9a06      	ldr	r2, [sp, #24]
 8004dce:	2a47      	cmp	r2, #71	; 0x47
 8004dd0:	d1be      	bne.n	8004d50 <_printf_float+0x100>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1bc      	bne.n	8004d50 <_printf_float+0x100>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e7b9      	b.n	8004d4e <_printf_float+0xfe>
 8004dda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004dde:	d118      	bne.n	8004e12 <_printf_float+0x1c2>
 8004de0:	2900      	cmp	r1, #0
 8004de2:	6863      	ldr	r3, [r4, #4]
 8004de4:	dd0b      	ble.n	8004dfe <_printf_float+0x1ae>
 8004de6:	6121      	str	r1, [r4, #16]
 8004de8:	b913      	cbnz	r3, 8004df0 <_printf_float+0x1a0>
 8004dea:	6822      	ldr	r2, [r4, #0]
 8004dec:	07d0      	lsls	r0, r2, #31
 8004dee:	d502      	bpl.n	8004df6 <_printf_float+0x1a6>
 8004df0:	3301      	adds	r3, #1
 8004df2:	440b      	add	r3, r1
 8004df4:	6123      	str	r3, [r4, #16]
 8004df6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004df8:	f04f 0900 	mov.w	r9, #0
 8004dfc:	e7de      	b.n	8004dbc <_printf_float+0x16c>
 8004dfe:	b913      	cbnz	r3, 8004e06 <_printf_float+0x1b6>
 8004e00:	6822      	ldr	r2, [r4, #0]
 8004e02:	07d2      	lsls	r2, r2, #31
 8004e04:	d501      	bpl.n	8004e0a <_printf_float+0x1ba>
 8004e06:	3302      	adds	r3, #2
 8004e08:	e7f4      	b.n	8004df4 <_printf_float+0x1a4>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e7f2      	b.n	8004df4 <_printf_float+0x1a4>
 8004e0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e14:	4299      	cmp	r1, r3
 8004e16:	db05      	blt.n	8004e24 <_printf_float+0x1d4>
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	6121      	str	r1, [r4, #16]
 8004e1c:	07d8      	lsls	r0, r3, #31
 8004e1e:	d5ea      	bpl.n	8004df6 <_printf_float+0x1a6>
 8004e20:	1c4b      	adds	r3, r1, #1
 8004e22:	e7e7      	b.n	8004df4 <_printf_float+0x1a4>
 8004e24:	2900      	cmp	r1, #0
 8004e26:	bfd4      	ite	le
 8004e28:	f1c1 0202 	rsble	r2, r1, #2
 8004e2c:	2201      	movgt	r2, #1
 8004e2e:	4413      	add	r3, r2
 8004e30:	e7e0      	b.n	8004df4 <_printf_float+0x1a4>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	055a      	lsls	r2, r3, #21
 8004e36:	d407      	bmi.n	8004e48 <_printf_float+0x1f8>
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	4642      	mov	r2, r8
 8004e3c:	4631      	mov	r1, r6
 8004e3e:	4628      	mov	r0, r5
 8004e40:	47b8      	blx	r7
 8004e42:	3001      	adds	r0, #1
 8004e44:	d12c      	bne.n	8004ea0 <_printf_float+0x250>
 8004e46:	e764      	b.n	8004d12 <_printf_float+0xc2>
 8004e48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e4c:	f240 80e0 	bls.w	8005010 <_printf_float+0x3c0>
 8004e50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e54:	2200      	movs	r2, #0
 8004e56:	2300      	movs	r3, #0
 8004e58:	f7fb fe36 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d034      	beq.n	8004eca <_printf_float+0x27a>
 8004e60:	4a37      	ldr	r2, [pc, #220]	; (8004f40 <_printf_float+0x2f0>)
 8004e62:	2301      	movs	r3, #1
 8004e64:	4631      	mov	r1, r6
 8004e66:	4628      	mov	r0, r5
 8004e68:	47b8      	blx	r7
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	f43f af51 	beq.w	8004d12 <_printf_float+0xc2>
 8004e70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e74:	429a      	cmp	r2, r3
 8004e76:	db02      	blt.n	8004e7e <_printf_float+0x22e>
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	07d8      	lsls	r0, r3, #31
 8004e7c:	d510      	bpl.n	8004ea0 <_printf_float+0x250>
 8004e7e:	ee18 3a10 	vmov	r3, s16
 8004e82:	4652      	mov	r2, sl
 8004e84:	4631      	mov	r1, r6
 8004e86:	4628      	mov	r0, r5
 8004e88:	47b8      	blx	r7
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	f43f af41 	beq.w	8004d12 <_printf_float+0xc2>
 8004e90:	f04f 0800 	mov.w	r8, #0
 8004e94:	f104 091a 	add.w	r9, r4, #26
 8004e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	4543      	cmp	r3, r8
 8004e9e:	dc09      	bgt.n	8004eb4 <_printf_float+0x264>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	079b      	lsls	r3, r3, #30
 8004ea4:	f100 8105 	bmi.w	80050b2 <_printf_float+0x462>
 8004ea8:	68e0      	ldr	r0, [r4, #12]
 8004eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004eac:	4298      	cmp	r0, r3
 8004eae:	bfb8      	it	lt
 8004eb0:	4618      	movlt	r0, r3
 8004eb2:	e730      	b.n	8004d16 <_printf_float+0xc6>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	464a      	mov	r2, r9
 8004eb8:	4631      	mov	r1, r6
 8004eba:	4628      	mov	r0, r5
 8004ebc:	47b8      	blx	r7
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	f43f af27 	beq.w	8004d12 <_printf_float+0xc2>
 8004ec4:	f108 0801 	add.w	r8, r8, #1
 8004ec8:	e7e6      	b.n	8004e98 <_printf_float+0x248>
 8004eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dc39      	bgt.n	8004f44 <_printf_float+0x2f4>
 8004ed0:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <_printf_float+0x2f0>)
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	4631      	mov	r1, r6
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	47b8      	blx	r7
 8004eda:	3001      	adds	r0, #1
 8004edc:	f43f af19 	beq.w	8004d12 <_printf_float+0xc2>
 8004ee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	d102      	bne.n	8004eee <_printf_float+0x29e>
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	07d9      	lsls	r1, r3, #31
 8004eec:	d5d8      	bpl.n	8004ea0 <_printf_float+0x250>
 8004eee:	ee18 3a10 	vmov	r3, s16
 8004ef2:	4652      	mov	r2, sl
 8004ef4:	4631      	mov	r1, r6
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	47b8      	blx	r7
 8004efa:	3001      	adds	r0, #1
 8004efc:	f43f af09 	beq.w	8004d12 <_printf_float+0xc2>
 8004f00:	f04f 0900 	mov.w	r9, #0
 8004f04:	f104 0a1a 	add.w	sl, r4, #26
 8004f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f0a:	425b      	negs	r3, r3
 8004f0c:	454b      	cmp	r3, r9
 8004f0e:	dc01      	bgt.n	8004f14 <_printf_float+0x2c4>
 8004f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f12:	e792      	b.n	8004e3a <_printf_float+0x1ea>
 8004f14:	2301      	movs	r3, #1
 8004f16:	4652      	mov	r2, sl
 8004f18:	4631      	mov	r1, r6
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	47b8      	blx	r7
 8004f1e:	3001      	adds	r0, #1
 8004f20:	f43f aef7 	beq.w	8004d12 <_printf_float+0xc2>
 8004f24:	f109 0901 	add.w	r9, r9, #1
 8004f28:	e7ee      	b.n	8004f08 <_printf_float+0x2b8>
 8004f2a:	bf00      	nop
 8004f2c:	7fefffff 	.word	0x7fefffff
 8004f30:	0800a298 	.word	0x0800a298
 8004f34:	0800a29c 	.word	0x0800a29c
 8004f38:	0800a2a4 	.word	0x0800a2a4
 8004f3c:	0800a2a0 	.word	0x0800a2a0
 8004f40:	0800a2a8 	.word	0x0800a2a8
 8004f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	bfa8      	it	ge
 8004f4c:	461a      	movge	r2, r3
 8004f4e:	2a00      	cmp	r2, #0
 8004f50:	4691      	mov	r9, r2
 8004f52:	dc37      	bgt.n	8004fc4 <_printf_float+0x374>
 8004f54:	f04f 0b00 	mov.w	fp, #0
 8004f58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f5c:	f104 021a 	add.w	r2, r4, #26
 8004f60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f62:	9305      	str	r3, [sp, #20]
 8004f64:	eba3 0309 	sub.w	r3, r3, r9
 8004f68:	455b      	cmp	r3, fp
 8004f6a:	dc33      	bgt.n	8004fd4 <_printf_float+0x384>
 8004f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f70:	429a      	cmp	r2, r3
 8004f72:	db3b      	blt.n	8004fec <_printf_float+0x39c>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	07da      	lsls	r2, r3, #31
 8004f78:	d438      	bmi.n	8004fec <_printf_float+0x39c>
 8004f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f7c:	9a05      	ldr	r2, [sp, #20]
 8004f7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f80:	1a9a      	subs	r2, r3, r2
 8004f82:	eba3 0901 	sub.w	r9, r3, r1
 8004f86:	4591      	cmp	r9, r2
 8004f88:	bfa8      	it	ge
 8004f8a:	4691      	movge	r9, r2
 8004f8c:	f1b9 0f00 	cmp.w	r9, #0
 8004f90:	dc35      	bgt.n	8004ffe <_printf_float+0x3ae>
 8004f92:	f04f 0800 	mov.w	r8, #0
 8004f96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f9a:	f104 0a1a 	add.w	sl, r4, #26
 8004f9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	eba3 0309 	sub.w	r3, r3, r9
 8004fa8:	4543      	cmp	r3, r8
 8004faa:	f77f af79 	ble.w	8004ea0 <_printf_float+0x250>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4652      	mov	r2, sl
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	47b8      	blx	r7
 8004fb8:	3001      	adds	r0, #1
 8004fba:	f43f aeaa 	beq.w	8004d12 <_printf_float+0xc2>
 8004fbe:	f108 0801 	add.w	r8, r8, #1
 8004fc2:	e7ec      	b.n	8004f9e <_printf_float+0x34e>
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	4642      	mov	r2, r8
 8004fca:	4628      	mov	r0, r5
 8004fcc:	47b8      	blx	r7
 8004fce:	3001      	adds	r0, #1
 8004fd0:	d1c0      	bne.n	8004f54 <_printf_float+0x304>
 8004fd2:	e69e      	b.n	8004d12 <_printf_float+0xc2>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	4631      	mov	r1, r6
 8004fd8:	4628      	mov	r0, r5
 8004fda:	9205      	str	r2, [sp, #20]
 8004fdc:	47b8      	blx	r7
 8004fde:	3001      	adds	r0, #1
 8004fe0:	f43f ae97 	beq.w	8004d12 <_printf_float+0xc2>
 8004fe4:	9a05      	ldr	r2, [sp, #20]
 8004fe6:	f10b 0b01 	add.w	fp, fp, #1
 8004fea:	e7b9      	b.n	8004f60 <_printf_float+0x310>
 8004fec:	ee18 3a10 	vmov	r3, s16
 8004ff0:	4652      	mov	r2, sl
 8004ff2:	4631      	mov	r1, r6
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	47b8      	blx	r7
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	d1be      	bne.n	8004f7a <_printf_float+0x32a>
 8004ffc:	e689      	b.n	8004d12 <_printf_float+0xc2>
 8004ffe:	9a05      	ldr	r2, [sp, #20]
 8005000:	464b      	mov	r3, r9
 8005002:	4442      	add	r2, r8
 8005004:	4631      	mov	r1, r6
 8005006:	4628      	mov	r0, r5
 8005008:	47b8      	blx	r7
 800500a:	3001      	adds	r0, #1
 800500c:	d1c1      	bne.n	8004f92 <_printf_float+0x342>
 800500e:	e680      	b.n	8004d12 <_printf_float+0xc2>
 8005010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005012:	2a01      	cmp	r2, #1
 8005014:	dc01      	bgt.n	800501a <_printf_float+0x3ca>
 8005016:	07db      	lsls	r3, r3, #31
 8005018:	d538      	bpl.n	800508c <_printf_float+0x43c>
 800501a:	2301      	movs	r3, #1
 800501c:	4642      	mov	r2, r8
 800501e:	4631      	mov	r1, r6
 8005020:	4628      	mov	r0, r5
 8005022:	47b8      	blx	r7
 8005024:	3001      	adds	r0, #1
 8005026:	f43f ae74 	beq.w	8004d12 <_printf_float+0xc2>
 800502a:	ee18 3a10 	vmov	r3, s16
 800502e:	4652      	mov	r2, sl
 8005030:	4631      	mov	r1, r6
 8005032:	4628      	mov	r0, r5
 8005034:	47b8      	blx	r7
 8005036:	3001      	adds	r0, #1
 8005038:	f43f ae6b 	beq.w	8004d12 <_printf_float+0xc2>
 800503c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005040:	2200      	movs	r2, #0
 8005042:	2300      	movs	r3, #0
 8005044:	f7fb fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 8005048:	b9d8      	cbnz	r0, 8005082 <_printf_float+0x432>
 800504a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800504c:	f108 0201 	add.w	r2, r8, #1
 8005050:	3b01      	subs	r3, #1
 8005052:	4631      	mov	r1, r6
 8005054:	4628      	mov	r0, r5
 8005056:	47b8      	blx	r7
 8005058:	3001      	adds	r0, #1
 800505a:	d10e      	bne.n	800507a <_printf_float+0x42a>
 800505c:	e659      	b.n	8004d12 <_printf_float+0xc2>
 800505e:	2301      	movs	r3, #1
 8005060:	4652      	mov	r2, sl
 8005062:	4631      	mov	r1, r6
 8005064:	4628      	mov	r0, r5
 8005066:	47b8      	blx	r7
 8005068:	3001      	adds	r0, #1
 800506a:	f43f ae52 	beq.w	8004d12 <_printf_float+0xc2>
 800506e:	f108 0801 	add.w	r8, r8, #1
 8005072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005074:	3b01      	subs	r3, #1
 8005076:	4543      	cmp	r3, r8
 8005078:	dcf1      	bgt.n	800505e <_printf_float+0x40e>
 800507a:	464b      	mov	r3, r9
 800507c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005080:	e6dc      	b.n	8004e3c <_printf_float+0x1ec>
 8005082:	f04f 0800 	mov.w	r8, #0
 8005086:	f104 0a1a 	add.w	sl, r4, #26
 800508a:	e7f2      	b.n	8005072 <_printf_float+0x422>
 800508c:	2301      	movs	r3, #1
 800508e:	4642      	mov	r2, r8
 8005090:	e7df      	b.n	8005052 <_printf_float+0x402>
 8005092:	2301      	movs	r3, #1
 8005094:	464a      	mov	r2, r9
 8005096:	4631      	mov	r1, r6
 8005098:	4628      	mov	r0, r5
 800509a:	47b8      	blx	r7
 800509c:	3001      	adds	r0, #1
 800509e:	f43f ae38 	beq.w	8004d12 <_printf_float+0xc2>
 80050a2:	f108 0801 	add.w	r8, r8, #1
 80050a6:	68e3      	ldr	r3, [r4, #12]
 80050a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050aa:	1a5b      	subs	r3, r3, r1
 80050ac:	4543      	cmp	r3, r8
 80050ae:	dcf0      	bgt.n	8005092 <_printf_float+0x442>
 80050b0:	e6fa      	b.n	8004ea8 <_printf_float+0x258>
 80050b2:	f04f 0800 	mov.w	r8, #0
 80050b6:	f104 0919 	add.w	r9, r4, #25
 80050ba:	e7f4      	b.n	80050a6 <_printf_float+0x456>

080050bc <_printf_common>:
 80050bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c0:	4616      	mov	r6, r2
 80050c2:	4699      	mov	r9, r3
 80050c4:	688a      	ldr	r2, [r1, #8]
 80050c6:	690b      	ldr	r3, [r1, #16]
 80050c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050cc:	4293      	cmp	r3, r2
 80050ce:	bfb8      	it	lt
 80050d0:	4613      	movlt	r3, r2
 80050d2:	6033      	str	r3, [r6, #0]
 80050d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050d8:	4607      	mov	r7, r0
 80050da:	460c      	mov	r4, r1
 80050dc:	b10a      	cbz	r2, 80050e2 <_printf_common+0x26>
 80050de:	3301      	adds	r3, #1
 80050e0:	6033      	str	r3, [r6, #0]
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	0699      	lsls	r1, r3, #26
 80050e6:	bf42      	ittt	mi
 80050e8:	6833      	ldrmi	r3, [r6, #0]
 80050ea:	3302      	addmi	r3, #2
 80050ec:	6033      	strmi	r3, [r6, #0]
 80050ee:	6825      	ldr	r5, [r4, #0]
 80050f0:	f015 0506 	ands.w	r5, r5, #6
 80050f4:	d106      	bne.n	8005104 <_printf_common+0x48>
 80050f6:	f104 0a19 	add.w	sl, r4, #25
 80050fa:	68e3      	ldr	r3, [r4, #12]
 80050fc:	6832      	ldr	r2, [r6, #0]
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	42ab      	cmp	r3, r5
 8005102:	dc26      	bgt.n	8005152 <_printf_common+0x96>
 8005104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005108:	1e13      	subs	r3, r2, #0
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	bf18      	it	ne
 800510e:	2301      	movne	r3, #1
 8005110:	0692      	lsls	r2, r2, #26
 8005112:	d42b      	bmi.n	800516c <_printf_common+0xb0>
 8005114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005118:	4649      	mov	r1, r9
 800511a:	4638      	mov	r0, r7
 800511c:	47c0      	blx	r8
 800511e:	3001      	adds	r0, #1
 8005120:	d01e      	beq.n	8005160 <_printf_common+0xa4>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	68e5      	ldr	r5, [r4, #12]
 8005126:	6832      	ldr	r2, [r6, #0]
 8005128:	f003 0306 	and.w	r3, r3, #6
 800512c:	2b04      	cmp	r3, #4
 800512e:	bf08      	it	eq
 8005130:	1aad      	subeq	r5, r5, r2
 8005132:	68a3      	ldr	r3, [r4, #8]
 8005134:	6922      	ldr	r2, [r4, #16]
 8005136:	bf0c      	ite	eq
 8005138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800513c:	2500      	movne	r5, #0
 800513e:	4293      	cmp	r3, r2
 8005140:	bfc4      	itt	gt
 8005142:	1a9b      	subgt	r3, r3, r2
 8005144:	18ed      	addgt	r5, r5, r3
 8005146:	2600      	movs	r6, #0
 8005148:	341a      	adds	r4, #26
 800514a:	42b5      	cmp	r5, r6
 800514c:	d11a      	bne.n	8005184 <_printf_common+0xc8>
 800514e:	2000      	movs	r0, #0
 8005150:	e008      	b.n	8005164 <_printf_common+0xa8>
 8005152:	2301      	movs	r3, #1
 8005154:	4652      	mov	r2, sl
 8005156:	4649      	mov	r1, r9
 8005158:	4638      	mov	r0, r7
 800515a:	47c0      	blx	r8
 800515c:	3001      	adds	r0, #1
 800515e:	d103      	bne.n	8005168 <_printf_common+0xac>
 8005160:	f04f 30ff 	mov.w	r0, #4294967295
 8005164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005168:	3501      	adds	r5, #1
 800516a:	e7c6      	b.n	80050fa <_printf_common+0x3e>
 800516c:	18e1      	adds	r1, r4, r3
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	2030      	movs	r0, #48	; 0x30
 8005172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005176:	4422      	add	r2, r4
 8005178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800517c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005180:	3302      	adds	r3, #2
 8005182:	e7c7      	b.n	8005114 <_printf_common+0x58>
 8005184:	2301      	movs	r3, #1
 8005186:	4622      	mov	r2, r4
 8005188:	4649      	mov	r1, r9
 800518a:	4638      	mov	r0, r7
 800518c:	47c0      	blx	r8
 800518e:	3001      	adds	r0, #1
 8005190:	d0e6      	beq.n	8005160 <_printf_common+0xa4>
 8005192:	3601      	adds	r6, #1
 8005194:	e7d9      	b.n	800514a <_printf_common+0x8e>
	...

08005198 <_printf_i>:
 8005198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800519c:	7e0f      	ldrb	r7, [r1, #24]
 800519e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051a0:	2f78      	cmp	r7, #120	; 0x78
 80051a2:	4691      	mov	r9, r2
 80051a4:	4680      	mov	r8, r0
 80051a6:	460c      	mov	r4, r1
 80051a8:	469a      	mov	sl, r3
 80051aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051ae:	d807      	bhi.n	80051c0 <_printf_i+0x28>
 80051b0:	2f62      	cmp	r7, #98	; 0x62
 80051b2:	d80a      	bhi.n	80051ca <_printf_i+0x32>
 80051b4:	2f00      	cmp	r7, #0
 80051b6:	f000 80d8 	beq.w	800536a <_printf_i+0x1d2>
 80051ba:	2f58      	cmp	r7, #88	; 0x58
 80051bc:	f000 80a3 	beq.w	8005306 <_printf_i+0x16e>
 80051c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051c8:	e03a      	b.n	8005240 <_printf_i+0xa8>
 80051ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051ce:	2b15      	cmp	r3, #21
 80051d0:	d8f6      	bhi.n	80051c0 <_printf_i+0x28>
 80051d2:	a101      	add	r1, pc, #4	; (adr r1, 80051d8 <_printf_i+0x40>)
 80051d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051d8:	08005231 	.word	0x08005231
 80051dc:	08005245 	.word	0x08005245
 80051e0:	080051c1 	.word	0x080051c1
 80051e4:	080051c1 	.word	0x080051c1
 80051e8:	080051c1 	.word	0x080051c1
 80051ec:	080051c1 	.word	0x080051c1
 80051f0:	08005245 	.word	0x08005245
 80051f4:	080051c1 	.word	0x080051c1
 80051f8:	080051c1 	.word	0x080051c1
 80051fc:	080051c1 	.word	0x080051c1
 8005200:	080051c1 	.word	0x080051c1
 8005204:	08005351 	.word	0x08005351
 8005208:	08005275 	.word	0x08005275
 800520c:	08005333 	.word	0x08005333
 8005210:	080051c1 	.word	0x080051c1
 8005214:	080051c1 	.word	0x080051c1
 8005218:	08005373 	.word	0x08005373
 800521c:	080051c1 	.word	0x080051c1
 8005220:	08005275 	.word	0x08005275
 8005224:	080051c1 	.word	0x080051c1
 8005228:	080051c1 	.word	0x080051c1
 800522c:	0800533b 	.word	0x0800533b
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	1d1a      	adds	r2, r3, #4
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	602a      	str	r2, [r5, #0]
 8005238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800523c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005240:	2301      	movs	r3, #1
 8005242:	e0a3      	b.n	800538c <_printf_i+0x1f4>
 8005244:	6820      	ldr	r0, [r4, #0]
 8005246:	6829      	ldr	r1, [r5, #0]
 8005248:	0606      	lsls	r6, r0, #24
 800524a:	f101 0304 	add.w	r3, r1, #4
 800524e:	d50a      	bpl.n	8005266 <_printf_i+0xce>
 8005250:	680e      	ldr	r6, [r1, #0]
 8005252:	602b      	str	r3, [r5, #0]
 8005254:	2e00      	cmp	r6, #0
 8005256:	da03      	bge.n	8005260 <_printf_i+0xc8>
 8005258:	232d      	movs	r3, #45	; 0x2d
 800525a:	4276      	negs	r6, r6
 800525c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005260:	485e      	ldr	r0, [pc, #376]	; (80053dc <_printf_i+0x244>)
 8005262:	230a      	movs	r3, #10
 8005264:	e019      	b.n	800529a <_printf_i+0x102>
 8005266:	680e      	ldr	r6, [r1, #0]
 8005268:	602b      	str	r3, [r5, #0]
 800526a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800526e:	bf18      	it	ne
 8005270:	b236      	sxthne	r6, r6
 8005272:	e7ef      	b.n	8005254 <_printf_i+0xbc>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	6820      	ldr	r0, [r4, #0]
 8005278:	1d19      	adds	r1, r3, #4
 800527a:	6029      	str	r1, [r5, #0]
 800527c:	0601      	lsls	r1, r0, #24
 800527e:	d501      	bpl.n	8005284 <_printf_i+0xec>
 8005280:	681e      	ldr	r6, [r3, #0]
 8005282:	e002      	b.n	800528a <_printf_i+0xf2>
 8005284:	0646      	lsls	r6, r0, #25
 8005286:	d5fb      	bpl.n	8005280 <_printf_i+0xe8>
 8005288:	881e      	ldrh	r6, [r3, #0]
 800528a:	4854      	ldr	r0, [pc, #336]	; (80053dc <_printf_i+0x244>)
 800528c:	2f6f      	cmp	r7, #111	; 0x6f
 800528e:	bf0c      	ite	eq
 8005290:	2308      	moveq	r3, #8
 8005292:	230a      	movne	r3, #10
 8005294:	2100      	movs	r1, #0
 8005296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800529a:	6865      	ldr	r5, [r4, #4]
 800529c:	60a5      	str	r5, [r4, #8]
 800529e:	2d00      	cmp	r5, #0
 80052a0:	bfa2      	ittt	ge
 80052a2:	6821      	ldrge	r1, [r4, #0]
 80052a4:	f021 0104 	bicge.w	r1, r1, #4
 80052a8:	6021      	strge	r1, [r4, #0]
 80052aa:	b90e      	cbnz	r6, 80052b0 <_printf_i+0x118>
 80052ac:	2d00      	cmp	r5, #0
 80052ae:	d04d      	beq.n	800534c <_printf_i+0x1b4>
 80052b0:	4615      	mov	r5, r2
 80052b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80052b6:	fb03 6711 	mls	r7, r3, r1, r6
 80052ba:	5dc7      	ldrb	r7, [r0, r7]
 80052bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052c0:	4637      	mov	r7, r6
 80052c2:	42bb      	cmp	r3, r7
 80052c4:	460e      	mov	r6, r1
 80052c6:	d9f4      	bls.n	80052b2 <_printf_i+0x11a>
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d10b      	bne.n	80052e4 <_printf_i+0x14c>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	07de      	lsls	r6, r3, #31
 80052d0:	d508      	bpl.n	80052e4 <_printf_i+0x14c>
 80052d2:	6923      	ldr	r3, [r4, #16]
 80052d4:	6861      	ldr	r1, [r4, #4]
 80052d6:	4299      	cmp	r1, r3
 80052d8:	bfde      	ittt	le
 80052da:	2330      	movle	r3, #48	; 0x30
 80052dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052e4:	1b52      	subs	r2, r2, r5
 80052e6:	6122      	str	r2, [r4, #16]
 80052e8:	f8cd a000 	str.w	sl, [sp]
 80052ec:	464b      	mov	r3, r9
 80052ee:	aa03      	add	r2, sp, #12
 80052f0:	4621      	mov	r1, r4
 80052f2:	4640      	mov	r0, r8
 80052f4:	f7ff fee2 	bl	80050bc <_printf_common>
 80052f8:	3001      	adds	r0, #1
 80052fa:	d14c      	bne.n	8005396 <_printf_i+0x1fe>
 80052fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005300:	b004      	add	sp, #16
 8005302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005306:	4835      	ldr	r0, [pc, #212]	; (80053dc <_printf_i+0x244>)
 8005308:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800530c:	6829      	ldr	r1, [r5, #0]
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	f851 6b04 	ldr.w	r6, [r1], #4
 8005314:	6029      	str	r1, [r5, #0]
 8005316:	061d      	lsls	r5, r3, #24
 8005318:	d514      	bpl.n	8005344 <_printf_i+0x1ac>
 800531a:	07df      	lsls	r7, r3, #31
 800531c:	bf44      	itt	mi
 800531e:	f043 0320 	orrmi.w	r3, r3, #32
 8005322:	6023      	strmi	r3, [r4, #0]
 8005324:	b91e      	cbnz	r6, 800532e <_printf_i+0x196>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	f023 0320 	bic.w	r3, r3, #32
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	2310      	movs	r3, #16
 8005330:	e7b0      	b.n	8005294 <_printf_i+0xfc>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	f043 0320 	orr.w	r3, r3, #32
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	2378      	movs	r3, #120	; 0x78
 800533c:	4828      	ldr	r0, [pc, #160]	; (80053e0 <_printf_i+0x248>)
 800533e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005342:	e7e3      	b.n	800530c <_printf_i+0x174>
 8005344:	0659      	lsls	r1, r3, #25
 8005346:	bf48      	it	mi
 8005348:	b2b6      	uxthmi	r6, r6
 800534a:	e7e6      	b.n	800531a <_printf_i+0x182>
 800534c:	4615      	mov	r5, r2
 800534e:	e7bb      	b.n	80052c8 <_printf_i+0x130>
 8005350:	682b      	ldr	r3, [r5, #0]
 8005352:	6826      	ldr	r6, [r4, #0]
 8005354:	6961      	ldr	r1, [r4, #20]
 8005356:	1d18      	adds	r0, r3, #4
 8005358:	6028      	str	r0, [r5, #0]
 800535a:	0635      	lsls	r5, r6, #24
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	d501      	bpl.n	8005364 <_printf_i+0x1cc>
 8005360:	6019      	str	r1, [r3, #0]
 8005362:	e002      	b.n	800536a <_printf_i+0x1d2>
 8005364:	0670      	lsls	r0, r6, #25
 8005366:	d5fb      	bpl.n	8005360 <_printf_i+0x1c8>
 8005368:	8019      	strh	r1, [r3, #0]
 800536a:	2300      	movs	r3, #0
 800536c:	6123      	str	r3, [r4, #16]
 800536e:	4615      	mov	r5, r2
 8005370:	e7ba      	b.n	80052e8 <_printf_i+0x150>
 8005372:	682b      	ldr	r3, [r5, #0]
 8005374:	1d1a      	adds	r2, r3, #4
 8005376:	602a      	str	r2, [r5, #0]
 8005378:	681d      	ldr	r5, [r3, #0]
 800537a:	6862      	ldr	r2, [r4, #4]
 800537c:	2100      	movs	r1, #0
 800537e:	4628      	mov	r0, r5
 8005380:	f7fa ff2e 	bl	80001e0 <memchr>
 8005384:	b108      	cbz	r0, 800538a <_printf_i+0x1f2>
 8005386:	1b40      	subs	r0, r0, r5
 8005388:	6060      	str	r0, [r4, #4]
 800538a:	6863      	ldr	r3, [r4, #4]
 800538c:	6123      	str	r3, [r4, #16]
 800538e:	2300      	movs	r3, #0
 8005390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005394:	e7a8      	b.n	80052e8 <_printf_i+0x150>
 8005396:	6923      	ldr	r3, [r4, #16]
 8005398:	462a      	mov	r2, r5
 800539a:	4649      	mov	r1, r9
 800539c:	4640      	mov	r0, r8
 800539e:	47d0      	blx	sl
 80053a0:	3001      	adds	r0, #1
 80053a2:	d0ab      	beq.n	80052fc <_printf_i+0x164>
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	079b      	lsls	r3, r3, #30
 80053a8:	d413      	bmi.n	80053d2 <_printf_i+0x23a>
 80053aa:	68e0      	ldr	r0, [r4, #12]
 80053ac:	9b03      	ldr	r3, [sp, #12]
 80053ae:	4298      	cmp	r0, r3
 80053b0:	bfb8      	it	lt
 80053b2:	4618      	movlt	r0, r3
 80053b4:	e7a4      	b.n	8005300 <_printf_i+0x168>
 80053b6:	2301      	movs	r3, #1
 80053b8:	4632      	mov	r2, r6
 80053ba:	4649      	mov	r1, r9
 80053bc:	4640      	mov	r0, r8
 80053be:	47d0      	blx	sl
 80053c0:	3001      	adds	r0, #1
 80053c2:	d09b      	beq.n	80052fc <_printf_i+0x164>
 80053c4:	3501      	adds	r5, #1
 80053c6:	68e3      	ldr	r3, [r4, #12]
 80053c8:	9903      	ldr	r1, [sp, #12]
 80053ca:	1a5b      	subs	r3, r3, r1
 80053cc:	42ab      	cmp	r3, r5
 80053ce:	dcf2      	bgt.n	80053b6 <_printf_i+0x21e>
 80053d0:	e7eb      	b.n	80053aa <_printf_i+0x212>
 80053d2:	2500      	movs	r5, #0
 80053d4:	f104 0619 	add.w	r6, r4, #25
 80053d8:	e7f5      	b.n	80053c6 <_printf_i+0x22e>
 80053da:	bf00      	nop
 80053dc:	0800a2aa 	.word	0x0800a2aa
 80053e0:	0800a2bb 	.word	0x0800a2bb

080053e4 <_scanf_float>:
 80053e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e8:	b087      	sub	sp, #28
 80053ea:	4617      	mov	r7, r2
 80053ec:	9303      	str	r3, [sp, #12]
 80053ee:	688b      	ldr	r3, [r1, #8]
 80053f0:	1e5a      	subs	r2, r3, #1
 80053f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80053f6:	bf83      	ittte	hi
 80053f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80053fc:	195b      	addhi	r3, r3, r5
 80053fe:	9302      	strhi	r3, [sp, #8]
 8005400:	2300      	movls	r3, #0
 8005402:	bf86      	itte	hi
 8005404:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005408:	608b      	strhi	r3, [r1, #8]
 800540a:	9302      	strls	r3, [sp, #8]
 800540c:	680b      	ldr	r3, [r1, #0]
 800540e:	468b      	mov	fp, r1
 8005410:	2500      	movs	r5, #0
 8005412:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005416:	f84b 3b1c 	str.w	r3, [fp], #28
 800541a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800541e:	4680      	mov	r8, r0
 8005420:	460c      	mov	r4, r1
 8005422:	465e      	mov	r6, fp
 8005424:	46aa      	mov	sl, r5
 8005426:	46a9      	mov	r9, r5
 8005428:	9501      	str	r5, [sp, #4]
 800542a:	68a2      	ldr	r2, [r4, #8]
 800542c:	b152      	cbz	r2, 8005444 <_scanf_float+0x60>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b4e      	cmp	r3, #78	; 0x4e
 8005434:	d864      	bhi.n	8005500 <_scanf_float+0x11c>
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d83c      	bhi.n	80054b4 <_scanf_float+0xd0>
 800543a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800543e:	b2c8      	uxtb	r0, r1
 8005440:	280e      	cmp	r0, #14
 8005442:	d93a      	bls.n	80054ba <_scanf_float+0xd6>
 8005444:	f1b9 0f00 	cmp.w	r9, #0
 8005448:	d003      	beq.n	8005452 <_scanf_float+0x6e>
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005456:	f1ba 0f01 	cmp.w	sl, #1
 800545a:	f200 8113 	bhi.w	8005684 <_scanf_float+0x2a0>
 800545e:	455e      	cmp	r6, fp
 8005460:	f200 8105 	bhi.w	800566e <_scanf_float+0x28a>
 8005464:	2501      	movs	r5, #1
 8005466:	4628      	mov	r0, r5
 8005468:	b007      	add	sp, #28
 800546a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800546e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005472:	2a0d      	cmp	r2, #13
 8005474:	d8e6      	bhi.n	8005444 <_scanf_float+0x60>
 8005476:	a101      	add	r1, pc, #4	; (adr r1, 800547c <_scanf_float+0x98>)
 8005478:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800547c:	080055bb 	.word	0x080055bb
 8005480:	08005445 	.word	0x08005445
 8005484:	08005445 	.word	0x08005445
 8005488:	08005445 	.word	0x08005445
 800548c:	0800561b 	.word	0x0800561b
 8005490:	080055f3 	.word	0x080055f3
 8005494:	08005445 	.word	0x08005445
 8005498:	08005445 	.word	0x08005445
 800549c:	080055c9 	.word	0x080055c9
 80054a0:	08005445 	.word	0x08005445
 80054a4:	08005445 	.word	0x08005445
 80054a8:	08005445 	.word	0x08005445
 80054ac:	08005445 	.word	0x08005445
 80054b0:	08005581 	.word	0x08005581
 80054b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80054b8:	e7db      	b.n	8005472 <_scanf_float+0x8e>
 80054ba:	290e      	cmp	r1, #14
 80054bc:	d8c2      	bhi.n	8005444 <_scanf_float+0x60>
 80054be:	a001      	add	r0, pc, #4	; (adr r0, 80054c4 <_scanf_float+0xe0>)
 80054c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80054c4:	08005573 	.word	0x08005573
 80054c8:	08005445 	.word	0x08005445
 80054cc:	08005573 	.word	0x08005573
 80054d0:	08005607 	.word	0x08005607
 80054d4:	08005445 	.word	0x08005445
 80054d8:	08005521 	.word	0x08005521
 80054dc:	0800555d 	.word	0x0800555d
 80054e0:	0800555d 	.word	0x0800555d
 80054e4:	0800555d 	.word	0x0800555d
 80054e8:	0800555d 	.word	0x0800555d
 80054ec:	0800555d 	.word	0x0800555d
 80054f0:	0800555d 	.word	0x0800555d
 80054f4:	0800555d 	.word	0x0800555d
 80054f8:	0800555d 	.word	0x0800555d
 80054fc:	0800555d 	.word	0x0800555d
 8005500:	2b6e      	cmp	r3, #110	; 0x6e
 8005502:	d809      	bhi.n	8005518 <_scanf_float+0x134>
 8005504:	2b60      	cmp	r3, #96	; 0x60
 8005506:	d8b2      	bhi.n	800546e <_scanf_float+0x8a>
 8005508:	2b54      	cmp	r3, #84	; 0x54
 800550a:	d077      	beq.n	80055fc <_scanf_float+0x218>
 800550c:	2b59      	cmp	r3, #89	; 0x59
 800550e:	d199      	bne.n	8005444 <_scanf_float+0x60>
 8005510:	2d07      	cmp	r5, #7
 8005512:	d197      	bne.n	8005444 <_scanf_float+0x60>
 8005514:	2508      	movs	r5, #8
 8005516:	e029      	b.n	800556c <_scanf_float+0x188>
 8005518:	2b74      	cmp	r3, #116	; 0x74
 800551a:	d06f      	beq.n	80055fc <_scanf_float+0x218>
 800551c:	2b79      	cmp	r3, #121	; 0x79
 800551e:	e7f6      	b.n	800550e <_scanf_float+0x12a>
 8005520:	6821      	ldr	r1, [r4, #0]
 8005522:	05c8      	lsls	r0, r1, #23
 8005524:	d51a      	bpl.n	800555c <_scanf_float+0x178>
 8005526:	9b02      	ldr	r3, [sp, #8]
 8005528:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800552c:	6021      	str	r1, [r4, #0]
 800552e:	f109 0901 	add.w	r9, r9, #1
 8005532:	b11b      	cbz	r3, 800553c <_scanf_float+0x158>
 8005534:	3b01      	subs	r3, #1
 8005536:	3201      	adds	r2, #1
 8005538:	9302      	str	r3, [sp, #8]
 800553a:	60a2      	str	r2, [r4, #8]
 800553c:	68a3      	ldr	r3, [r4, #8]
 800553e:	3b01      	subs	r3, #1
 8005540:	60a3      	str	r3, [r4, #8]
 8005542:	6923      	ldr	r3, [r4, #16]
 8005544:	3301      	adds	r3, #1
 8005546:	6123      	str	r3, [r4, #16]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3b01      	subs	r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	607b      	str	r3, [r7, #4]
 8005550:	f340 8084 	ble.w	800565c <_scanf_float+0x278>
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	3301      	adds	r3, #1
 8005558:	603b      	str	r3, [r7, #0]
 800555a:	e766      	b.n	800542a <_scanf_float+0x46>
 800555c:	eb1a 0f05 	cmn.w	sl, r5
 8005560:	f47f af70 	bne.w	8005444 <_scanf_float+0x60>
 8005564:	6822      	ldr	r2, [r4, #0]
 8005566:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800556a:	6022      	str	r2, [r4, #0]
 800556c:	f806 3b01 	strb.w	r3, [r6], #1
 8005570:	e7e4      	b.n	800553c <_scanf_float+0x158>
 8005572:	6822      	ldr	r2, [r4, #0]
 8005574:	0610      	lsls	r0, r2, #24
 8005576:	f57f af65 	bpl.w	8005444 <_scanf_float+0x60>
 800557a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800557e:	e7f4      	b.n	800556a <_scanf_float+0x186>
 8005580:	f1ba 0f00 	cmp.w	sl, #0
 8005584:	d10e      	bne.n	80055a4 <_scanf_float+0x1c0>
 8005586:	f1b9 0f00 	cmp.w	r9, #0
 800558a:	d10e      	bne.n	80055aa <_scanf_float+0x1c6>
 800558c:	6822      	ldr	r2, [r4, #0]
 800558e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005592:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005596:	d108      	bne.n	80055aa <_scanf_float+0x1c6>
 8005598:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800559c:	6022      	str	r2, [r4, #0]
 800559e:	f04f 0a01 	mov.w	sl, #1
 80055a2:	e7e3      	b.n	800556c <_scanf_float+0x188>
 80055a4:	f1ba 0f02 	cmp.w	sl, #2
 80055a8:	d055      	beq.n	8005656 <_scanf_float+0x272>
 80055aa:	2d01      	cmp	r5, #1
 80055ac:	d002      	beq.n	80055b4 <_scanf_float+0x1d0>
 80055ae:	2d04      	cmp	r5, #4
 80055b0:	f47f af48 	bne.w	8005444 <_scanf_float+0x60>
 80055b4:	3501      	adds	r5, #1
 80055b6:	b2ed      	uxtb	r5, r5
 80055b8:	e7d8      	b.n	800556c <_scanf_float+0x188>
 80055ba:	f1ba 0f01 	cmp.w	sl, #1
 80055be:	f47f af41 	bne.w	8005444 <_scanf_float+0x60>
 80055c2:	f04f 0a02 	mov.w	sl, #2
 80055c6:	e7d1      	b.n	800556c <_scanf_float+0x188>
 80055c8:	b97d      	cbnz	r5, 80055ea <_scanf_float+0x206>
 80055ca:	f1b9 0f00 	cmp.w	r9, #0
 80055ce:	f47f af3c 	bne.w	800544a <_scanf_float+0x66>
 80055d2:	6822      	ldr	r2, [r4, #0]
 80055d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80055d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80055dc:	f47f af39 	bne.w	8005452 <_scanf_float+0x6e>
 80055e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055e4:	6022      	str	r2, [r4, #0]
 80055e6:	2501      	movs	r5, #1
 80055e8:	e7c0      	b.n	800556c <_scanf_float+0x188>
 80055ea:	2d03      	cmp	r5, #3
 80055ec:	d0e2      	beq.n	80055b4 <_scanf_float+0x1d0>
 80055ee:	2d05      	cmp	r5, #5
 80055f0:	e7de      	b.n	80055b0 <_scanf_float+0x1cc>
 80055f2:	2d02      	cmp	r5, #2
 80055f4:	f47f af26 	bne.w	8005444 <_scanf_float+0x60>
 80055f8:	2503      	movs	r5, #3
 80055fa:	e7b7      	b.n	800556c <_scanf_float+0x188>
 80055fc:	2d06      	cmp	r5, #6
 80055fe:	f47f af21 	bne.w	8005444 <_scanf_float+0x60>
 8005602:	2507      	movs	r5, #7
 8005604:	e7b2      	b.n	800556c <_scanf_float+0x188>
 8005606:	6822      	ldr	r2, [r4, #0]
 8005608:	0591      	lsls	r1, r2, #22
 800560a:	f57f af1b 	bpl.w	8005444 <_scanf_float+0x60>
 800560e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005612:	6022      	str	r2, [r4, #0]
 8005614:	f8cd 9004 	str.w	r9, [sp, #4]
 8005618:	e7a8      	b.n	800556c <_scanf_float+0x188>
 800561a:	6822      	ldr	r2, [r4, #0]
 800561c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005620:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005624:	d006      	beq.n	8005634 <_scanf_float+0x250>
 8005626:	0550      	lsls	r0, r2, #21
 8005628:	f57f af0c 	bpl.w	8005444 <_scanf_float+0x60>
 800562c:	f1b9 0f00 	cmp.w	r9, #0
 8005630:	f43f af0f 	beq.w	8005452 <_scanf_float+0x6e>
 8005634:	0591      	lsls	r1, r2, #22
 8005636:	bf58      	it	pl
 8005638:	9901      	ldrpl	r1, [sp, #4]
 800563a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800563e:	bf58      	it	pl
 8005640:	eba9 0101 	subpl.w	r1, r9, r1
 8005644:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005648:	bf58      	it	pl
 800564a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800564e:	6022      	str	r2, [r4, #0]
 8005650:	f04f 0900 	mov.w	r9, #0
 8005654:	e78a      	b.n	800556c <_scanf_float+0x188>
 8005656:	f04f 0a03 	mov.w	sl, #3
 800565a:	e787      	b.n	800556c <_scanf_float+0x188>
 800565c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005660:	4639      	mov	r1, r7
 8005662:	4640      	mov	r0, r8
 8005664:	4798      	blx	r3
 8005666:	2800      	cmp	r0, #0
 8005668:	f43f aedf 	beq.w	800542a <_scanf_float+0x46>
 800566c:	e6ea      	b.n	8005444 <_scanf_float+0x60>
 800566e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005672:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005676:	463a      	mov	r2, r7
 8005678:	4640      	mov	r0, r8
 800567a:	4798      	blx	r3
 800567c:	6923      	ldr	r3, [r4, #16]
 800567e:	3b01      	subs	r3, #1
 8005680:	6123      	str	r3, [r4, #16]
 8005682:	e6ec      	b.n	800545e <_scanf_float+0x7a>
 8005684:	1e6b      	subs	r3, r5, #1
 8005686:	2b06      	cmp	r3, #6
 8005688:	d825      	bhi.n	80056d6 <_scanf_float+0x2f2>
 800568a:	2d02      	cmp	r5, #2
 800568c:	d836      	bhi.n	80056fc <_scanf_float+0x318>
 800568e:	455e      	cmp	r6, fp
 8005690:	f67f aee8 	bls.w	8005464 <_scanf_float+0x80>
 8005694:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005698:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800569c:	463a      	mov	r2, r7
 800569e:	4640      	mov	r0, r8
 80056a0:	4798      	blx	r3
 80056a2:	6923      	ldr	r3, [r4, #16]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	6123      	str	r3, [r4, #16]
 80056a8:	e7f1      	b.n	800568e <_scanf_float+0x2aa>
 80056aa:	9802      	ldr	r0, [sp, #8]
 80056ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80056b4:	9002      	str	r0, [sp, #8]
 80056b6:	463a      	mov	r2, r7
 80056b8:	4640      	mov	r0, r8
 80056ba:	4798      	blx	r3
 80056bc:	6923      	ldr	r3, [r4, #16]
 80056be:	3b01      	subs	r3, #1
 80056c0:	6123      	str	r3, [r4, #16]
 80056c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056c6:	fa5f fa8a 	uxtb.w	sl, sl
 80056ca:	f1ba 0f02 	cmp.w	sl, #2
 80056ce:	d1ec      	bne.n	80056aa <_scanf_float+0x2c6>
 80056d0:	3d03      	subs	r5, #3
 80056d2:	b2ed      	uxtb	r5, r5
 80056d4:	1b76      	subs	r6, r6, r5
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	05da      	lsls	r2, r3, #23
 80056da:	d52f      	bpl.n	800573c <_scanf_float+0x358>
 80056dc:	055b      	lsls	r3, r3, #21
 80056de:	d510      	bpl.n	8005702 <_scanf_float+0x31e>
 80056e0:	455e      	cmp	r6, fp
 80056e2:	f67f aebf 	bls.w	8005464 <_scanf_float+0x80>
 80056e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056ee:	463a      	mov	r2, r7
 80056f0:	4640      	mov	r0, r8
 80056f2:	4798      	blx	r3
 80056f4:	6923      	ldr	r3, [r4, #16]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	6123      	str	r3, [r4, #16]
 80056fa:	e7f1      	b.n	80056e0 <_scanf_float+0x2fc>
 80056fc:	46aa      	mov	sl, r5
 80056fe:	9602      	str	r6, [sp, #8]
 8005700:	e7df      	b.n	80056c2 <_scanf_float+0x2de>
 8005702:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005706:	6923      	ldr	r3, [r4, #16]
 8005708:	2965      	cmp	r1, #101	; 0x65
 800570a:	f103 33ff 	add.w	r3, r3, #4294967295
 800570e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005712:	6123      	str	r3, [r4, #16]
 8005714:	d00c      	beq.n	8005730 <_scanf_float+0x34c>
 8005716:	2945      	cmp	r1, #69	; 0x45
 8005718:	d00a      	beq.n	8005730 <_scanf_float+0x34c>
 800571a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800571e:	463a      	mov	r2, r7
 8005720:	4640      	mov	r0, r8
 8005722:	4798      	blx	r3
 8005724:	6923      	ldr	r3, [r4, #16]
 8005726:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800572a:	3b01      	subs	r3, #1
 800572c:	1eb5      	subs	r5, r6, #2
 800572e:	6123      	str	r3, [r4, #16]
 8005730:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005734:	463a      	mov	r2, r7
 8005736:	4640      	mov	r0, r8
 8005738:	4798      	blx	r3
 800573a:	462e      	mov	r6, r5
 800573c:	6825      	ldr	r5, [r4, #0]
 800573e:	f015 0510 	ands.w	r5, r5, #16
 8005742:	d159      	bne.n	80057f8 <_scanf_float+0x414>
 8005744:	7035      	strb	r5, [r6, #0]
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800574c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005750:	d11b      	bne.n	800578a <_scanf_float+0x3a6>
 8005752:	9b01      	ldr	r3, [sp, #4]
 8005754:	454b      	cmp	r3, r9
 8005756:	eba3 0209 	sub.w	r2, r3, r9
 800575a:	d123      	bne.n	80057a4 <_scanf_float+0x3c0>
 800575c:	2200      	movs	r2, #0
 800575e:	4659      	mov	r1, fp
 8005760:	4640      	mov	r0, r8
 8005762:	f000 fe97 	bl	8006494 <_strtod_r>
 8005766:	6822      	ldr	r2, [r4, #0]
 8005768:	9b03      	ldr	r3, [sp, #12]
 800576a:	f012 0f02 	tst.w	r2, #2
 800576e:	ec57 6b10 	vmov	r6, r7, d0
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	d021      	beq.n	80057ba <_scanf_float+0x3d6>
 8005776:	9903      	ldr	r1, [sp, #12]
 8005778:	1d1a      	adds	r2, r3, #4
 800577a:	600a      	str	r2, [r1, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	e9c3 6700 	strd	r6, r7, [r3]
 8005782:	68e3      	ldr	r3, [r4, #12]
 8005784:	3301      	adds	r3, #1
 8005786:	60e3      	str	r3, [r4, #12]
 8005788:	e66d      	b.n	8005466 <_scanf_float+0x82>
 800578a:	9b04      	ldr	r3, [sp, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0e5      	beq.n	800575c <_scanf_float+0x378>
 8005790:	9905      	ldr	r1, [sp, #20]
 8005792:	230a      	movs	r3, #10
 8005794:	462a      	mov	r2, r5
 8005796:	3101      	adds	r1, #1
 8005798:	4640      	mov	r0, r8
 800579a:	f000 ff03 	bl	80065a4 <_strtol_r>
 800579e:	9b04      	ldr	r3, [sp, #16]
 80057a0:	9e05      	ldr	r6, [sp, #20]
 80057a2:	1ac2      	subs	r2, r0, r3
 80057a4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80057a8:	429e      	cmp	r6, r3
 80057aa:	bf28      	it	cs
 80057ac:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80057b0:	4912      	ldr	r1, [pc, #72]	; (80057fc <_scanf_float+0x418>)
 80057b2:	4630      	mov	r0, r6
 80057b4:	f000 f82c 	bl	8005810 <siprintf>
 80057b8:	e7d0      	b.n	800575c <_scanf_float+0x378>
 80057ba:	9903      	ldr	r1, [sp, #12]
 80057bc:	f012 0f04 	tst.w	r2, #4
 80057c0:	f103 0204 	add.w	r2, r3, #4
 80057c4:	600a      	str	r2, [r1, #0]
 80057c6:	d1d9      	bne.n	800577c <_scanf_float+0x398>
 80057c8:	f8d3 8000 	ldr.w	r8, [r3]
 80057cc:	ee10 2a10 	vmov	r2, s0
 80057d0:	ee10 0a10 	vmov	r0, s0
 80057d4:	463b      	mov	r3, r7
 80057d6:	4639      	mov	r1, r7
 80057d8:	f7fb f9a8 	bl	8000b2c <__aeabi_dcmpun>
 80057dc:	b128      	cbz	r0, 80057ea <_scanf_float+0x406>
 80057de:	4808      	ldr	r0, [pc, #32]	; (8005800 <_scanf_float+0x41c>)
 80057e0:	f000 f810 	bl	8005804 <nanf>
 80057e4:	ed88 0a00 	vstr	s0, [r8]
 80057e8:	e7cb      	b.n	8005782 <_scanf_float+0x39e>
 80057ea:	4630      	mov	r0, r6
 80057ec:	4639      	mov	r1, r7
 80057ee:	f7fb f9fb 	bl	8000be8 <__aeabi_d2f>
 80057f2:	f8c8 0000 	str.w	r0, [r8]
 80057f6:	e7c4      	b.n	8005782 <_scanf_float+0x39e>
 80057f8:	2500      	movs	r5, #0
 80057fa:	e634      	b.n	8005466 <_scanf_float+0x82>
 80057fc:	0800a2cc 	.word	0x0800a2cc
 8005800:	0800a6d8 	.word	0x0800a6d8

08005804 <nanf>:
 8005804:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800580c <nanf+0x8>
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	7fc00000 	.word	0x7fc00000

08005810 <siprintf>:
 8005810:	b40e      	push	{r1, r2, r3}
 8005812:	b500      	push	{lr}
 8005814:	b09c      	sub	sp, #112	; 0x70
 8005816:	ab1d      	add	r3, sp, #116	; 0x74
 8005818:	9002      	str	r0, [sp, #8]
 800581a:	9006      	str	r0, [sp, #24]
 800581c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005820:	4809      	ldr	r0, [pc, #36]	; (8005848 <siprintf+0x38>)
 8005822:	9107      	str	r1, [sp, #28]
 8005824:	9104      	str	r1, [sp, #16]
 8005826:	4909      	ldr	r1, [pc, #36]	; (800584c <siprintf+0x3c>)
 8005828:	f853 2b04 	ldr.w	r2, [r3], #4
 800582c:	9105      	str	r1, [sp, #20]
 800582e:	6800      	ldr	r0, [r0, #0]
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	a902      	add	r1, sp, #8
 8005834:	f002 fee2 	bl	80085fc <_svfiprintf_r>
 8005838:	9b02      	ldr	r3, [sp, #8]
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	b01c      	add	sp, #112	; 0x70
 8005840:	f85d eb04 	ldr.w	lr, [sp], #4
 8005844:	b003      	add	sp, #12
 8005846:	4770      	bx	lr
 8005848:	2000000c 	.word	0x2000000c
 800584c:	ffff0208 	.word	0xffff0208

08005850 <sulp>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	4604      	mov	r4, r0
 8005854:	460d      	mov	r5, r1
 8005856:	ec45 4b10 	vmov	d0, r4, r5
 800585a:	4616      	mov	r6, r2
 800585c:	f002 fc2c 	bl	80080b8 <__ulp>
 8005860:	ec51 0b10 	vmov	r0, r1, d0
 8005864:	b17e      	cbz	r6, 8005886 <sulp+0x36>
 8005866:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800586a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800586e:	2b00      	cmp	r3, #0
 8005870:	dd09      	ble.n	8005886 <sulp+0x36>
 8005872:	051b      	lsls	r3, r3, #20
 8005874:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005878:	2400      	movs	r4, #0
 800587a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800587e:	4622      	mov	r2, r4
 8005880:	462b      	mov	r3, r5
 8005882:	f7fa feb9 	bl	80005f8 <__aeabi_dmul>
 8005886:	bd70      	pop	{r4, r5, r6, pc}

08005888 <_strtod_l>:
 8005888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588c:	ed2d 8b02 	vpush	{d8}
 8005890:	b09d      	sub	sp, #116	; 0x74
 8005892:	461f      	mov	r7, r3
 8005894:	2300      	movs	r3, #0
 8005896:	9318      	str	r3, [sp, #96]	; 0x60
 8005898:	4ba2      	ldr	r3, [pc, #648]	; (8005b24 <_strtod_l+0x29c>)
 800589a:	9213      	str	r2, [sp, #76]	; 0x4c
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	9305      	str	r3, [sp, #20]
 80058a0:	4604      	mov	r4, r0
 80058a2:	4618      	mov	r0, r3
 80058a4:	4688      	mov	r8, r1
 80058a6:	f7fa fc93 	bl	80001d0 <strlen>
 80058aa:	f04f 0a00 	mov.w	sl, #0
 80058ae:	4605      	mov	r5, r0
 80058b0:	f04f 0b00 	mov.w	fp, #0
 80058b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80058b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058ba:	781a      	ldrb	r2, [r3, #0]
 80058bc:	2a2b      	cmp	r2, #43	; 0x2b
 80058be:	d04e      	beq.n	800595e <_strtod_l+0xd6>
 80058c0:	d83b      	bhi.n	800593a <_strtod_l+0xb2>
 80058c2:	2a0d      	cmp	r2, #13
 80058c4:	d834      	bhi.n	8005930 <_strtod_l+0xa8>
 80058c6:	2a08      	cmp	r2, #8
 80058c8:	d834      	bhi.n	8005934 <_strtod_l+0xac>
 80058ca:	2a00      	cmp	r2, #0
 80058cc:	d03e      	beq.n	800594c <_strtod_l+0xc4>
 80058ce:	2300      	movs	r3, #0
 80058d0:	930a      	str	r3, [sp, #40]	; 0x28
 80058d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80058d4:	7833      	ldrb	r3, [r6, #0]
 80058d6:	2b30      	cmp	r3, #48	; 0x30
 80058d8:	f040 80b0 	bne.w	8005a3c <_strtod_l+0x1b4>
 80058dc:	7873      	ldrb	r3, [r6, #1]
 80058de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80058e2:	2b58      	cmp	r3, #88	; 0x58
 80058e4:	d168      	bne.n	80059b8 <_strtod_l+0x130>
 80058e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e8:	9301      	str	r3, [sp, #4]
 80058ea:	ab18      	add	r3, sp, #96	; 0x60
 80058ec:	9702      	str	r7, [sp, #8]
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	4a8d      	ldr	r2, [pc, #564]	; (8005b28 <_strtod_l+0x2a0>)
 80058f2:	ab19      	add	r3, sp, #100	; 0x64
 80058f4:	a917      	add	r1, sp, #92	; 0x5c
 80058f6:	4620      	mov	r0, r4
 80058f8:	f001 fd38 	bl	800736c <__gethex>
 80058fc:	f010 0707 	ands.w	r7, r0, #7
 8005900:	4605      	mov	r5, r0
 8005902:	d005      	beq.n	8005910 <_strtod_l+0x88>
 8005904:	2f06      	cmp	r7, #6
 8005906:	d12c      	bne.n	8005962 <_strtod_l+0xda>
 8005908:	3601      	adds	r6, #1
 800590a:	2300      	movs	r3, #0
 800590c:	9617      	str	r6, [sp, #92]	; 0x5c
 800590e:	930a      	str	r3, [sp, #40]	; 0x28
 8005910:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005912:	2b00      	cmp	r3, #0
 8005914:	f040 8590 	bne.w	8006438 <_strtod_l+0xbb0>
 8005918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800591a:	b1eb      	cbz	r3, 8005958 <_strtod_l+0xd0>
 800591c:	4652      	mov	r2, sl
 800591e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005922:	ec43 2b10 	vmov	d0, r2, r3
 8005926:	b01d      	add	sp, #116	; 0x74
 8005928:	ecbd 8b02 	vpop	{d8}
 800592c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005930:	2a20      	cmp	r2, #32
 8005932:	d1cc      	bne.n	80058ce <_strtod_l+0x46>
 8005934:	3301      	adds	r3, #1
 8005936:	9317      	str	r3, [sp, #92]	; 0x5c
 8005938:	e7be      	b.n	80058b8 <_strtod_l+0x30>
 800593a:	2a2d      	cmp	r2, #45	; 0x2d
 800593c:	d1c7      	bne.n	80058ce <_strtod_l+0x46>
 800593e:	2201      	movs	r2, #1
 8005940:	920a      	str	r2, [sp, #40]	; 0x28
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	9217      	str	r2, [sp, #92]	; 0x5c
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1c2      	bne.n	80058d2 <_strtod_l+0x4a>
 800594c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800594e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005952:	2b00      	cmp	r3, #0
 8005954:	f040 856e 	bne.w	8006434 <_strtod_l+0xbac>
 8005958:	4652      	mov	r2, sl
 800595a:	465b      	mov	r3, fp
 800595c:	e7e1      	b.n	8005922 <_strtod_l+0x9a>
 800595e:	2200      	movs	r2, #0
 8005960:	e7ee      	b.n	8005940 <_strtod_l+0xb8>
 8005962:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005964:	b13a      	cbz	r2, 8005976 <_strtod_l+0xee>
 8005966:	2135      	movs	r1, #53	; 0x35
 8005968:	a81a      	add	r0, sp, #104	; 0x68
 800596a:	f002 fcb0 	bl	80082ce <__copybits>
 800596e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005970:	4620      	mov	r0, r4
 8005972:	f002 f86f 	bl	8007a54 <_Bfree>
 8005976:	3f01      	subs	r7, #1
 8005978:	2f04      	cmp	r7, #4
 800597a:	d806      	bhi.n	800598a <_strtod_l+0x102>
 800597c:	e8df f007 	tbb	[pc, r7]
 8005980:	1714030a 	.word	0x1714030a
 8005984:	0a          	.byte	0x0a
 8005985:	00          	.byte	0x00
 8005986:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800598a:	0728      	lsls	r0, r5, #28
 800598c:	d5c0      	bpl.n	8005910 <_strtod_l+0x88>
 800598e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005992:	e7bd      	b.n	8005910 <_strtod_l+0x88>
 8005994:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005998:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800599a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800599e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80059a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80059a6:	e7f0      	b.n	800598a <_strtod_l+0x102>
 80059a8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005b2c <_strtod_l+0x2a4>
 80059ac:	e7ed      	b.n	800598a <_strtod_l+0x102>
 80059ae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80059b2:	f04f 3aff 	mov.w	sl, #4294967295
 80059b6:	e7e8      	b.n	800598a <_strtod_l+0x102>
 80059b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b30      	cmp	r3, #48	; 0x30
 80059c2:	d0f9      	beq.n	80059b8 <_strtod_l+0x130>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0a3      	beq.n	8005910 <_strtod_l+0x88>
 80059c8:	2301      	movs	r3, #1
 80059ca:	f04f 0900 	mov.w	r9, #0
 80059ce:	9304      	str	r3, [sp, #16]
 80059d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059d2:	9308      	str	r3, [sp, #32]
 80059d4:	f8cd 901c 	str.w	r9, [sp, #28]
 80059d8:	464f      	mov	r7, r9
 80059da:	220a      	movs	r2, #10
 80059dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80059de:	7806      	ldrb	r6, [r0, #0]
 80059e0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80059e4:	b2d9      	uxtb	r1, r3
 80059e6:	2909      	cmp	r1, #9
 80059e8:	d92a      	bls.n	8005a40 <_strtod_l+0x1b8>
 80059ea:	9905      	ldr	r1, [sp, #20]
 80059ec:	462a      	mov	r2, r5
 80059ee:	f002 ff1f 	bl	8008830 <strncmp>
 80059f2:	b398      	cbz	r0, 8005a5c <_strtod_l+0x1d4>
 80059f4:	2000      	movs	r0, #0
 80059f6:	4632      	mov	r2, r6
 80059f8:	463d      	mov	r5, r7
 80059fa:	9005      	str	r0, [sp, #20]
 80059fc:	4603      	mov	r3, r0
 80059fe:	2a65      	cmp	r2, #101	; 0x65
 8005a00:	d001      	beq.n	8005a06 <_strtod_l+0x17e>
 8005a02:	2a45      	cmp	r2, #69	; 0x45
 8005a04:	d118      	bne.n	8005a38 <_strtod_l+0x1b0>
 8005a06:	b91d      	cbnz	r5, 8005a10 <_strtod_l+0x188>
 8005a08:	9a04      	ldr	r2, [sp, #16]
 8005a0a:	4302      	orrs	r2, r0
 8005a0c:	d09e      	beq.n	800594c <_strtod_l+0xc4>
 8005a0e:	2500      	movs	r5, #0
 8005a10:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005a14:	f108 0201 	add.w	r2, r8, #1
 8005a18:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a1a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005a1e:	2a2b      	cmp	r2, #43	; 0x2b
 8005a20:	d075      	beq.n	8005b0e <_strtod_l+0x286>
 8005a22:	2a2d      	cmp	r2, #45	; 0x2d
 8005a24:	d07b      	beq.n	8005b1e <_strtod_l+0x296>
 8005a26:	f04f 0c00 	mov.w	ip, #0
 8005a2a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005a2e:	2909      	cmp	r1, #9
 8005a30:	f240 8082 	bls.w	8005b38 <_strtod_l+0x2b0>
 8005a34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005a38:	2600      	movs	r6, #0
 8005a3a:	e09d      	b.n	8005b78 <_strtod_l+0x2f0>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	e7c4      	b.n	80059ca <_strtod_l+0x142>
 8005a40:	2f08      	cmp	r7, #8
 8005a42:	bfd8      	it	le
 8005a44:	9907      	ldrle	r1, [sp, #28]
 8005a46:	f100 0001 	add.w	r0, r0, #1
 8005a4a:	bfda      	itte	le
 8005a4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005a50:	9307      	strle	r3, [sp, #28]
 8005a52:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005a56:	3701      	adds	r7, #1
 8005a58:	9017      	str	r0, [sp, #92]	; 0x5c
 8005a5a:	e7bf      	b.n	80059dc <_strtod_l+0x154>
 8005a5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a5e:	195a      	adds	r2, r3, r5
 8005a60:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a62:	5d5a      	ldrb	r2, [r3, r5]
 8005a64:	2f00      	cmp	r7, #0
 8005a66:	d037      	beq.n	8005ad8 <_strtod_l+0x250>
 8005a68:	9005      	str	r0, [sp, #20]
 8005a6a:	463d      	mov	r5, r7
 8005a6c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005a70:	2b09      	cmp	r3, #9
 8005a72:	d912      	bls.n	8005a9a <_strtod_l+0x212>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e7c2      	b.n	80059fe <_strtod_l+0x176>
 8005a78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a7e:	785a      	ldrb	r2, [r3, #1]
 8005a80:	3001      	adds	r0, #1
 8005a82:	2a30      	cmp	r2, #48	; 0x30
 8005a84:	d0f8      	beq.n	8005a78 <_strtod_l+0x1f0>
 8005a86:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	f200 84d9 	bhi.w	8006442 <_strtod_l+0xbba>
 8005a90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a92:	9005      	str	r0, [sp, #20]
 8005a94:	2000      	movs	r0, #0
 8005a96:	9308      	str	r3, [sp, #32]
 8005a98:	4605      	mov	r5, r0
 8005a9a:	3a30      	subs	r2, #48	; 0x30
 8005a9c:	f100 0301 	add.w	r3, r0, #1
 8005aa0:	d014      	beq.n	8005acc <_strtod_l+0x244>
 8005aa2:	9905      	ldr	r1, [sp, #20]
 8005aa4:	4419      	add	r1, r3
 8005aa6:	9105      	str	r1, [sp, #20]
 8005aa8:	462b      	mov	r3, r5
 8005aaa:	eb00 0e05 	add.w	lr, r0, r5
 8005aae:	210a      	movs	r1, #10
 8005ab0:	4573      	cmp	r3, lr
 8005ab2:	d113      	bne.n	8005adc <_strtod_l+0x254>
 8005ab4:	182b      	adds	r3, r5, r0
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	f105 0501 	add.w	r5, r5, #1
 8005abc:	4405      	add	r5, r0
 8005abe:	dc1c      	bgt.n	8005afa <_strtod_l+0x272>
 8005ac0:	9907      	ldr	r1, [sp, #28]
 8005ac2:	230a      	movs	r3, #10
 8005ac4:	fb03 2301 	mla	r3, r3, r1, r2
 8005ac8:	9307      	str	r3, [sp, #28]
 8005aca:	2300      	movs	r3, #0
 8005acc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005ace:	1c51      	adds	r1, r2, #1
 8005ad0:	9117      	str	r1, [sp, #92]	; 0x5c
 8005ad2:	7852      	ldrb	r2, [r2, #1]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	e7c9      	b.n	8005a6c <_strtod_l+0x1e4>
 8005ad8:	4638      	mov	r0, r7
 8005ada:	e7d2      	b.n	8005a82 <_strtod_l+0x1fa>
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	dc04      	bgt.n	8005aea <_strtod_l+0x262>
 8005ae0:	9e07      	ldr	r6, [sp, #28]
 8005ae2:	434e      	muls	r6, r1
 8005ae4:	9607      	str	r6, [sp, #28]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	e7e2      	b.n	8005ab0 <_strtod_l+0x228>
 8005aea:	f103 0c01 	add.w	ip, r3, #1
 8005aee:	f1bc 0f10 	cmp.w	ip, #16
 8005af2:	bfd8      	it	le
 8005af4:	fb01 f909 	mulle.w	r9, r1, r9
 8005af8:	e7f5      	b.n	8005ae6 <_strtod_l+0x25e>
 8005afa:	2d10      	cmp	r5, #16
 8005afc:	bfdc      	itt	le
 8005afe:	230a      	movle	r3, #10
 8005b00:	fb03 2909 	mlale	r9, r3, r9, r2
 8005b04:	e7e1      	b.n	8005aca <_strtod_l+0x242>
 8005b06:	2300      	movs	r3, #0
 8005b08:	9305      	str	r3, [sp, #20]
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e77c      	b.n	8005a08 <_strtod_l+0x180>
 8005b0e:	f04f 0c00 	mov.w	ip, #0
 8005b12:	f108 0202 	add.w	r2, r8, #2
 8005b16:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b18:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005b1c:	e785      	b.n	8005a2a <_strtod_l+0x1a2>
 8005b1e:	f04f 0c01 	mov.w	ip, #1
 8005b22:	e7f6      	b.n	8005b12 <_strtod_l+0x28a>
 8005b24:	0800a520 	.word	0x0800a520
 8005b28:	0800a2d4 	.word	0x0800a2d4
 8005b2c:	7ff00000 	.word	0x7ff00000
 8005b30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b32:	1c51      	adds	r1, r2, #1
 8005b34:	9117      	str	r1, [sp, #92]	; 0x5c
 8005b36:	7852      	ldrb	r2, [r2, #1]
 8005b38:	2a30      	cmp	r2, #48	; 0x30
 8005b3a:	d0f9      	beq.n	8005b30 <_strtod_l+0x2a8>
 8005b3c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005b40:	2908      	cmp	r1, #8
 8005b42:	f63f af79 	bhi.w	8005a38 <_strtod_l+0x1b0>
 8005b46:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005b4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b4c:	9206      	str	r2, [sp, #24]
 8005b4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b50:	1c51      	adds	r1, r2, #1
 8005b52:	9117      	str	r1, [sp, #92]	; 0x5c
 8005b54:	7852      	ldrb	r2, [r2, #1]
 8005b56:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005b5a:	2e09      	cmp	r6, #9
 8005b5c:	d937      	bls.n	8005bce <_strtod_l+0x346>
 8005b5e:	9e06      	ldr	r6, [sp, #24]
 8005b60:	1b89      	subs	r1, r1, r6
 8005b62:	2908      	cmp	r1, #8
 8005b64:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005b68:	dc02      	bgt.n	8005b70 <_strtod_l+0x2e8>
 8005b6a:	4576      	cmp	r6, lr
 8005b6c:	bfa8      	it	ge
 8005b6e:	4676      	movge	r6, lr
 8005b70:	f1bc 0f00 	cmp.w	ip, #0
 8005b74:	d000      	beq.n	8005b78 <_strtod_l+0x2f0>
 8005b76:	4276      	negs	r6, r6
 8005b78:	2d00      	cmp	r5, #0
 8005b7a:	d14d      	bne.n	8005c18 <_strtod_l+0x390>
 8005b7c:	9904      	ldr	r1, [sp, #16]
 8005b7e:	4301      	orrs	r1, r0
 8005b80:	f47f aec6 	bne.w	8005910 <_strtod_l+0x88>
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f47f aee1 	bne.w	800594c <_strtod_l+0xc4>
 8005b8a:	2a69      	cmp	r2, #105	; 0x69
 8005b8c:	d027      	beq.n	8005bde <_strtod_l+0x356>
 8005b8e:	dc24      	bgt.n	8005bda <_strtod_l+0x352>
 8005b90:	2a49      	cmp	r2, #73	; 0x49
 8005b92:	d024      	beq.n	8005bde <_strtod_l+0x356>
 8005b94:	2a4e      	cmp	r2, #78	; 0x4e
 8005b96:	f47f aed9 	bne.w	800594c <_strtod_l+0xc4>
 8005b9a:	499f      	ldr	r1, [pc, #636]	; (8005e18 <_strtod_l+0x590>)
 8005b9c:	a817      	add	r0, sp, #92	; 0x5c
 8005b9e:	f001 fe3d 	bl	800781c <__match>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	f43f aed2 	beq.w	800594c <_strtod_l+0xc4>
 8005ba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b28      	cmp	r3, #40	; 0x28
 8005bae:	d12d      	bne.n	8005c0c <_strtod_l+0x384>
 8005bb0:	499a      	ldr	r1, [pc, #616]	; (8005e1c <_strtod_l+0x594>)
 8005bb2:	aa1a      	add	r2, sp, #104	; 0x68
 8005bb4:	a817      	add	r0, sp, #92	; 0x5c
 8005bb6:	f001 fe45 	bl	8007844 <__hexnan>
 8005bba:	2805      	cmp	r0, #5
 8005bbc:	d126      	bne.n	8005c0c <_strtod_l+0x384>
 8005bbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bc0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005bc4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005bc8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005bcc:	e6a0      	b.n	8005910 <_strtod_l+0x88>
 8005bce:	210a      	movs	r1, #10
 8005bd0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005bd4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005bd8:	e7b9      	b.n	8005b4e <_strtod_l+0x2c6>
 8005bda:	2a6e      	cmp	r2, #110	; 0x6e
 8005bdc:	e7db      	b.n	8005b96 <_strtod_l+0x30e>
 8005bde:	4990      	ldr	r1, [pc, #576]	; (8005e20 <_strtod_l+0x598>)
 8005be0:	a817      	add	r0, sp, #92	; 0x5c
 8005be2:	f001 fe1b 	bl	800781c <__match>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	f43f aeb0 	beq.w	800594c <_strtod_l+0xc4>
 8005bec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bee:	498d      	ldr	r1, [pc, #564]	; (8005e24 <_strtod_l+0x59c>)
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	a817      	add	r0, sp, #92	; 0x5c
 8005bf4:	9317      	str	r3, [sp, #92]	; 0x5c
 8005bf6:	f001 fe11 	bl	800781c <__match>
 8005bfa:	b910      	cbnz	r0, 8005c02 <_strtod_l+0x37a>
 8005bfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bfe:	3301      	adds	r3, #1
 8005c00:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c02:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005e34 <_strtod_l+0x5ac>
 8005c06:	f04f 0a00 	mov.w	sl, #0
 8005c0a:	e681      	b.n	8005910 <_strtod_l+0x88>
 8005c0c:	4886      	ldr	r0, [pc, #536]	; (8005e28 <_strtod_l+0x5a0>)
 8005c0e:	f002 fdf7 	bl	8008800 <nan>
 8005c12:	ec5b ab10 	vmov	sl, fp, d0
 8005c16:	e67b      	b.n	8005910 <_strtod_l+0x88>
 8005c18:	9b05      	ldr	r3, [sp, #20]
 8005c1a:	9807      	ldr	r0, [sp, #28]
 8005c1c:	1af3      	subs	r3, r6, r3
 8005c1e:	2f00      	cmp	r7, #0
 8005c20:	bf08      	it	eq
 8005c22:	462f      	moveq	r7, r5
 8005c24:	2d10      	cmp	r5, #16
 8005c26:	9306      	str	r3, [sp, #24]
 8005c28:	46a8      	mov	r8, r5
 8005c2a:	bfa8      	it	ge
 8005c2c:	f04f 0810 	movge.w	r8, #16
 8005c30:	f7fa fc68 	bl	8000504 <__aeabi_ui2d>
 8005c34:	2d09      	cmp	r5, #9
 8005c36:	4682      	mov	sl, r0
 8005c38:	468b      	mov	fp, r1
 8005c3a:	dd13      	ble.n	8005c64 <_strtod_l+0x3dc>
 8005c3c:	4b7b      	ldr	r3, [pc, #492]	; (8005e2c <_strtod_l+0x5a4>)
 8005c3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005c42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005c46:	f7fa fcd7 	bl	80005f8 <__aeabi_dmul>
 8005c4a:	4682      	mov	sl, r0
 8005c4c:	4648      	mov	r0, r9
 8005c4e:	468b      	mov	fp, r1
 8005c50:	f7fa fc58 	bl	8000504 <__aeabi_ui2d>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4650      	mov	r0, sl
 8005c5a:	4659      	mov	r1, fp
 8005c5c:	f7fa fb16 	bl	800028c <__adddf3>
 8005c60:	4682      	mov	sl, r0
 8005c62:	468b      	mov	fp, r1
 8005c64:	2d0f      	cmp	r5, #15
 8005c66:	dc38      	bgt.n	8005cda <_strtod_l+0x452>
 8005c68:	9b06      	ldr	r3, [sp, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f43f ae50 	beq.w	8005910 <_strtod_l+0x88>
 8005c70:	dd24      	ble.n	8005cbc <_strtod_l+0x434>
 8005c72:	2b16      	cmp	r3, #22
 8005c74:	dc0b      	bgt.n	8005c8e <_strtod_l+0x406>
 8005c76:	496d      	ldr	r1, [pc, #436]	; (8005e2c <_strtod_l+0x5a4>)
 8005c78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c80:	4652      	mov	r2, sl
 8005c82:	465b      	mov	r3, fp
 8005c84:	f7fa fcb8 	bl	80005f8 <__aeabi_dmul>
 8005c88:	4682      	mov	sl, r0
 8005c8a:	468b      	mov	fp, r1
 8005c8c:	e640      	b.n	8005910 <_strtod_l+0x88>
 8005c8e:	9a06      	ldr	r2, [sp, #24]
 8005c90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005c94:	4293      	cmp	r3, r2
 8005c96:	db20      	blt.n	8005cda <_strtod_l+0x452>
 8005c98:	4c64      	ldr	r4, [pc, #400]	; (8005e2c <_strtod_l+0x5a4>)
 8005c9a:	f1c5 050f 	rsb	r5, r5, #15
 8005c9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005ca2:	4652      	mov	r2, sl
 8005ca4:	465b      	mov	r3, fp
 8005ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005caa:	f7fa fca5 	bl	80005f8 <__aeabi_dmul>
 8005cae:	9b06      	ldr	r3, [sp, #24]
 8005cb0:	1b5d      	subs	r5, r3, r5
 8005cb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005cb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005cba:	e7e3      	b.n	8005c84 <_strtod_l+0x3fc>
 8005cbc:	9b06      	ldr	r3, [sp, #24]
 8005cbe:	3316      	adds	r3, #22
 8005cc0:	db0b      	blt.n	8005cda <_strtod_l+0x452>
 8005cc2:	9b05      	ldr	r3, [sp, #20]
 8005cc4:	1b9e      	subs	r6, r3, r6
 8005cc6:	4b59      	ldr	r3, [pc, #356]	; (8005e2c <_strtod_l+0x5a4>)
 8005cc8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005ccc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cd0:	4650      	mov	r0, sl
 8005cd2:	4659      	mov	r1, fp
 8005cd4:	f7fa fdba 	bl	800084c <__aeabi_ddiv>
 8005cd8:	e7d6      	b.n	8005c88 <_strtod_l+0x400>
 8005cda:	9b06      	ldr	r3, [sp, #24]
 8005cdc:	eba5 0808 	sub.w	r8, r5, r8
 8005ce0:	4498      	add	r8, r3
 8005ce2:	f1b8 0f00 	cmp.w	r8, #0
 8005ce6:	dd74      	ble.n	8005dd2 <_strtod_l+0x54a>
 8005ce8:	f018 030f 	ands.w	r3, r8, #15
 8005cec:	d00a      	beq.n	8005d04 <_strtod_l+0x47c>
 8005cee:	494f      	ldr	r1, [pc, #316]	; (8005e2c <_strtod_l+0x5a4>)
 8005cf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005cf4:	4652      	mov	r2, sl
 8005cf6:	465b      	mov	r3, fp
 8005cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cfc:	f7fa fc7c 	bl	80005f8 <__aeabi_dmul>
 8005d00:	4682      	mov	sl, r0
 8005d02:	468b      	mov	fp, r1
 8005d04:	f038 080f 	bics.w	r8, r8, #15
 8005d08:	d04f      	beq.n	8005daa <_strtod_l+0x522>
 8005d0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005d0e:	dd22      	ble.n	8005d56 <_strtod_l+0x4ce>
 8005d10:	2500      	movs	r5, #0
 8005d12:	462e      	mov	r6, r5
 8005d14:	9507      	str	r5, [sp, #28]
 8005d16:	9505      	str	r5, [sp, #20]
 8005d18:	2322      	movs	r3, #34	; 0x22
 8005d1a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005e34 <_strtod_l+0x5ac>
 8005d1e:	6023      	str	r3, [r4, #0]
 8005d20:	f04f 0a00 	mov.w	sl, #0
 8005d24:	9b07      	ldr	r3, [sp, #28]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f43f adf2 	beq.w	8005910 <_strtod_l+0x88>
 8005d2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f001 fe90 	bl	8007a54 <_Bfree>
 8005d34:	9905      	ldr	r1, [sp, #20]
 8005d36:	4620      	mov	r0, r4
 8005d38:	f001 fe8c 	bl	8007a54 <_Bfree>
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f001 fe88 	bl	8007a54 <_Bfree>
 8005d44:	9907      	ldr	r1, [sp, #28]
 8005d46:	4620      	mov	r0, r4
 8005d48:	f001 fe84 	bl	8007a54 <_Bfree>
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f001 fe80 	bl	8007a54 <_Bfree>
 8005d54:	e5dc      	b.n	8005910 <_strtod_l+0x88>
 8005d56:	4b36      	ldr	r3, [pc, #216]	; (8005e30 <_strtod_l+0x5a8>)
 8005d58:	9304      	str	r3, [sp, #16]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005d60:	4650      	mov	r0, sl
 8005d62:	4659      	mov	r1, fp
 8005d64:	4699      	mov	r9, r3
 8005d66:	f1b8 0f01 	cmp.w	r8, #1
 8005d6a:	dc21      	bgt.n	8005db0 <_strtod_l+0x528>
 8005d6c:	b10b      	cbz	r3, 8005d72 <_strtod_l+0x4ea>
 8005d6e:	4682      	mov	sl, r0
 8005d70:	468b      	mov	fp, r1
 8005d72:	4b2f      	ldr	r3, [pc, #188]	; (8005e30 <_strtod_l+0x5a8>)
 8005d74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005d78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005d7c:	4652      	mov	r2, sl
 8005d7e:	465b      	mov	r3, fp
 8005d80:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005d84:	f7fa fc38 	bl	80005f8 <__aeabi_dmul>
 8005d88:	4b2a      	ldr	r3, [pc, #168]	; (8005e34 <_strtod_l+0x5ac>)
 8005d8a:	460a      	mov	r2, r1
 8005d8c:	400b      	ands	r3, r1
 8005d8e:	492a      	ldr	r1, [pc, #168]	; (8005e38 <_strtod_l+0x5b0>)
 8005d90:	428b      	cmp	r3, r1
 8005d92:	4682      	mov	sl, r0
 8005d94:	d8bc      	bhi.n	8005d10 <_strtod_l+0x488>
 8005d96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005d9a:	428b      	cmp	r3, r1
 8005d9c:	bf86      	itte	hi
 8005d9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005e3c <_strtod_l+0x5b4>
 8005da2:	f04f 3aff 	movhi.w	sl, #4294967295
 8005da6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005daa:	2300      	movs	r3, #0
 8005dac:	9304      	str	r3, [sp, #16]
 8005dae:	e084      	b.n	8005eba <_strtod_l+0x632>
 8005db0:	f018 0f01 	tst.w	r8, #1
 8005db4:	d005      	beq.n	8005dc2 <_strtod_l+0x53a>
 8005db6:	9b04      	ldr	r3, [sp, #16]
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f7fa fc1c 	bl	80005f8 <__aeabi_dmul>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	9a04      	ldr	r2, [sp, #16]
 8005dc4:	3208      	adds	r2, #8
 8005dc6:	f109 0901 	add.w	r9, r9, #1
 8005dca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005dce:	9204      	str	r2, [sp, #16]
 8005dd0:	e7c9      	b.n	8005d66 <_strtod_l+0x4de>
 8005dd2:	d0ea      	beq.n	8005daa <_strtod_l+0x522>
 8005dd4:	f1c8 0800 	rsb	r8, r8, #0
 8005dd8:	f018 020f 	ands.w	r2, r8, #15
 8005ddc:	d00a      	beq.n	8005df4 <_strtod_l+0x56c>
 8005dde:	4b13      	ldr	r3, [pc, #76]	; (8005e2c <_strtod_l+0x5a4>)
 8005de0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005de4:	4650      	mov	r0, sl
 8005de6:	4659      	mov	r1, fp
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	f7fa fd2e 	bl	800084c <__aeabi_ddiv>
 8005df0:	4682      	mov	sl, r0
 8005df2:	468b      	mov	fp, r1
 8005df4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005df8:	d0d7      	beq.n	8005daa <_strtod_l+0x522>
 8005dfa:	f1b8 0f1f 	cmp.w	r8, #31
 8005dfe:	dd1f      	ble.n	8005e40 <_strtod_l+0x5b8>
 8005e00:	2500      	movs	r5, #0
 8005e02:	462e      	mov	r6, r5
 8005e04:	9507      	str	r5, [sp, #28]
 8005e06:	9505      	str	r5, [sp, #20]
 8005e08:	2322      	movs	r3, #34	; 0x22
 8005e0a:	f04f 0a00 	mov.w	sl, #0
 8005e0e:	f04f 0b00 	mov.w	fp, #0
 8005e12:	6023      	str	r3, [r4, #0]
 8005e14:	e786      	b.n	8005d24 <_strtod_l+0x49c>
 8005e16:	bf00      	nop
 8005e18:	0800a2a5 	.word	0x0800a2a5
 8005e1c:	0800a2e8 	.word	0x0800a2e8
 8005e20:	0800a29d 	.word	0x0800a29d
 8005e24:	0800a42c 	.word	0x0800a42c
 8005e28:	0800a6d8 	.word	0x0800a6d8
 8005e2c:	0800a5b8 	.word	0x0800a5b8
 8005e30:	0800a590 	.word	0x0800a590
 8005e34:	7ff00000 	.word	0x7ff00000
 8005e38:	7ca00000 	.word	0x7ca00000
 8005e3c:	7fefffff 	.word	0x7fefffff
 8005e40:	f018 0310 	ands.w	r3, r8, #16
 8005e44:	bf18      	it	ne
 8005e46:	236a      	movne	r3, #106	; 0x6a
 8005e48:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80061f8 <_strtod_l+0x970>
 8005e4c:	9304      	str	r3, [sp, #16]
 8005e4e:	4650      	mov	r0, sl
 8005e50:	4659      	mov	r1, fp
 8005e52:	2300      	movs	r3, #0
 8005e54:	f018 0f01 	tst.w	r8, #1
 8005e58:	d004      	beq.n	8005e64 <_strtod_l+0x5dc>
 8005e5a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005e5e:	f7fa fbcb 	bl	80005f8 <__aeabi_dmul>
 8005e62:	2301      	movs	r3, #1
 8005e64:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005e68:	f109 0908 	add.w	r9, r9, #8
 8005e6c:	d1f2      	bne.n	8005e54 <_strtod_l+0x5cc>
 8005e6e:	b10b      	cbz	r3, 8005e74 <_strtod_l+0x5ec>
 8005e70:	4682      	mov	sl, r0
 8005e72:	468b      	mov	fp, r1
 8005e74:	9b04      	ldr	r3, [sp, #16]
 8005e76:	b1c3      	cbz	r3, 8005eaa <_strtod_l+0x622>
 8005e78:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005e7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	4659      	mov	r1, fp
 8005e84:	dd11      	ble.n	8005eaa <_strtod_l+0x622>
 8005e86:	2b1f      	cmp	r3, #31
 8005e88:	f340 8124 	ble.w	80060d4 <_strtod_l+0x84c>
 8005e8c:	2b34      	cmp	r3, #52	; 0x34
 8005e8e:	bfde      	ittt	le
 8005e90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005e94:	f04f 33ff 	movle.w	r3, #4294967295
 8005e98:	fa03 f202 	lslle.w	r2, r3, r2
 8005e9c:	f04f 0a00 	mov.w	sl, #0
 8005ea0:	bfcc      	ite	gt
 8005ea2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005ea6:	ea02 0b01 	andle.w	fp, r2, r1
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2300      	movs	r3, #0
 8005eae:	4650      	mov	r0, sl
 8005eb0:	4659      	mov	r1, fp
 8005eb2:	f7fa fe09 	bl	8000ac8 <__aeabi_dcmpeq>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d1a2      	bne.n	8005e00 <_strtod_l+0x578>
 8005eba:	9b07      	ldr	r3, [sp, #28]
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	9908      	ldr	r1, [sp, #32]
 8005ec0:	462b      	mov	r3, r5
 8005ec2:	463a      	mov	r2, r7
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f001 fe2d 	bl	8007b24 <__s2b>
 8005eca:	9007      	str	r0, [sp, #28]
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	f43f af1f 	beq.w	8005d10 <_strtod_l+0x488>
 8005ed2:	9b05      	ldr	r3, [sp, #20]
 8005ed4:	1b9e      	subs	r6, r3, r6
 8005ed6:	9b06      	ldr	r3, [sp, #24]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	bfb4      	ite	lt
 8005edc:	4633      	movlt	r3, r6
 8005ede:	2300      	movge	r3, #0
 8005ee0:	930c      	str	r3, [sp, #48]	; 0x30
 8005ee2:	9b06      	ldr	r3, [sp, #24]
 8005ee4:	2500      	movs	r5, #0
 8005ee6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005eea:	9312      	str	r3, [sp, #72]	; 0x48
 8005eec:	462e      	mov	r6, r5
 8005eee:	9b07      	ldr	r3, [sp, #28]
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	6859      	ldr	r1, [r3, #4]
 8005ef4:	f001 fd6e 	bl	80079d4 <_Balloc>
 8005ef8:	9005      	str	r0, [sp, #20]
 8005efa:	2800      	cmp	r0, #0
 8005efc:	f43f af0c 	beq.w	8005d18 <_strtod_l+0x490>
 8005f00:	9b07      	ldr	r3, [sp, #28]
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	3202      	adds	r2, #2
 8005f06:	f103 010c 	add.w	r1, r3, #12
 8005f0a:	0092      	lsls	r2, r2, #2
 8005f0c:	300c      	adds	r0, #12
 8005f0e:	f001 fd53 	bl	80079b8 <memcpy>
 8005f12:	ec4b ab10 	vmov	d0, sl, fp
 8005f16:	aa1a      	add	r2, sp, #104	; 0x68
 8005f18:	a919      	add	r1, sp, #100	; 0x64
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	f002 f948 	bl	80081b0 <__d2b>
 8005f20:	ec4b ab18 	vmov	d8, sl, fp
 8005f24:	9018      	str	r0, [sp, #96]	; 0x60
 8005f26:	2800      	cmp	r0, #0
 8005f28:	f43f aef6 	beq.w	8005d18 <_strtod_l+0x490>
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f001 fe92 	bl	8007c58 <__i2b>
 8005f34:	4606      	mov	r6, r0
 8005f36:	2800      	cmp	r0, #0
 8005f38:	f43f aeee 	beq.w	8005d18 <_strtod_l+0x490>
 8005f3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f3e:	9904      	ldr	r1, [sp, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	bfab      	itete	ge
 8005f44:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005f46:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005f48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005f4a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005f4e:	bfac      	ite	ge
 8005f50:	eb03 0902 	addge.w	r9, r3, r2
 8005f54:	1ad7      	sublt	r7, r2, r3
 8005f56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005f58:	eba3 0801 	sub.w	r8, r3, r1
 8005f5c:	4490      	add	r8, r2
 8005f5e:	4ba1      	ldr	r3, [pc, #644]	; (80061e4 <_strtod_l+0x95c>)
 8005f60:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f64:	4598      	cmp	r8, r3
 8005f66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005f6a:	f280 80c7 	bge.w	80060fc <_strtod_l+0x874>
 8005f6e:	eba3 0308 	sub.w	r3, r3, r8
 8005f72:	2b1f      	cmp	r3, #31
 8005f74:	eba2 0203 	sub.w	r2, r2, r3
 8005f78:	f04f 0101 	mov.w	r1, #1
 8005f7c:	f300 80b1 	bgt.w	80060e2 <_strtod_l+0x85a>
 8005f80:	fa01 f303 	lsl.w	r3, r1, r3
 8005f84:	930d      	str	r3, [sp, #52]	; 0x34
 8005f86:	2300      	movs	r3, #0
 8005f88:	9308      	str	r3, [sp, #32]
 8005f8a:	eb09 0802 	add.w	r8, r9, r2
 8005f8e:	9b04      	ldr	r3, [sp, #16]
 8005f90:	45c1      	cmp	r9, r8
 8005f92:	4417      	add	r7, r2
 8005f94:	441f      	add	r7, r3
 8005f96:	464b      	mov	r3, r9
 8005f98:	bfa8      	it	ge
 8005f9a:	4643      	movge	r3, r8
 8005f9c:	42bb      	cmp	r3, r7
 8005f9e:	bfa8      	it	ge
 8005fa0:	463b      	movge	r3, r7
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bfc2      	ittt	gt
 8005fa6:	eba8 0803 	subgt.w	r8, r8, r3
 8005faa:	1aff      	subgt	r7, r7, r3
 8005fac:	eba9 0903 	subgt.w	r9, r9, r3
 8005fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	dd17      	ble.n	8005fe6 <_strtod_l+0x75e>
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f001 ff0c 	bl	8007dd8 <__pow5mult>
 8005fc0:	4606      	mov	r6, r0
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	f43f aea8 	beq.w	8005d18 <_strtod_l+0x490>
 8005fc8:	4601      	mov	r1, r0
 8005fca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f001 fe59 	bl	8007c84 <__multiply>
 8005fd2:	900b      	str	r0, [sp, #44]	; 0x2c
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	f43f ae9f 	beq.w	8005d18 <_strtod_l+0x490>
 8005fda:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f001 fd39 	bl	8007a54 <_Bfree>
 8005fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fe4:	9318      	str	r3, [sp, #96]	; 0x60
 8005fe6:	f1b8 0f00 	cmp.w	r8, #0
 8005fea:	f300 808c 	bgt.w	8006106 <_strtod_l+0x87e>
 8005fee:	9b06      	ldr	r3, [sp, #24]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	dd08      	ble.n	8006006 <_strtod_l+0x77e>
 8005ff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ff6:	9905      	ldr	r1, [sp, #20]
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f001 feed 	bl	8007dd8 <__pow5mult>
 8005ffe:	9005      	str	r0, [sp, #20]
 8006000:	2800      	cmp	r0, #0
 8006002:	f43f ae89 	beq.w	8005d18 <_strtod_l+0x490>
 8006006:	2f00      	cmp	r7, #0
 8006008:	dd08      	ble.n	800601c <_strtod_l+0x794>
 800600a:	9905      	ldr	r1, [sp, #20]
 800600c:	463a      	mov	r2, r7
 800600e:	4620      	mov	r0, r4
 8006010:	f001 ff3c 	bl	8007e8c <__lshift>
 8006014:	9005      	str	r0, [sp, #20]
 8006016:	2800      	cmp	r0, #0
 8006018:	f43f ae7e 	beq.w	8005d18 <_strtod_l+0x490>
 800601c:	f1b9 0f00 	cmp.w	r9, #0
 8006020:	dd08      	ble.n	8006034 <_strtod_l+0x7ac>
 8006022:	4631      	mov	r1, r6
 8006024:	464a      	mov	r2, r9
 8006026:	4620      	mov	r0, r4
 8006028:	f001 ff30 	bl	8007e8c <__lshift>
 800602c:	4606      	mov	r6, r0
 800602e:	2800      	cmp	r0, #0
 8006030:	f43f ae72 	beq.w	8005d18 <_strtod_l+0x490>
 8006034:	9a05      	ldr	r2, [sp, #20]
 8006036:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006038:	4620      	mov	r0, r4
 800603a:	f001 ffb3 	bl	8007fa4 <__mdiff>
 800603e:	4605      	mov	r5, r0
 8006040:	2800      	cmp	r0, #0
 8006042:	f43f ae69 	beq.w	8005d18 <_strtod_l+0x490>
 8006046:	68c3      	ldr	r3, [r0, #12]
 8006048:	930b      	str	r3, [sp, #44]	; 0x2c
 800604a:	2300      	movs	r3, #0
 800604c:	60c3      	str	r3, [r0, #12]
 800604e:	4631      	mov	r1, r6
 8006050:	f001 ff8c 	bl	8007f6c <__mcmp>
 8006054:	2800      	cmp	r0, #0
 8006056:	da60      	bge.n	800611a <_strtod_l+0x892>
 8006058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800605a:	ea53 030a 	orrs.w	r3, r3, sl
 800605e:	f040 8082 	bne.w	8006166 <_strtod_l+0x8de>
 8006062:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006066:	2b00      	cmp	r3, #0
 8006068:	d17d      	bne.n	8006166 <_strtod_l+0x8de>
 800606a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800606e:	0d1b      	lsrs	r3, r3, #20
 8006070:	051b      	lsls	r3, r3, #20
 8006072:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006076:	d976      	bls.n	8006166 <_strtod_l+0x8de>
 8006078:	696b      	ldr	r3, [r5, #20]
 800607a:	b913      	cbnz	r3, 8006082 <_strtod_l+0x7fa>
 800607c:	692b      	ldr	r3, [r5, #16]
 800607e:	2b01      	cmp	r3, #1
 8006080:	dd71      	ble.n	8006166 <_strtod_l+0x8de>
 8006082:	4629      	mov	r1, r5
 8006084:	2201      	movs	r2, #1
 8006086:	4620      	mov	r0, r4
 8006088:	f001 ff00 	bl	8007e8c <__lshift>
 800608c:	4631      	mov	r1, r6
 800608e:	4605      	mov	r5, r0
 8006090:	f001 ff6c 	bl	8007f6c <__mcmp>
 8006094:	2800      	cmp	r0, #0
 8006096:	dd66      	ble.n	8006166 <_strtod_l+0x8de>
 8006098:	9904      	ldr	r1, [sp, #16]
 800609a:	4a53      	ldr	r2, [pc, #332]	; (80061e8 <_strtod_l+0x960>)
 800609c:	465b      	mov	r3, fp
 800609e:	2900      	cmp	r1, #0
 80060a0:	f000 8081 	beq.w	80061a6 <_strtod_l+0x91e>
 80060a4:	ea02 010b 	and.w	r1, r2, fp
 80060a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80060ac:	dc7b      	bgt.n	80061a6 <_strtod_l+0x91e>
 80060ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80060b2:	f77f aea9 	ble.w	8005e08 <_strtod_l+0x580>
 80060b6:	4b4d      	ldr	r3, [pc, #308]	; (80061ec <_strtod_l+0x964>)
 80060b8:	4650      	mov	r0, sl
 80060ba:	4659      	mov	r1, fp
 80060bc:	2200      	movs	r2, #0
 80060be:	f7fa fa9b 	bl	80005f8 <__aeabi_dmul>
 80060c2:	460b      	mov	r3, r1
 80060c4:	4303      	orrs	r3, r0
 80060c6:	bf08      	it	eq
 80060c8:	2322      	moveq	r3, #34	; 0x22
 80060ca:	4682      	mov	sl, r0
 80060cc:	468b      	mov	fp, r1
 80060ce:	bf08      	it	eq
 80060d0:	6023      	streq	r3, [r4, #0]
 80060d2:	e62b      	b.n	8005d2c <_strtod_l+0x4a4>
 80060d4:	f04f 32ff 	mov.w	r2, #4294967295
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	ea03 0a0a 	and.w	sl, r3, sl
 80060e0:	e6e3      	b.n	8005eaa <_strtod_l+0x622>
 80060e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80060e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80060ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80060ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80060f2:	fa01 f308 	lsl.w	r3, r1, r8
 80060f6:	9308      	str	r3, [sp, #32]
 80060f8:	910d      	str	r1, [sp, #52]	; 0x34
 80060fa:	e746      	b.n	8005f8a <_strtod_l+0x702>
 80060fc:	2300      	movs	r3, #0
 80060fe:	9308      	str	r3, [sp, #32]
 8006100:	2301      	movs	r3, #1
 8006102:	930d      	str	r3, [sp, #52]	; 0x34
 8006104:	e741      	b.n	8005f8a <_strtod_l+0x702>
 8006106:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006108:	4642      	mov	r2, r8
 800610a:	4620      	mov	r0, r4
 800610c:	f001 febe 	bl	8007e8c <__lshift>
 8006110:	9018      	str	r0, [sp, #96]	; 0x60
 8006112:	2800      	cmp	r0, #0
 8006114:	f47f af6b 	bne.w	8005fee <_strtod_l+0x766>
 8006118:	e5fe      	b.n	8005d18 <_strtod_l+0x490>
 800611a:	465f      	mov	r7, fp
 800611c:	d16e      	bne.n	80061fc <_strtod_l+0x974>
 800611e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006120:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006124:	b342      	cbz	r2, 8006178 <_strtod_l+0x8f0>
 8006126:	4a32      	ldr	r2, [pc, #200]	; (80061f0 <_strtod_l+0x968>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d128      	bne.n	800617e <_strtod_l+0x8f6>
 800612c:	9b04      	ldr	r3, [sp, #16]
 800612e:	4651      	mov	r1, sl
 8006130:	b1eb      	cbz	r3, 800616e <_strtod_l+0x8e6>
 8006132:	4b2d      	ldr	r3, [pc, #180]	; (80061e8 <_strtod_l+0x960>)
 8006134:	403b      	ands	r3, r7
 8006136:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800613a:	f04f 32ff 	mov.w	r2, #4294967295
 800613e:	d819      	bhi.n	8006174 <_strtod_l+0x8ec>
 8006140:	0d1b      	lsrs	r3, r3, #20
 8006142:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	4299      	cmp	r1, r3
 800614c:	d117      	bne.n	800617e <_strtod_l+0x8f6>
 800614e:	4b29      	ldr	r3, [pc, #164]	; (80061f4 <_strtod_l+0x96c>)
 8006150:	429f      	cmp	r7, r3
 8006152:	d102      	bne.n	800615a <_strtod_l+0x8d2>
 8006154:	3101      	adds	r1, #1
 8006156:	f43f addf 	beq.w	8005d18 <_strtod_l+0x490>
 800615a:	4b23      	ldr	r3, [pc, #140]	; (80061e8 <_strtod_l+0x960>)
 800615c:	403b      	ands	r3, r7
 800615e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006162:	f04f 0a00 	mov.w	sl, #0
 8006166:	9b04      	ldr	r3, [sp, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1a4      	bne.n	80060b6 <_strtod_l+0x82e>
 800616c:	e5de      	b.n	8005d2c <_strtod_l+0x4a4>
 800616e:	f04f 33ff 	mov.w	r3, #4294967295
 8006172:	e7ea      	b.n	800614a <_strtod_l+0x8c2>
 8006174:	4613      	mov	r3, r2
 8006176:	e7e8      	b.n	800614a <_strtod_l+0x8c2>
 8006178:	ea53 030a 	orrs.w	r3, r3, sl
 800617c:	d08c      	beq.n	8006098 <_strtod_l+0x810>
 800617e:	9b08      	ldr	r3, [sp, #32]
 8006180:	b1db      	cbz	r3, 80061ba <_strtod_l+0x932>
 8006182:	423b      	tst	r3, r7
 8006184:	d0ef      	beq.n	8006166 <_strtod_l+0x8de>
 8006186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006188:	9a04      	ldr	r2, [sp, #16]
 800618a:	4650      	mov	r0, sl
 800618c:	4659      	mov	r1, fp
 800618e:	b1c3      	cbz	r3, 80061c2 <_strtod_l+0x93a>
 8006190:	f7ff fb5e 	bl	8005850 <sulp>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	ec51 0b18 	vmov	r0, r1, d8
 800619c:	f7fa f876 	bl	800028c <__adddf3>
 80061a0:	4682      	mov	sl, r0
 80061a2:	468b      	mov	fp, r1
 80061a4:	e7df      	b.n	8006166 <_strtod_l+0x8de>
 80061a6:	4013      	ands	r3, r2
 80061a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80061ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80061b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80061b4:	f04f 3aff 	mov.w	sl, #4294967295
 80061b8:	e7d5      	b.n	8006166 <_strtod_l+0x8de>
 80061ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061bc:	ea13 0f0a 	tst.w	r3, sl
 80061c0:	e7e0      	b.n	8006184 <_strtod_l+0x8fc>
 80061c2:	f7ff fb45 	bl	8005850 <sulp>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	ec51 0b18 	vmov	r0, r1, d8
 80061ce:	f7fa f85b 	bl	8000288 <__aeabi_dsub>
 80061d2:	2200      	movs	r2, #0
 80061d4:	2300      	movs	r3, #0
 80061d6:	4682      	mov	sl, r0
 80061d8:	468b      	mov	fp, r1
 80061da:	f7fa fc75 	bl	8000ac8 <__aeabi_dcmpeq>
 80061de:	2800      	cmp	r0, #0
 80061e0:	d0c1      	beq.n	8006166 <_strtod_l+0x8de>
 80061e2:	e611      	b.n	8005e08 <_strtod_l+0x580>
 80061e4:	fffffc02 	.word	0xfffffc02
 80061e8:	7ff00000 	.word	0x7ff00000
 80061ec:	39500000 	.word	0x39500000
 80061f0:	000fffff 	.word	0x000fffff
 80061f4:	7fefffff 	.word	0x7fefffff
 80061f8:	0800a300 	.word	0x0800a300
 80061fc:	4631      	mov	r1, r6
 80061fe:	4628      	mov	r0, r5
 8006200:	f002 f832 	bl	8008268 <__ratio>
 8006204:	ec59 8b10 	vmov	r8, r9, d0
 8006208:	ee10 0a10 	vmov	r0, s0
 800620c:	2200      	movs	r2, #0
 800620e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006212:	4649      	mov	r1, r9
 8006214:	f7fa fc6c 	bl	8000af0 <__aeabi_dcmple>
 8006218:	2800      	cmp	r0, #0
 800621a:	d07a      	beq.n	8006312 <_strtod_l+0xa8a>
 800621c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d04a      	beq.n	80062b8 <_strtod_l+0xa30>
 8006222:	4b95      	ldr	r3, [pc, #596]	; (8006478 <_strtod_l+0xbf0>)
 8006224:	2200      	movs	r2, #0
 8006226:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800622a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006478 <_strtod_l+0xbf0>
 800622e:	f04f 0800 	mov.w	r8, #0
 8006232:	4b92      	ldr	r3, [pc, #584]	; (800647c <_strtod_l+0xbf4>)
 8006234:	403b      	ands	r3, r7
 8006236:	930d      	str	r3, [sp, #52]	; 0x34
 8006238:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800623a:	4b91      	ldr	r3, [pc, #580]	; (8006480 <_strtod_l+0xbf8>)
 800623c:	429a      	cmp	r2, r3
 800623e:	f040 80b0 	bne.w	80063a2 <_strtod_l+0xb1a>
 8006242:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006246:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800624a:	ec4b ab10 	vmov	d0, sl, fp
 800624e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006252:	f001 ff31 	bl	80080b8 <__ulp>
 8006256:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800625a:	ec53 2b10 	vmov	r2, r3, d0
 800625e:	f7fa f9cb 	bl	80005f8 <__aeabi_dmul>
 8006262:	4652      	mov	r2, sl
 8006264:	465b      	mov	r3, fp
 8006266:	f7fa f811 	bl	800028c <__adddf3>
 800626a:	460b      	mov	r3, r1
 800626c:	4983      	ldr	r1, [pc, #524]	; (800647c <_strtod_l+0xbf4>)
 800626e:	4a85      	ldr	r2, [pc, #532]	; (8006484 <_strtod_l+0xbfc>)
 8006270:	4019      	ands	r1, r3
 8006272:	4291      	cmp	r1, r2
 8006274:	4682      	mov	sl, r0
 8006276:	d960      	bls.n	800633a <_strtod_l+0xab2>
 8006278:	ee18 3a90 	vmov	r3, s17
 800627c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006280:	4293      	cmp	r3, r2
 8006282:	d104      	bne.n	800628e <_strtod_l+0xa06>
 8006284:	ee18 3a10 	vmov	r3, s16
 8006288:	3301      	adds	r3, #1
 800628a:	f43f ad45 	beq.w	8005d18 <_strtod_l+0x490>
 800628e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006490 <_strtod_l+0xc08>
 8006292:	f04f 3aff 	mov.w	sl, #4294967295
 8006296:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006298:	4620      	mov	r0, r4
 800629a:	f001 fbdb 	bl	8007a54 <_Bfree>
 800629e:	9905      	ldr	r1, [sp, #20]
 80062a0:	4620      	mov	r0, r4
 80062a2:	f001 fbd7 	bl	8007a54 <_Bfree>
 80062a6:	4631      	mov	r1, r6
 80062a8:	4620      	mov	r0, r4
 80062aa:	f001 fbd3 	bl	8007a54 <_Bfree>
 80062ae:	4629      	mov	r1, r5
 80062b0:	4620      	mov	r0, r4
 80062b2:	f001 fbcf 	bl	8007a54 <_Bfree>
 80062b6:	e61a      	b.n	8005eee <_strtod_l+0x666>
 80062b8:	f1ba 0f00 	cmp.w	sl, #0
 80062bc:	d11b      	bne.n	80062f6 <_strtod_l+0xa6e>
 80062be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062c2:	b9f3      	cbnz	r3, 8006302 <_strtod_l+0xa7a>
 80062c4:	4b6c      	ldr	r3, [pc, #432]	; (8006478 <_strtod_l+0xbf0>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	4640      	mov	r0, r8
 80062ca:	4649      	mov	r1, r9
 80062cc:	f7fa fc06 	bl	8000adc <__aeabi_dcmplt>
 80062d0:	b9d0      	cbnz	r0, 8006308 <_strtod_l+0xa80>
 80062d2:	4640      	mov	r0, r8
 80062d4:	4649      	mov	r1, r9
 80062d6:	4b6c      	ldr	r3, [pc, #432]	; (8006488 <_strtod_l+0xc00>)
 80062d8:	2200      	movs	r2, #0
 80062da:	f7fa f98d 	bl	80005f8 <__aeabi_dmul>
 80062de:	4680      	mov	r8, r0
 80062e0:	4689      	mov	r9, r1
 80062e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80062e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80062ea:	9315      	str	r3, [sp, #84]	; 0x54
 80062ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80062f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80062f4:	e79d      	b.n	8006232 <_strtod_l+0x9aa>
 80062f6:	f1ba 0f01 	cmp.w	sl, #1
 80062fa:	d102      	bne.n	8006302 <_strtod_l+0xa7a>
 80062fc:	2f00      	cmp	r7, #0
 80062fe:	f43f ad83 	beq.w	8005e08 <_strtod_l+0x580>
 8006302:	4b62      	ldr	r3, [pc, #392]	; (800648c <_strtod_l+0xc04>)
 8006304:	2200      	movs	r2, #0
 8006306:	e78e      	b.n	8006226 <_strtod_l+0x99e>
 8006308:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006488 <_strtod_l+0xc00>
 800630c:	f04f 0800 	mov.w	r8, #0
 8006310:	e7e7      	b.n	80062e2 <_strtod_l+0xa5a>
 8006312:	4b5d      	ldr	r3, [pc, #372]	; (8006488 <_strtod_l+0xc00>)
 8006314:	4640      	mov	r0, r8
 8006316:	4649      	mov	r1, r9
 8006318:	2200      	movs	r2, #0
 800631a:	f7fa f96d 	bl	80005f8 <__aeabi_dmul>
 800631e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006320:	4680      	mov	r8, r0
 8006322:	4689      	mov	r9, r1
 8006324:	b933      	cbnz	r3, 8006334 <_strtod_l+0xaac>
 8006326:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800632a:	900e      	str	r0, [sp, #56]	; 0x38
 800632c:	930f      	str	r3, [sp, #60]	; 0x3c
 800632e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006332:	e7dd      	b.n	80062f0 <_strtod_l+0xa68>
 8006334:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006338:	e7f9      	b.n	800632e <_strtod_l+0xaa6>
 800633a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800633e:	9b04      	ldr	r3, [sp, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1a8      	bne.n	8006296 <_strtod_l+0xa0e>
 8006344:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006348:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800634a:	0d1b      	lsrs	r3, r3, #20
 800634c:	051b      	lsls	r3, r3, #20
 800634e:	429a      	cmp	r2, r3
 8006350:	d1a1      	bne.n	8006296 <_strtod_l+0xa0e>
 8006352:	4640      	mov	r0, r8
 8006354:	4649      	mov	r1, r9
 8006356:	f7fa fcaf 	bl	8000cb8 <__aeabi_d2lz>
 800635a:	f7fa f91f 	bl	800059c <__aeabi_l2d>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	4640      	mov	r0, r8
 8006364:	4649      	mov	r1, r9
 8006366:	f7f9 ff8f 	bl	8000288 <__aeabi_dsub>
 800636a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800636c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006370:	ea43 030a 	orr.w	r3, r3, sl
 8006374:	4313      	orrs	r3, r2
 8006376:	4680      	mov	r8, r0
 8006378:	4689      	mov	r9, r1
 800637a:	d055      	beq.n	8006428 <_strtod_l+0xba0>
 800637c:	a336      	add	r3, pc, #216	; (adr r3, 8006458 <_strtod_l+0xbd0>)
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	f7fa fbab 	bl	8000adc <__aeabi_dcmplt>
 8006386:	2800      	cmp	r0, #0
 8006388:	f47f acd0 	bne.w	8005d2c <_strtod_l+0x4a4>
 800638c:	a334      	add	r3, pc, #208	; (adr r3, 8006460 <_strtod_l+0xbd8>)
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	4640      	mov	r0, r8
 8006394:	4649      	mov	r1, r9
 8006396:	f7fa fbbf 	bl	8000b18 <__aeabi_dcmpgt>
 800639a:	2800      	cmp	r0, #0
 800639c:	f43f af7b 	beq.w	8006296 <_strtod_l+0xa0e>
 80063a0:	e4c4      	b.n	8005d2c <_strtod_l+0x4a4>
 80063a2:	9b04      	ldr	r3, [sp, #16]
 80063a4:	b333      	cbz	r3, 80063f4 <_strtod_l+0xb6c>
 80063a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80063ac:	d822      	bhi.n	80063f4 <_strtod_l+0xb6c>
 80063ae:	a32e      	add	r3, pc, #184	; (adr r3, 8006468 <_strtod_l+0xbe0>)
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	4640      	mov	r0, r8
 80063b6:	4649      	mov	r1, r9
 80063b8:	f7fa fb9a 	bl	8000af0 <__aeabi_dcmple>
 80063bc:	b1a0      	cbz	r0, 80063e8 <_strtod_l+0xb60>
 80063be:	4649      	mov	r1, r9
 80063c0:	4640      	mov	r0, r8
 80063c2:	f7fa fbf1 	bl	8000ba8 <__aeabi_d2uiz>
 80063c6:	2801      	cmp	r0, #1
 80063c8:	bf38      	it	cc
 80063ca:	2001      	movcc	r0, #1
 80063cc:	f7fa f89a 	bl	8000504 <__aeabi_ui2d>
 80063d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063d2:	4680      	mov	r8, r0
 80063d4:	4689      	mov	r9, r1
 80063d6:	bb23      	cbnz	r3, 8006422 <_strtod_l+0xb9a>
 80063d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063dc:	9010      	str	r0, [sp, #64]	; 0x40
 80063de:	9311      	str	r3, [sp, #68]	; 0x44
 80063e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80063e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80063f0:	1a9b      	subs	r3, r3, r2
 80063f2:	9309      	str	r3, [sp, #36]	; 0x24
 80063f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80063f8:	eeb0 0a48 	vmov.f32	s0, s16
 80063fc:	eef0 0a68 	vmov.f32	s1, s17
 8006400:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006404:	f001 fe58 	bl	80080b8 <__ulp>
 8006408:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800640c:	ec53 2b10 	vmov	r2, r3, d0
 8006410:	f7fa f8f2 	bl	80005f8 <__aeabi_dmul>
 8006414:	ec53 2b18 	vmov	r2, r3, d8
 8006418:	f7f9 ff38 	bl	800028c <__adddf3>
 800641c:	4682      	mov	sl, r0
 800641e:	468b      	mov	fp, r1
 8006420:	e78d      	b.n	800633e <_strtod_l+0xab6>
 8006422:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006426:	e7db      	b.n	80063e0 <_strtod_l+0xb58>
 8006428:	a311      	add	r3, pc, #68	; (adr r3, 8006470 <_strtod_l+0xbe8>)
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	f7fa fb55 	bl	8000adc <__aeabi_dcmplt>
 8006432:	e7b2      	b.n	800639a <_strtod_l+0xb12>
 8006434:	2300      	movs	r3, #0
 8006436:	930a      	str	r3, [sp, #40]	; 0x28
 8006438:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800643a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	f7ff ba6b 	b.w	8005918 <_strtod_l+0x90>
 8006442:	2a65      	cmp	r2, #101	; 0x65
 8006444:	f43f ab5f 	beq.w	8005b06 <_strtod_l+0x27e>
 8006448:	2a45      	cmp	r2, #69	; 0x45
 800644a:	f43f ab5c 	beq.w	8005b06 <_strtod_l+0x27e>
 800644e:	2301      	movs	r3, #1
 8006450:	f7ff bb94 	b.w	8005b7c <_strtod_l+0x2f4>
 8006454:	f3af 8000 	nop.w
 8006458:	94a03595 	.word	0x94a03595
 800645c:	3fdfffff 	.word	0x3fdfffff
 8006460:	35afe535 	.word	0x35afe535
 8006464:	3fe00000 	.word	0x3fe00000
 8006468:	ffc00000 	.word	0xffc00000
 800646c:	41dfffff 	.word	0x41dfffff
 8006470:	94a03595 	.word	0x94a03595
 8006474:	3fcfffff 	.word	0x3fcfffff
 8006478:	3ff00000 	.word	0x3ff00000
 800647c:	7ff00000 	.word	0x7ff00000
 8006480:	7fe00000 	.word	0x7fe00000
 8006484:	7c9fffff 	.word	0x7c9fffff
 8006488:	3fe00000 	.word	0x3fe00000
 800648c:	bff00000 	.word	0xbff00000
 8006490:	7fefffff 	.word	0x7fefffff

08006494 <_strtod_r>:
 8006494:	4b01      	ldr	r3, [pc, #4]	; (800649c <_strtod_r+0x8>)
 8006496:	f7ff b9f7 	b.w	8005888 <_strtod_l>
 800649a:	bf00      	nop
 800649c:	20000074 	.word	0x20000074

080064a0 <_strtol_l.constprop.0>:
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a6:	d001      	beq.n	80064ac <_strtol_l.constprop.0+0xc>
 80064a8:	2b24      	cmp	r3, #36	; 0x24
 80064aa:	d906      	bls.n	80064ba <_strtol_l.constprop.0+0x1a>
 80064ac:	f7fe fafe 	bl	8004aac <__errno>
 80064b0:	2316      	movs	r3, #22
 80064b2:	6003      	str	r3, [r0, #0]
 80064b4:	2000      	movs	r0, #0
 80064b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80065a0 <_strtol_l.constprop.0+0x100>
 80064be:	460d      	mov	r5, r1
 80064c0:	462e      	mov	r6, r5
 80064c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80064ca:	f017 0708 	ands.w	r7, r7, #8
 80064ce:	d1f7      	bne.n	80064c0 <_strtol_l.constprop.0+0x20>
 80064d0:	2c2d      	cmp	r4, #45	; 0x2d
 80064d2:	d132      	bne.n	800653a <_strtol_l.constprop.0+0x9a>
 80064d4:	782c      	ldrb	r4, [r5, #0]
 80064d6:	2701      	movs	r7, #1
 80064d8:	1cb5      	adds	r5, r6, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d05b      	beq.n	8006596 <_strtol_l.constprop.0+0xf6>
 80064de:	2b10      	cmp	r3, #16
 80064e0:	d109      	bne.n	80064f6 <_strtol_l.constprop.0+0x56>
 80064e2:	2c30      	cmp	r4, #48	; 0x30
 80064e4:	d107      	bne.n	80064f6 <_strtol_l.constprop.0+0x56>
 80064e6:	782c      	ldrb	r4, [r5, #0]
 80064e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80064ec:	2c58      	cmp	r4, #88	; 0x58
 80064ee:	d14d      	bne.n	800658c <_strtol_l.constprop.0+0xec>
 80064f0:	786c      	ldrb	r4, [r5, #1]
 80064f2:	2310      	movs	r3, #16
 80064f4:	3502      	adds	r5, #2
 80064f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80064fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80064fe:	f04f 0c00 	mov.w	ip, #0
 8006502:	fbb8 f9f3 	udiv	r9, r8, r3
 8006506:	4666      	mov	r6, ip
 8006508:	fb03 8a19 	mls	sl, r3, r9, r8
 800650c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006510:	f1be 0f09 	cmp.w	lr, #9
 8006514:	d816      	bhi.n	8006544 <_strtol_l.constprop.0+0xa4>
 8006516:	4674      	mov	r4, lr
 8006518:	42a3      	cmp	r3, r4
 800651a:	dd24      	ble.n	8006566 <_strtol_l.constprop.0+0xc6>
 800651c:	f1bc 0f00 	cmp.w	ip, #0
 8006520:	db1e      	blt.n	8006560 <_strtol_l.constprop.0+0xc0>
 8006522:	45b1      	cmp	r9, r6
 8006524:	d31c      	bcc.n	8006560 <_strtol_l.constprop.0+0xc0>
 8006526:	d101      	bne.n	800652c <_strtol_l.constprop.0+0x8c>
 8006528:	45a2      	cmp	sl, r4
 800652a:	db19      	blt.n	8006560 <_strtol_l.constprop.0+0xc0>
 800652c:	fb06 4603 	mla	r6, r6, r3, r4
 8006530:	f04f 0c01 	mov.w	ip, #1
 8006534:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006538:	e7e8      	b.n	800650c <_strtol_l.constprop.0+0x6c>
 800653a:	2c2b      	cmp	r4, #43	; 0x2b
 800653c:	bf04      	itt	eq
 800653e:	782c      	ldrbeq	r4, [r5, #0]
 8006540:	1cb5      	addeq	r5, r6, #2
 8006542:	e7ca      	b.n	80064da <_strtol_l.constprop.0+0x3a>
 8006544:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006548:	f1be 0f19 	cmp.w	lr, #25
 800654c:	d801      	bhi.n	8006552 <_strtol_l.constprop.0+0xb2>
 800654e:	3c37      	subs	r4, #55	; 0x37
 8006550:	e7e2      	b.n	8006518 <_strtol_l.constprop.0+0x78>
 8006552:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006556:	f1be 0f19 	cmp.w	lr, #25
 800655a:	d804      	bhi.n	8006566 <_strtol_l.constprop.0+0xc6>
 800655c:	3c57      	subs	r4, #87	; 0x57
 800655e:	e7db      	b.n	8006518 <_strtol_l.constprop.0+0x78>
 8006560:	f04f 3cff 	mov.w	ip, #4294967295
 8006564:	e7e6      	b.n	8006534 <_strtol_l.constprop.0+0x94>
 8006566:	f1bc 0f00 	cmp.w	ip, #0
 800656a:	da05      	bge.n	8006578 <_strtol_l.constprop.0+0xd8>
 800656c:	2322      	movs	r3, #34	; 0x22
 800656e:	6003      	str	r3, [r0, #0]
 8006570:	4646      	mov	r6, r8
 8006572:	b942      	cbnz	r2, 8006586 <_strtol_l.constprop.0+0xe6>
 8006574:	4630      	mov	r0, r6
 8006576:	e79e      	b.n	80064b6 <_strtol_l.constprop.0+0x16>
 8006578:	b107      	cbz	r7, 800657c <_strtol_l.constprop.0+0xdc>
 800657a:	4276      	negs	r6, r6
 800657c:	2a00      	cmp	r2, #0
 800657e:	d0f9      	beq.n	8006574 <_strtol_l.constprop.0+0xd4>
 8006580:	f1bc 0f00 	cmp.w	ip, #0
 8006584:	d000      	beq.n	8006588 <_strtol_l.constprop.0+0xe8>
 8006586:	1e69      	subs	r1, r5, #1
 8006588:	6011      	str	r1, [r2, #0]
 800658a:	e7f3      	b.n	8006574 <_strtol_l.constprop.0+0xd4>
 800658c:	2430      	movs	r4, #48	; 0x30
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1b1      	bne.n	80064f6 <_strtol_l.constprop.0+0x56>
 8006592:	2308      	movs	r3, #8
 8006594:	e7af      	b.n	80064f6 <_strtol_l.constprop.0+0x56>
 8006596:	2c30      	cmp	r4, #48	; 0x30
 8006598:	d0a5      	beq.n	80064e6 <_strtol_l.constprop.0+0x46>
 800659a:	230a      	movs	r3, #10
 800659c:	e7ab      	b.n	80064f6 <_strtol_l.constprop.0+0x56>
 800659e:	bf00      	nop
 80065a0:	0800a329 	.word	0x0800a329

080065a4 <_strtol_r>:
 80065a4:	f7ff bf7c 	b.w	80064a0 <_strtol_l.constprop.0>

080065a8 <quorem>:
 80065a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	6903      	ldr	r3, [r0, #16]
 80065ae:	690c      	ldr	r4, [r1, #16]
 80065b0:	42a3      	cmp	r3, r4
 80065b2:	4607      	mov	r7, r0
 80065b4:	f2c0 8081 	blt.w	80066ba <quorem+0x112>
 80065b8:	3c01      	subs	r4, #1
 80065ba:	f101 0814 	add.w	r8, r1, #20
 80065be:	f100 0514 	add.w	r5, r0, #20
 80065c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065c6:	9301      	str	r3, [sp, #4]
 80065c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065d0:	3301      	adds	r3, #1
 80065d2:	429a      	cmp	r2, r3
 80065d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80065d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80065dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80065e0:	d331      	bcc.n	8006646 <quorem+0x9e>
 80065e2:	f04f 0e00 	mov.w	lr, #0
 80065e6:	4640      	mov	r0, r8
 80065e8:	46ac      	mov	ip, r5
 80065ea:	46f2      	mov	sl, lr
 80065ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80065f0:	b293      	uxth	r3, r2
 80065f2:	fb06 e303 	mla	r3, r6, r3, lr
 80065f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	ebaa 0303 	sub.w	r3, sl, r3
 8006600:	f8dc a000 	ldr.w	sl, [ip]
 8006604:	0c12      	lsrs	r2, r2, #16
 8006606:	fa13 f38a 	uxtah	r3, r3, sl
 800660a:	fb06 e202 	mla	r2, r6, r2, lr
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	9b00      	ldr	r3, [sp, #0]
 8006612:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006616:	b292      	uxth	r2, r2
 8006618:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800661c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006620:	f8bd 3000 	ldrh.w	r3, [sp]
 8006624:	4581      	cmp	r9, r0
 8006626:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800662a:	f84c 3b04 	str.w	r3, [ip], #4
 800662e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006632:	d2db      	bcs.n	80065ec <quorem+0x44>
 8006634:	f855 300b 	ldr.w	r3, [r5, fp]
 8006638:	b92b      	cbnz	r3, 8006646 <quorem+0x9e>
 800663a:	9b01      	ldr	r3, [sp, #4]
 800663c:	3b04      	subs	r3, #4
 800663e:	429d      	cmp	r5, r3
 8006640:	461a      	mov	r2, r3
 8006642:	d32e      	bcc.n	80066a2 <quorem+0xfa>
 8006644:	613c      	str	r4, [r7, #16]
 8006646:	4638      	mov	r0, r7
 8006648:	f001 fc90 	bl	8007f6c <__mcmp>
 800664c:	2800      	cmp	r0, #0
 800664e:	db24      	blt.n	800669a <quorem+0xf2>
 8006650:	3601      	adds	r6, #1
 8006652:	4628      	mov	r0, r5
 8006654:	f04f 0c00 	mov.w	ip, #0
 8006658:	f858 2b04 	ldr.w	r2, [r8], #4
 800665c:	f8d0 e000 	ldr.w	lr, [r0]
 8006660:	b293      	uxth	r3, r2
 8006662:	ebac 0303 	sub.w	r3, ip, r3
 8006666:	0c12      	lsrs	r2, r2, #16
 8006668:	fa13 f38e 	uxtah	r3, r3, lr
 800666c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006670:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006674:	b29b      	uxth	r3, r3
 8006676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800667a:	45c1      	cmp	r9, r8
 800667c:	f840 3b04 	str.w	r3, [r0], #4
 8006680:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006684:	d2e8      	bcs.n	8006658 <quorem+0xb0>
 8006686:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800668a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800668e:	b922      	cbnz	r2, 800669a <quorem+0xf2>
 8006690:	3b04      	subs	r3, #4
 8006692:	429d      	cmp	r5, r3
 8006694:	461a      	mov	r2, r3
 8006696:	d30a      	bcc.n	80066ae <quorem+0x106>
 8006698:	613c      	str	r4, [r7, #16]
 800669a:	4630      	mov	r0, r6
 800669c:	b003      	add	sp, #12
 800669e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a2:	6812      	ldr	r2, [r2, #0]
 80066a4:	3b04      	subs	r3, #4
 80066a6:	2a00      	cmp	r2, #0
 80066a8:	d1cc      	bne.n	8006644 <quorem+0x9c>
 80066aa:	3c01      	subs	r4, #1
 80066ac:	e7c7      	b.n	800663e <quorem+0x96>
 80066ae:	6812      	ldr	r2, [r2, #0]
 80066b0:	3b04      	subs	r3, #4
 80066b2:	2a00      	cmp	r2, #0
 80066b4:	d1f0      	bne.n	8006698 <quorem+0xf0>
 80066b6:	3c01      	subs	r4, #1
 80066b8:	e7eb      	b.n	8006692 <quorem+0xea>
 80066ba:	2000      	movs	r0, #0
 80066bc:	e7ee      	b.n	800669c <quorem+0xf4>
	...

080066c0 <_dtoa_r>:
 80066c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c4:	ed2d 8b04 	vpush	{d8-d9}
 80066c8:	ec57 6b10 	vmov	r6, r7, d0
 80066cc:	b093      	sub	sp, #76	; 0x4c
 80066ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80066d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80066d4:	9106      	str	r1, [sp, #24]
 80066d6:	ee10 aa10 	vmov	sl, s0
 80066da:	4604      	mov	r4, r0
 80066dc:	9209      	str	r2, [sp, #36]	; 0x24
 80066de:	930c      	str	r3, [sp, #48]	; 0x30
 80066e0:	46bb      	mov	fp, r7
 80066e2:	b975      	cbnz	r5, 8006702 <_dtoa_r+0x42>
 80066e4:	2010      	movs	r0, #16
 80066e6:	f001 f94d 	bl	8007984 <malloc>
 80066ea:	4602      	mov	r2, r0
 80066ec:	6260      	str	r0, [r4, #36]	; 0x24
 80066ee:	b920      	cbnz	r0, 80066fa <_dtoa_r+0x3a>
 80066f0:	4ba7      	ldr	r3, [pc, #668]	; (8006990 <_dtoa_r+0x2d0>)
 80066f2:	21ea      	movs	r1, #234	; 0xea
 80066f4:	48a7      	ldr	r0, [pc, #668]	; (8006994 <_dtoa_r+0x2d4>)
 80066f6:	f002 f8bd 	bl	8008874 <__assert_func>
 80066fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80066fe:	6005      	str	r5, [r0, #0]
 8006700:	60c5      	str	r5, [r0, #12]
 8006702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006704:	6819      	ldr	r1, [r3, #0]
 8006706:	b151      	cbz	r1, 800671e <_dtoa_r+0x5e>
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	604a      	str	r2, [r1, #4]
 800670c:	2301      	movs	r3, #1
 800670e:	4093      	lsls	r3, r2
 8006710:	608b      	str	r3, [r1, #8]
 8006712:	4620      	mov	r0, r4
 8006714:	f001 f99e 	bl	8007a54 <_Bfree>
 8006718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	1e3b      	subs	r3, r7, #0
 8006720:	bfaa      	itet	ge
 8006722:	2300      	movge	r3, #0
 8006724:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006728:	f8c8 3000 	strge.w	r3, [r8]
 800672c:	4b9a      	ldr	r3, [pc, #616]	; (8006998 <_dtoa_r+0x2d8>)
 800672e:	bfbc      	itt	lt
 8006730:	2201      	movlt	r2, #1
 8006732:	f8c8 2000 	strlt.w	r2, [r8]
 8006736:	ea33 030b 	bics.w	r3, r3, fp
 800673a:	d11b      	bne.n	8006774 <_dtoa_r+0xb4>
 800673c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800673e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006742:	6013      	str	r3, [r2, #0]
 8006744:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006748:	4333      	orrs	r3, r6
 800674a:	f000 8592 	beq.w	8007272 <_dtoa_r+0xbb2>
 800674e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006750:	b963      	cbnz	r3, 800676c <_dtoa_r+0xac>
 8006752:	4b92      	ldr	r3, [pc, #584]	; (800699c <_dtoa_r+0x2dc>)
 8006754:	e022      	b.n	800679c <_dtoa_r+0xdc>
 8006756:	4b92      	ldr	r3, [pc, #584]	; (80069a0 <_dtoa_r+0x2e0>)
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	3308      	adds	r3, #8
 800675c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	9801      	ldr	r0, [sp, #4]
 8006762:	b013      	add	sp, #76	; 0x4c
 8006764:	ecbd 8b04 	vpop	{d8-d9}
 8006768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676c:	4b8b      	ldr	r3, [pc, #556]	; (800699c <_dtoa_r+0x2dc>)
 800676e:	9301      	str	r3, [sp, #4]
 8006770:	3303      	adds	r3, #3
 8006772:	e7f3      	b.n	800675c <_dtoa_r+0x9c>
 8006774:	2200      	movs	r2, #0
 8006776:	2300      	movs	r3, #0
 8006778:	4650      	mov	r0, sl
 800677a:	4659      	mov	r1, fp
 800677c:	f7fa f9a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006780:	ec4b ab19 	vmov	d9, sl, fp
 8006784:	4680      	mov	r8, r0
 8006786:	b158      	cbz	r0, 80067a0 <_dtoa_r+0xe0>
 8006788:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800678a:	2301      	movs	r3, #1
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 856b 	beq.w	800726c <_dtoa_r+0xbac>
 8006796:	4883      	ldr	r0, [pc, #524]	; (80069a4 <_dtoa_r+0x2e4>)
 8006798:	6018      	str	r0, [r3, #0]
 800679a:	1e43      	subs	r3, r0, #1
 800679c:	9301      	str	r3, [sp, #4]
 800679e:	e7df      	b.n	8006760 <_dtoa_r+0xa0>
 80067a0:	ec4b ab10 	vmov	d0, sl, fp
 80067a4:	aa10      	add	r2, sp, #64	; 0x40
 80067a6:	a911      	add	r1, sp, #68	; 0x44
 80067a8:	4620      	mov	r0, r4
 80067aa:	f001 fd01 	bl	80081b0 <__d2b>
 80067ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80067b2:	ee08 0a10 	vmov	s16, r0
 80067b6:	2d00      	cmp	r5, #0
 80067b8:	f000 8084 	beq.w	80068c4 <_dtoa_r+0x204>
 80067bc:	ee19 3a90 	vmov	r3, s19
 80067c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80067c8:	4656      	mov	r6, sl
 80067ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80067ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80067d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80067d6:	4b74      	ldr	r3, [pc, #464]	; (80069a8 <_dtoa_r+0x2e8>)
 80067d8:	2200      	movs	r2, #0
 80067da:	4630      	mov	r0, r6
 80067dc:	4639      	mov	r1, r7
 80067de:	f7f9 fd53 	bl	8000288 <__aeabi_dsub>
 80067e2:	a365      	add	r3, pc, #404	; (adr r3, 8006978 <_dtoa_r+0x2b8>)
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	f7f9 ff06 	bl	80005f8 <__aeabi_dmul>
 80067ec:	a364      	add	r3, pc, #400	; (adr r3, 8006980 <_dtoa_r+0x2c0>)
 80067ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f2:	f7f9 fd4b 	bl	800028c <__adddf3>
 80067f6:	4606      	mov	r6, r0
 80067f8:	4628      	mov	r0, r5
 80067fa:	460f      	mov	r7, r1
 80067fc:	f7f9 fe92 	bl	8000524 <__aeabi_i2d>
 8006800:	a361      	add	r3, pc, #388	; (adr r3, 8006988 <_dtoa_r+0x2c8>)
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	f7f9 fef7 	bl	80005f8 <__aeabi_dmul>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	4630      	mov	r0, r6
 8006810:	4639      	mov	r1, r7
 8006812:	f7f9 fd3b 	bl	800028c <__adddf3>
 8006816:	4606      	mov	r6, r0
 8006818:	460f      	mov	r7, r1
 800681a:	f7fa f99d 	bl	8000b58 <__aeabi_d2iz>
 800681e:	2200      	movs	r2, #0
 8006820:	9000      	str	r0, [sp, #0]
 8006822:	2300      	movs	r3, #0
 8006824:	4630      	mov	r0, r6
 8006826:	4639      	mov	r1, r7
 8006828:	f7fa f958 	bl	8000adc <__aeabi_dcmplt>
 800682c:	b150      	cbz	r0, 8006844 <_dtoa_r+0x184>
 800682e:	9800      	ldr	r0, [sp, #0]
 8006830:	f7f9 fe78 	bl	8000524 <__aeabi_i2d>
 8006834:	4632      	mov	r2, r6
 8006836:	463b      	mov	r3, r7
 8006838:	f7fa f946 	bl	8000ac8 <__aeabi_dcmpeq>
 800683c:	b910      	cbnz	r0, 8006844 <_dtoa_r+0x184>
 800683e:	9b00      	ldr	r3, [sp, #0]
 8006840:	3b01      	subs	r3, #1
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	9b00      	ldr	r3, [sp, #0]
 8006846:	2b16      	cmp	r3, #22
 8006848:	d85a      	bhi.n	8006900 <_dtoa_r+0x240>
 800684a:	9a00      	ldr	r2, [sp, #0]
 800684c:	4b57      	ldr	r3, [pc, #348]	; (80069ac <_dtoa_r+0x2ec>)
 800684e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	ec51 0b19 	vmov	r0, r1, d9
 800685a:	f7fa f93f 	bl	8000adc <__aeabi_dcmplt>
 800685e:	2800      	cmp	r0, #0
 8006860:	d050      	beq.n	8006904 <_dtoa_r+0x244>
 8006862:	9b00      	ldr	r3, [sp, #0]
 8006864:	3b01      	subs	r3, #1
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	2300      	movs	r3, #0
 800686a:	930b      	str	r3, [sp, #44]	; 0x2c
 800686c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800686e:	1b5d      	subs	r5, r3, r5
 8006870:	1e6b      	subs	r3, r5, #1
 8006872:	9305      	str	r3, [sp, #20]
 8006874:	bf45      	ittet	mi
 8006876:	f1c5 0301 	rsbmi	r3, r5, #1
 800687a:	9304      	strmi	r3, [sp, #16]
 800687c:	2300      	movpl	r3, #0
 800687e:	2300      	movmi	r3, #0
 8006880:	bf4c      	ite	mi
 8006882:	9305      	strmi	r3, [sp, #20]
 8006884:	9304      	strpl	r3, [sp, #16]
 8006886:	9b00      	ldr	r3, [sp, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	db3d      	blt.n	8006908 <_dtoa_r+0x248>
 800688c:	9b05      	ldr	r3, [sp, #20]
 800688e:	9a00      	ldr	r2, [sp, #0]
 8006890:	920a      	str	r2, [sp, #40]	; 0x28
 8006892:	4413      	add	r3, r2
 8006894:	9305      	str	r3, [sp, #20]
 8006896:	2300      	movs	r3, #0
 8006898:	9307      	str	r3, [sp, #28]
 800689a:	9b06      	ldr	r3, [sp, #24]
 800689c:	2b09      	cmp	r3, #9
 800689e:	f200 8089 	bhi.w	80069b4 <_dtoa_r+0x2f4>
 80068a2:	2b05      	cmp	r3, #5
 80068a4:	bfc4      	itt	gt
 80068a6:	3b04      	subgt	r3, #4
 80068a8:	9306      	strgt	r3, [sp, #24]
 80068aa:	9b06      	ldr	r3, [sp, #24]
 80068ac:	f1a3 0302 	sub.w	r3, r3, #2
 80068b0:	bfcc      	ite	gt
 80068b2:	2500      	movgt	r5, #0
 80068b4:	2501      	movle	r5, #1
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	f200 8087 	bhi.w	80069ca <_dtoa_r+0x30a>
 80068bc:	e8df f003 	tbb	[pc, r3]
 80068c0:	59383a2d 	.word	0x59383a2d
 80068c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80068c8:	441d      	add	r5, r3
 80068ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80068ce:	2b20      	cmp	r3, #32
 80068d0:	bfc1      	itttt	gt
 80068d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80068d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80068da:	fa0b f303 	lslgt.w	r3, fp, r3
 80068de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80068e2:	bfda      	itte	le
 80068e4:	f1c3 0320 	rsble	r3, r3, #32
 80068e8:	fa06 f003 	lslle.w	r0, r6, r3
 80068ec:	4318      	orrgt	r0, r3
 80068ee:	f7f9 fe09 	bl	8000504 <__aeabi_ui2d>
 80068f2:	2301      	movs	r3, #1
 80068f4:	4606      	mov	r6, r0
 80068f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80068fa:	3d01      	subs	r5, #1
 80068fc:	930e      	str	r3, [sp, #56]	; 0x38
 80068fe:	e76a      	b.n	80067d6 <_dtoa_r+0x116>
 8006900:	2301      	movs	r3, #1
 8006902:	e7b2      	b.n	800686a <_dtoa_r+0x1aa>
 8006904:	900b      	str	r0, [sp, #44]	; 0x2c
 8006906:	e7b1      	b.n	800686c <_dtoa_r+0x1ac>
 8006908:	9b04      	ldr	r3, [sp, #16]
 800690a:	9a00      	ldr	r2, [sp, #0]
 800690c:	1a9b      	subs	r3, r3, r2
 800690e:	9304      	str	r3, [sp, #16]
 8006910:	4253      	negs	r3, r2
 8006912:	9307      	str	r3, [sp, #28]
 8006914:	2300      	movs	r3, #0
 8006916:	930a      	str	r3, [sp, #40]	; 0x28
 8006918:	e7bf      	b.n	800689a <_dtoa_r+0x1da>
 800691a:	2300      	movs	r3, #0
 800691c:	9308      	str	r3, [sp, #32]
 800691e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006920:	2b00      	cmp	r3, #0
 8006922:	dc55      	bgt.n	80069d0 <_dtoa_r+0x310>
 8006924:	2301      	movs	r3, #1
 8006926:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800692a:	461a      	mov	r2, r3
 800692c:	9209      	str	r2, [sp, #36]	; 0x24
 800692e:	e00c      	b.n	800694a <_dtoa_r+0x28a>
 8006930:	2301      	movs	r3, #1
 8006932:	e7f3      	b.n	800691c <_dtoa_r+0x25c>
 8006934:	2300      	movs	r3, #0
 8006936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006938:	9308      	str	r3, [sp, #32]
 800693a:	9b00      	ldr	r3, [sp, #0]
 800693c:	4413      	add	r3, r2
 800693e:	9302      	str	r3, [sp, #8]
 8006940:	3301      	adds	r3, #1
 8006942:	2b01      	cmp	r3, #1
 8006944:	9303      	str	r3, [sp, #12]
 8006946:	bfb8      	it	lt
 8006948:	2301      	movlt	r3, #1
 800694a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800694c:	2200      	movs	r2, #0
 800694e:	6042      	str	r2, [r0, #4]
 8006950:	2204      	movs	r2, #4
 8006952:	f102 0614 	add.w	r6, r2, #20
 8006956:	429e      	cmp	r6, r3
 8006958:	6841      	ldr	r1, [r0, #4]
 800695a:	d93d      	bls.n	80069d8 <_dtoa_r+0x318>
 800695c:	4620      	mov	r0, r4
 800695e:	f001 f839 	bl	80079d4 <_Balloc>
 8006962:	9001      	str	r0, [sp, #4]
 8006964:	2800      	cmp	r0, #0
 8006966:	d13b      	bne.n	80069e0 <_dtoa_r+0x320>
 8006968:	4b11      	ldr	r3, [pc, #68]	; (80069b0 <_dtoa_r+0x2f0>)
 800696a:	4602      	mov	r2, r0
 800696c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006970:	e6c0      	b.n	80066f4 <_dtoa_r+0x34>
 8006972:	2301      	movs	r3, #1
 8006974:	e7df      	b.n	8006936 <_dtoa_r+0x276>
 8006976:	bf00      	nop
 8006978:	636f4361 	.word	0x636f4361
 800697c:	3fd287a7 	.word	0x3fd287a7
 8006980:	8b60c8b3 	.word	0x8b60c8b3
 8006984:	3fc68a28 	.word	0x3fc68a28
 8006988:	509f79fb 	.word	0x509f79fb
 800698c:	3fd34413 	.word	0x3fd34413
 8006990:	0800a436 	.word	0x0800a436
 8006994:	0800a44d 	.word	0x0800a44d
 8006998:	7ff00000 	.word	0x7ff00000
 800699c:	0800a432 	.word	0x0800a432
 80069a0:	0800a429 	.word	0x0800a429
 80069a4:	0800a2a9 	.word	0x0800a2a9
 80069a8:	3ff80000 	.word	0x3ff80000
 80069ac:	0800a5b8 	.word	0x0800a5b8
 80069b0:	0800a4a8 	.word	0x0800a4a8
 80069b4:	2501      	movs	r5, #1
 80069b6:	2300      	movs	r3, #0
 80069b8:	9306      	str	r3, [sp, #24]
 80069ba:	9508      	str	r5, [sp, #32]
 80069bc:	f04f 33ff 	mov.w	r3, #4294967295
 80069c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80069c4:	2200      	movs	r2, #0
 80069c6:	2312      	movs	r3, #18
 80069c8:	e7b0      	b.n	800692c <_dtoa_r+0x26c>
 80069ca:	2301      	movs	r3, #1
 80069cc:	9308      	str	r3, [sp, #32]
 80069ce:	e7f5      	b.n	80069bc <_dtoa_r+0x2fc>
 80069d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80069d6:	e7b8      	b.n	800694a <_dtoa_r+0x28a>
 80069d8:	3101      	adds	r1, #1
 80069da:	6041      	str	r1, [r0, #4]
 80069dc:	0052      	lsls	r2, r2, #1
 80069de:	e7b8      	b.n	8006952 <_dtoa_r+0x292>
 80069e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069e2:	9a01      	ldr	r2, [sp, #4]
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	9b03      	ldr	r3, [sp, #12]
 80069e8:	2b0e      	cmp	r3, #14
 80069ea:	f200 809d 	bhi.w	8006b28 <_dtoa_r+0x468>
 80069ee:	2d00      	cmp	r5, #0
 80069f0:	f000 809a 	beq.w	8006b28 <_dtoa_r+0x468>
 80069f4:	9b00      	ldr	r3, [sp, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	dd32      	ble.n	8006a60 <_dtoa_r+0x3a0>
 80069fa:	4ab7      	ldr	r2, [pc, #732]	; (8006cd8 <_dtoa_r+0x618>)
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a08:	9b00      	ldr	r3, [sp, #0]
 8006a0a:	05d8      	lsls	r0, r3, #23
 8006a0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006a10:	d516      	bpl.n	8006a40 <_dtoa_r+0x380>
 8006a12:	4bb2      	ldr	r3, [pc, #712]	; (8006cdc <_dtoa_r+0x61c>)
 8006a14:	ec51 0b19 	vmov	r0, r1, d9
 8006a18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a1c:	f7f9 ff16 	bl	800084c <__aeabi_ddiv>
 8006a20:	f007 070f 	and.w	r7, r7, #15
 8006a24:	4682      	mov	sl, r0
 8006a26:	468b      	mov	fp, r1
 8006a28:	2503      	movs	r5, #3
 8006a2a:	4eac      	ldr	r6, [pc, #688]	; (8006cdc <_dtoa_r+0x61c>)
 8006a2c:	b957      	cbnz	r7, 8006a44 <_dtoa_r+0x384>
 8006a2e:	4642      	mov	r2, r8
 8006a30:	464b      	mov	r3, r9
 8006a32:	4650      	mov	r0, sl
 8006a34:	4659      	mov	r1, fp
 8006a36:	f7f9 ff09 	bl	800084c <__aeabi_ddiv>
 8006a3a:	4682      	mov	sl, r0
 8006a3c:	468b      	mov	fp, r1
 8006a3e:	e028      	b.n	8006a92 <_dtoa_r+0x3d2>
 8006a40:	2502      	movs	r5, #2
 8006a42:	e7f2      	b.n	8006a2a <_dtoa_r+0x36a>
 8006a44:	07f9      	lsls	r1, r7, #31
 8006a46:	d508      	bpl.n	8006a5a <_dtoa_r+0x39a>
 8006a48:	4640      	mov	r0, r8
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a50:	f7f9 fdd2 	bl	80005f8 <__aeabi_dmul>
 8006a54:	3501      	adds	r5, #1
 8006a56:	4680      	mov	r8, r0
 8006a58:	4689      	mov	r9, r1
 8006a5a:	107f      	asrs	r7, r7, #1
 8006a5c:	3608      	adds	r6, #8
 8006a5e:	e7e5      	b.n	8006a2c <_dtoa_r+0x36c>
 8006a60:	f000 809b 	beq.w	8006b9a <_dtoa_r+0x4da>
 8006a64:	9b00      	ldr	r3, [sp, #0]
 8006a66:	4f9d      	ldr	r7, [pc, #628]	; (8006cdc <_dtoa_r+0x61c>)
 8006a68:	425e      	negs	r6, r3
 8006a6a:	4b9b      	ldr	r3, [pc, #620]	; (8006cd8 <_dtoa_r+0x618>)
 8006a6c:	f006 020f 	and.w	r2, r6, #15
 8006a70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	ec51 0b19 	vmov	r0, r1, d9
 8006a7c:	f7f9 fdbc 	bl	80005f8 <__aeabi_dmul>
 8006a80:	1136      	asrs	r6, r6, #4
 8006a82:	4682      	mov	sl, r0
 8006a84:	468b      	mov	fp, r1
 8006a86:	2300      	movs	r3, #0
 8006a88:	2502      	movs	r5, #2
 8006a8a:	2e00      	cmp	r6, #0
 8006a8c:	d17a      	bne.n	8006b84 <_dtoa_r+0x4c4>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1d3      	bne.n	8006a3a <_dtoa_r+0x37a>
 8006a92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 8082 	beq.w	8006b9e <_dtoa_r+0x4de>
 8006a9a:	4b91      	ldr	r3, [pc, #580]	; (8006ce0 <_dtoa_r+0x620>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	4650      	mov	r0, sl
 8006aa0:	4659      	mov	r1, fp
 8006aa2:	f7fa f81b 	bl	8000adc <__aeabi_dcmplt>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d079      	beq.n	8006b9e <_dtoa_r+0x4de>
 8006aaa:	9b03      	ldr	r3, [sp, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d076      	beq.n	8006b9e <_dtoa_r+0x4de>
 8006ab0:	9b02      	ldr	r3, [sp, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	dd36      	ble.n	8006b24 <_dtoa_r+0x464>
 8006ab6:	9b00      	ldr	r3, [sp, #0]
 8006ab8:	4650      	mov	r0, sl
 8006aba:	4659      	mov	r1, fp
 8006abc:	1e5f      	subs	r7, r3, #1
 8006abe:	2200      	movs	r2, #0
 8006ac0:	4b88      	ldr	r3, [pc, #544]	; (8006ce4 <_dtoa_r+0x624>)
 8006ac2:	f7f9 fd99 	bl	80005f8 <__aeabi_dmul>
 8006ac6:	9e02      	ldr	r6, [sp, #8]
 8006ac8:	4682      	mov	sl, r0
 8006aca:	468b      	mov	fp, r1
 8006acc:	3501      	adds	r5, #1
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f7f9 fd28 	bl	8000524 <__aeabi_i2d>
 8006ad4:	4652      	mov	r2, sl
 8006ad6:	465b      	mov	r3, fp
 8006ad8:	f7f9 fd8e 	bl	80005f8 <__aeabi_dmul>
 8006adc:	4b82      	ldr	r3, [pc, #520]	; (8006ce8 <_dtoa_r+0x628>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f7f9 fbd4 	bl	800028c <__adddf3>
 8006ae4:	46d0      	mov	r8, sl
 8006ae6:	46d9      	mov	r9, fp
 8006ae8:	4682      	mov	sl, r0
 8006aea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006aee:	2e00      	cmp	r6, #0
 8006af0:	d158      	bne.n	8006ba4 <_dtoa_r+0x4e4>
 8006af2:	4b7e      	ldr	r3, [pc, #504]	; (8006cec <_dtoa_r+0x62c>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	4640      	mov	r0, r8
 8006af8:	4649      	mov	r1, r9
 8006afa:	f7f9 fbc5 	bl	8000288 <__aeabi_dsub>
 8006afe:	4652      	mov	r2, sl
 8006b00:	465b      	mov	r3, fp
 8006b02:	4680      	mov	r8, r0
 8006b04:	4689      	mov	r9, r1
 8006b06:	f7fa f807 	bl	8000b18 <__aeabi_dcmpgt>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	f040 8295 	bne.w	800703a <_dtoa_r+0x97a>
 8006b10:	4652      	mov	r2, sl
 8006b12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006b16:	4640      	mov	r0, r8
 8006b18:	4649      	mov	r1, r9
 8006b1a:	f7f9 ffdf 	bl	8000adc <__aeabi_dcmplt>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f040 8289 	bne.w	8007036 <_dtoa_r+0x976>
 8006b24:	ec5b ab19 	vmov	sl, fp, d9
 8006b28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f2c0 8148 	blt.w	8006dc0 <_dtoa_r+0x700>
 8006b30:	9a00      	ldr	r2, [sp, #0]
 8006b32:	2a0e      	cmp	r2, #14
 8006b34:	f300 8144 	bgt.w	8006dc0 <_dtoa_r+0x700>
 8006b38:	4b67      	ldr	r3, [pc, #412]	; (8006cd8 <_dtoa_r+0x618>)
 8006b3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f280 80d5 	bge.w	8006cf4 <_dtoa_r+0x634>
 8006b4a:	9b03      	ldr	r3, [sp, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f300 80d1 	bgt.w	8006cf4 <_dtoa_r+0x634>
 8006b52:	f040 826f 	bne.w	8007034 <_dtoa_r+0x974>
 8006b56:	4b65      	ldr	r3, [pc, #404]	; (8006cec <_dtoa_r+0x62c>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	4640      	mov	r0, r8
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	f7f9 fd4b 	bl	80005f8 <__aeabi_dmul>
 8006b62:	4652      	mov	r2, sl
 8006b64:	465b      	mov	r3, fp
 8006b66:	f7f9 ffcd 	bl	8000b04 <__aeabi_dcmpge>
 8006b6a:	9e03      	ldr	r6, [sp, #12]
 8006b6c:	4637      	mov	r7, r6
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	f040 8245 	bne.w	8006ffe <_dtoa_r+0x93e>
 8006b74:	9d01      	ldr	r5, [sp, #4]
 8006b76:	2331      	movs	r3, #49	; 0x31
 8006b78:	f805 3b01 	strb.w	r3, [r5], #1
 8006b7c:	9b00      	ldr	r3, [sp, #0]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	e240      	b.n	8007006 <_dtoa_r+0x946>
 8006b84:	07f2      	lsls	r2, r6, #31
 8006b86:	d505      	bpl.n	8006b94 <_dtoa_r+0x4d4>
 8006b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b8c:	f7f9 fd34 	bl	80005f8 <__aeabi_dmul>
 8006b90:	3501      	adds	r5, #1
 8006b92:	2301      	movs	r3, #1
 8006b94:	1076      	asrs	r6, r6, #1
 8006b96:	3708      	adds	r7, #8
 8006b98:	e777      	b.n	8006a8a <_dtoa_r+0x3ca>
 8006b9a:	2502      	movs	r5, #2
 8006b9c:	e779      	b.n	8006a92 <_dtoa_r+0x3d2>
 8006b9e:	9f00      	ldr	r7, [sp, #0]
 8006ba0:	9e03      	ldr	r6, [sp, #12]
 8006ba2:	e794      	b.n	8006ace <_dtoa_r+0x40e>
 8006ba4:	9901      	ldr	r1, [sp, #4]
 8006ba6:	4b4c      	ldr	r3, [pc, #304]	; (8006cd8 <_dtoa_r+0x618>)
 8006ba8:	4431      	add	r1, r6
 8006baa:	910d      	str	r1, [sp, #52]	; 0x34
 8006bac:	9908      	ldr	r1, [sp, #32]
 8006bae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006bb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006bb6:	2900      	cmp	r1, #0
 8006bb8:	d043      	beq.n	8006c42 <_dtoa_r+0x582>
 8006bba:	494d      	ldr	r1, [pc, #308]	; (8006cf0 <_dtoa_r+0x630>)
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	f7f9 fe45 	bl	800084c <__aeabi_ddiv>
 8006bc2:	4652      	mov	r2, sl
 8006bc4:	465b      	mov	r3, fp
 8006bc6:	f7f9 fb5f 	bl	8000288 <__aeabi_dsub>
 8006bca:	9d01      	ldr	r5, [sp, #4]
 8006bcc:	4682      	mov	sl, r0
 8006bce:	468b      	mov	fp, r1
 8006bd0:	4649      	mov	r1, r9
 8006bd2:	4640      	mov	r0, r8
 8006bd4:	f7f9 ffc0 	bl	8000b58 <__aeabi_d2iz>
 8006bd8:	4606      	mov	r6, r0
 8006bda:	f7f9 fca3 	bl	8000524 <__aeabi_i2d>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4640      	mov	r0, r8
 8006be4:	4649      	mov	r1, r9
 8006be6:	f7f9 fb4f 	bl	8000288 <__aeabi_dsub>
 8006bea:	3630      	adds	r6, #48	; 0x30
 8006bec:	f805 6b01 	strb.w	r6, [r5], #1
 8006bf0:	4652      	mov	r2, sl
 8006bf2:	465b      	mov	r3, fp
 8006bf4:	4680      	mov	r8, r0
 8006bf6:	4689      	mov	r9, r1
 8006bf8:	f7f9 ff70 	bl	8000adc <__aeabi_dcmplt>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d163      	bne.n	8006cc8 <_dtoa_r+0x608>
 8006c00:	4642      	mov	r2, r8
 8006c02:	464b      	mov	r3, r9
 8006c04:	4936      	ldr	r1, [pc, #216]	; (8006ce0 <_dtoa_r+0x620>)
 8006c06:	2000      	movs	r0, #0
 8006c08:	f7f9 fb3e 	bl	8000288 <__aeabi_dsub>
 8006c0c:	4652      	mov	r2, sl
 8006c0e:	465b      	mov	r3, fp
 8006c10:	f7f9 ff64 	bl	8000adc <__aeabi_dcmplt>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	f040 80b5 	bne.w	8006d84 <_dtoa_r+0x6c4>
 8006c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c1c:	429d      	cmp	r5, r3
 8006c1e:	d081      	beq.n	8006b24 <_dtoa_r+0x464>
 8006c20:	4b30      	ldr	r3, [pc, #192]	; (8006ce4 <_dtoa_r+0x624>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	4650      	mov	r0, sl
 8006c26:	4659      	mov	r1, fp
 8006c28:	f7f9 fce6 	bl	80005f8 <__aeabi_dmul>
 8006c2c:	4b2d      	ldr	r3, [pc, #180]	; (8006ce4 <_dtoa_r+0x624>)
 8006c2e:	4682      	mov	sl, r0
 8006c30:	468b      	mov	fp, r1
 8006c32:	4640      	mov	r0, r8
 8006c34:	4649      	mov	r1, r9
 8006c36:	2200      	movs	r2, #0
 8006c38:	f7f9 fcde 	bl	80005f8 <__aeabi_dmul>
 8006c3c:	4680      	mov	r8, r0
 8006c3e:	4689      	mov	r9, r1
 8006c40:	e7c6      	b.n	8006bd0 <_dtoa_r+0x510>
 8006c42:	4650      	mov	r0, sl
 8006c44:	4659      	mov	r1, fp
 8006c46:	f7f9 fcd7 	bl	80005f8 <__aeabi_dmul>
 8006c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c4c:	9d01      	ldr	r5, [sp, #4]
 8006c4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c50:	4682      	mov	sl, r0
 8006c52:	468b      	mov	fp, r1
 8006c54:	4649      	mov	r1, r9
 8006c56:	4640      	mov	r0, r8
 8006c58:	f7f9 ff7e 	bl	8000b58 <__aeabi_d2iz>
 8006c5c:	4606      	mov	r6, r0
 8006c5e:	f7f9 fc61 	bl	8000524 <__aeabi_i2d>
 8006c62:	3630      	adds	r6, #48	; 0x30
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4640      	mov	r0, r8
 8006c6a:	4649      	mov	r1, r9
 8006c6c:	f7f9 fb0c 	bl	8000288 <__aeabi_dsub>
 8006c70:	f805 6b01 	strb.w	r6, [r5], #1
 8006c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c76:	429d      	cmp	r5, r3
 8006c78:	4680      	mov	r8, r0
 8006c7a:	4689      	mov	r9, r1
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	d124      	bne.n	8006ccc <_dtoa_r+0x60c>
 8006c82:	4b1b      	ldr	r3, [pc, #108]	; (8006cf0 <_dtoa_r+0x630>)
 8006c84:	4650      	mov	r0, sl
 8006c86:	4659      	mov	r1, fp
 8006c88:	f7f9 fb00 	bl	800028c <__adddf3>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	4640      	mov	r0, r8
 8006c92:	4649      	mov	r1, r9
 8006c94:	f7f9 ff40 	bl	8000b18 <__aeabi_dcmpgt>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d173      	bne.n	8006d84 <_dtoa_r+0x6c4>
 8006c9c:	4652      	mov	r2, sl
 8006c9e:	465b      	mov	r3, fp
 8006ca0:	4913      	ldr	r1, [pc, #76]	; (8006cf0 <_dtoa_r+0x630>)
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	f7f9 faf0 	bl	8000288 <__aeabi_dsub>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	4640      	mov	r0, r8
 8006cae:	4649      	mov	r1, r9
 8006cb0:	f7f9 ff14 	bl	8000adc <__aeabi_dcmplt>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	f43f af35 	beq.w	8006b24 <_dtoa_r+0x464>
 8006cba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006cbc:	1e6b      	subs	r3, r5, #1
 8006cbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cc0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006cc4:	2b30      	cmp	r3, #48	; 0x30
 8006cc6:	d0f8      	beq.n	8006cba <_dtoa_r+0x5fa>
 8006cc8:	9700      	str	r7, [sp, #0]
 8006cca:	e049      	b.n	8006d60 <_dtoa_r+0x6a0>
 8006ccc:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <_dtoa_r+0x624>)
 8006cce:	f7f9 fc93 	bl	80005f8 <__aeabi_dmul>
 8006cd2:	4680      	mov	r8, r0
 8006cd4:	4689      	mov	r9, r1
 8006cd6:	e7bd      	b.n	8006c54 <_dtoa_r+0x594>
 8006cd8:	0800a5b8 	.word	0x0800a5b8
 8006cdc:	0800a590 	.word	0x0800a590
 8006ce0:	3ff00000 	.word	0x3ff00000
 8006ce4:	40240000 	.word	0x40240000
 8006ce8:	401c0000 	.word	0x401c0000
 8006cec:	40140000 	.word	0x40140000
 8006cf0:	3fe00000 	.word	0x3fe00000
 8006cf4:	9d01      	ldr	r5, [sp, #4]
 8006cf6:	4656      	mov	r6, sl
 8006cf8:	465f      	mov	r7, fp
 8006cfa:	4642      	mov	r2, r8
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	4630      	mov	r0, r6
 8006d00:	4639      	mov	r1, r7
 8006d02:	f7f9 fda3 	bl	800084c <__aeabi_ddiv>
 8006d06:	f7f9 ff27 	bl	8000b58 <__aeabi_d2iz>
 8006d0a:	4682      	mov	sl, r0
 8006d0c:	f7f9 fc0a 	bl	8000524 <__aeabi_i2d>
 8006d10:	4642      	mov	r2, r8
 8006d12:	464b      	mov	r3, r9
 8006d14:	f7f9 fc70 	bl	80005f8 <__aeabi_dmul>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	4639      	mov	r1, r7
 8006d20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006d24:	f7f9 fab0 	bl	8000288 <__aeabi_dsub>
 8006d28:	f805 6b01 	strb.w	r6, [r5], #1
 8006d2c:	9e01      	ldr	r6, [sp, #4]
 8006d2e:	9f03      	ldr	r7, [sp, #12]
 8006d30:	1bae      	subs	r6, r5, r6
 8006d32:	42b7      	cmp	r7, r6
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	d135      	bne.n	8006da6 <_dtoa_r+0x6e6>
 8006d3a:	f7f9 faa7 	bl	800028c <__adddf3>
 8006d3e:	4642      	mov	r2, r8
 8006d40:	464b      	mov	r3, r9
 8006d42:	4606      	mov	r6, r0
 8006d44:	460f      	mov	r7, r1
 8006d46:	f7f9 fee7 	bl	8000b18 <__aeabi_dcmpgt>
 8006d4a:	b9d0      	cbnz	r0, 8006d82 <_dtoa_r+0x6c2>
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	464b      	mov	r3, r9
 8006d50:	4630      	mov	r0, r6
 8006d52:	4639      	mov	r1, r7
 8006d54:	f7f9 feb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d58:	b110      	cbz	r0, 8006d60 <_dtoa_r+0x6a0>
 8006d5a:	f01a 0f01 	tst.w	sl, #1
 8006d5e:	d110      	bne.n	8006d82 <_dtoa_r+0x6c2>
 8006d60:	4620      	mov	r0, r4
 8006d62:	ee18 1a10 	vmov	r1, s16
 8006d66:	f000 fe75 	bl	8007a54 <_Bfree>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	9800      	ldr	r0, [sp, #0]
 8006d6e:	702b      	strb	r3, [r5, #0]
 8006d70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d72:	3001      	adds	r0, #1
 8006d74:	6018      	str	r0, [r3, #0]
 8006d76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f43f acf1 	beq.w	8006760 <_dtoa_r+0xa0>
 8006d7e:	601d      	str	r5, [r3, #0]
 8006d80:	e4ee      	b.n	8006760 <_dtoa_r+0xa0>
 8006d82:	9f00      	ldr	r7, [sp, #0]
 8006d84:	462b      	mov	r3, r5
 8006d86:	461d      	mov	r5, r3
 8006d88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d8c:	2a39      	cmp	r2, #57	; 0x39
 8006d8e:	d106      	bne.n	8006d9e <_dtoa_r+0x6de>
 8006d90:	9a01      	ldr	r2, [sp, #4]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d1f7      	bne.n	8006d86 <_dtoa_r+0x6c6>
 8006d96:	9901      	ldr	r1, [sp, #4]
 8006d98:	2230      	movs	r2, #48	; 0x30
 8006d9a:	3701      	adds	r7, #1
 8006d9c:	700a      	strb	r2, [r1, #0]
 8006d9e:	781a      	ldrb	r2, [r3, #0]
 8006da0:	3201      	adds	r2, #1
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	e790      	b.n	8006cc8 <_dtoa_r+0x608>
 8006da6:	4ba6      	ldr	r3, [pc, #664]	; (8007040 <_dtoa_r+0x980>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	f7f9 fc25 	bl	80005f8 <__aeabi_dmul>
 8006dae:	2200      	movs	r2, #0
 8006db0:	2300      	movs	r3, #0
 8006db2:	4606      	mov	r6, r0
 8006db4:	460f      	mov	r7, r1
 8006db6:	f7f9 fe87 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d09d      	beq.n	8006cfa <_dtoa_r+0x63a>
 8006dbe:	e7cf      	b.n	8006d60 <_dtoa_r+0x6a0>
 8006dc0:	9a08      	ldr	r2, [sp, #32]
 8006dc2:	2a00      	cmp	r2, #0
 8006dc4:	f000 80d7 	beq.w	8006f76 <_dtoa_r+0x8b6>
 8006dc8:	9a06      	ldr	r2, [sp, #24]
 8006dca:	2a01      	cmp	r2, #1
 8006dcc:	f300 80ba 	bgt.w	8006f44 <_dtoa_r+0x884>
 8006dd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dd2:	2a00      	cmp	r2, #0
 8006dd4:	f000 80b2 	beq.w	8006f3c <_dtoa_r+0x87c>
 8006dd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ddc:	9e07      	ldr	r6, [sp, #28]
 8006dde:	9d04      	ldr	r5, [sp, #16]
 8006de0:	9a04      	ldr	r2, [sp, #16]
 8006de2:	441a      	add	r2, r3
 8006de4:	9204      	str	r2, [sp, #16]
 8006de6:	9a05      	ldr	r2, [sp, #20]
 8006de8:	2101      	movs	r1, #1
 8006dea:	441a      	add	r2, r3
 8006dec:	4620      	mov	r0, r4
 8006dee:	9205      	str	r2, [sp, #20]
 8006df0:	f000 ff32 	bl	8007c58 <__i2b>
 8006df4:	4607      	mov	r7, r0
 8006df6:	2d00      	cmp	r5, #0
 8006df8:	dd0c      	ble.n	8006e14 <_dtoa_r+0x754>
 8006dfa:	9b05      	ldr	r3, [sp, #20]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	dd09      	ble.n	8006e14 <_dtoa_r+0x754>
 8006e00:	42ab      	cmp	r3, r5
 8006e02:	9a04      	ldr	r2, [sp, #16]
 8006e04:	bfa8      	it	ge
 8006e06:	462b      	movge	r3, r5
 8006e08:	1ad2      	subs	r2, r2, r3
 8006e0a:	9204      	str	r2, [sp, #16]
 8006e0c:	9a05      	ldr	r2, [sp, #20]
 8006e0e:	1aed      	subs	r5, r5, r3
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	9305      	str	r3, [sp, #20]
 8006e14:	9b07      	ldr	r3, [sp, #28]
 8006e16:	b31b      	cbz	r3, 8006e60 <_dtoa_r+0x7a0>
 8006e18:	9b08      	ldr	r3, [sp, #32]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 80af 	beq.w	8006f7e <_dtoa_r+0x8be>
 8006e20:	2e00      	cmp	r6, #0
 8006e22:	dd13      	ble.n	8006e4c <_dtoa_r+0x78c>
 8006e24:	4639      	mov	r1, r7
 8006e26:	4632      	mov	r2, r6
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f000 ffd5 	bl	8007dd8 <__pow5mult>
 8006e2e:	ee18 2a10 	vmov	r2, s16
 8006e32:	4601      	mov	r1, r0
 8006e34:	4607      	mov	r7, r0
 8006e36:	4620      	mov	r0, r4
 8006e38:	f000 ff24 	bl	8007c84 <__multiply>
 8006e3c:	ee18 1a10 	vmov	r1, s16
 8006e40:	4680      	mov	r8, r0
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 fe06 	bl	8007a54 <_Bfree>
 8006e48:	ee08 8a10 	vmov	s16, r8
 8006e4c:	9b07      	ldr	r3, [sp, #28]
 8006e4e:	1b9a      	subs	r2, r3, r6
 8006e50:	d006      	beq.n	8006e60 <_dtoa_r+0x7a0>
 8006e52:	ee18 1a10 	vmov	r1, s16
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 ffbe 	bl	8007dd8 <__pow5mult>
 8006e5c:	ee08 0a10 	vmov	s16, r0
 8006e60:	2101      	movs	r1, #1
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 fef8 	bl	8007c58 <__i2b>
 8006e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	f340 8088 	ble.w	8006f82 <_dtoa_r+0x8c2>
 8006e72:	461a      	mov	r2, r3
 8006e74:	4601      	mov	r1, r0
 8006e76:	4620      	mov	r0, r4
 8006e78:	f000 ffae 	bl	8007dd8 <__pow5mult>
 8006e7c:	9b06      	ldr	r3, [sp, #24]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	4606      	mov	r6, r0
 8006e82:	f340 8081 	ble.w	8006f88 <_dtoa_r+0x8c8>
 8006e86:	f04f 0800 	mov.w	r8, #0
 8006e8a:	6933      	ldr	r3, [r6, #16]
 8006e8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e90:	6918      	ldr	r0, [r3, #16]
 8006e92:	f000 fe91 	bl	8007bb8 <__hi0bits>
 8006e96:	f1c0 0020 	rsb	r0, r0, #32
 8006e9a:	9b05      	ldr	r3, [sp, #20]
 8006e9c:	4418      	add	r0, r3
 8006e9e:	f010 001f 	ands.w	r0, r0, #31
 8006ea2:	f000 8092 	beq.w	8006fca <_dtoa_r+0x90a>
 8006ea6:	f1c0 0320 	rsb	r3, r0, #32
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	f340 808a 	ble.w	8006fc4 <_dtoa_r+0x904>
 8006eb0:	f1c0 001c 	rsb	r0, r0, #28
 8006eb4:	9b04      	ldr	r3, [sp, #16]
 8006eb6:	4403      	add	r3, r0
 8006eb8:	9304      	str	r3, [sp, #16]
 8006eba:	9b05      	ldr	r3, [sp, #20]
 8006ebc:	4403      	add	r3, r0
 8006ebe:	4405      	add	r5, r0
 8006ec0:	9305      	str	r3, [sp, #20]
 8006ec2:	9b04      	ldr	r3, [sp, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	dd07      	ble.n	8006ed8 <_dtoa_r+0x818>
 8006ec8:	ee18 1a10 	vmov	r1, s16
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f000 ffdc 	bl	8007e8c <__lshift>
 8006ed4:	ee08 0a10 	vmov	s16, r0
 8006ed8:	9b05      	ldr	r3, [sp, #20]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	dd05      	ble.n	8006eea <_dtoa_r+0x82a>
 8006ede:	4631      	mov	r1, r6
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f000 ffd2 	bl	8007e8c <__lshift>
 8006ee8:	4606      	mov	r6, r0
 8006eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d06e      	beq.n	8006fce <_dtoa_r+0x90e>
 8006ef0:	ee18 0a10 	vmov	r0, s16
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	f001 f839 	bl	8007f6c <__mcmp>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	da67      	bge.n	8006fce <_dtoa_r+0x90e>
 8006efe:	9b00      	ldr	r3, [sp, #0]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	ee18 1a10 	vmov	r1, s16
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	220a      	movs	r2, #10
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f000 fdc3 	bl	8007a98 <__multadd>
 8006f12:	9b08      	ldr	r3, [sp, #32]
 8006f14:	ee08 0a10 	vmov	s16, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 81b1 	beq.w	8007280 <_dtoa_r+0xbc0>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	4639      	mov	r1, r7
 8006f22:	220a      	movs	r2, #10
 8006f24:	4620      	mov	r0, r4
 8006f26:	f000 fdb7 	bl	8007a98 <__multadd>
 8006f2a:	9b02      	ldr	r3, [sp, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	4607      	mov	r7, r0
 8006f30:	f300 808e 	bgt.w	8007050 <_dtoa_r+0x990>
 8006f34:	9b06      	ldr	r3, [sp, #24]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	dc51      	bgt.n	8006fde <_dtoa_r+0x91e>
 8006f3a:	e089      	b.n	8007050 <_dtoa_r+0x990>
 8006f3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f42:	e74b      	b.n	8006ddc <_dtoa_r+0x71c>
 8006f44:	9b03      	ldr	r3, [sp, #12]
 8006f46:	1e5e      	subs	r6, r3, #1
 8006f48:	9b07      	ldr	r3, [sp, #28]
 8006f4a:	42b3      	cmp	r3, r6
 8006f4c:	bfbf      	itttt	lt
 8006f4e:	9b07      	ldrlt	r3, [sp, #28]
 8006f50:	9607      	strlt	r6, [sp, #28]
 8006f52:	1af2      	sublt	r2, r6, r3
 8006f54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006f56:	bfb6      	itet	lt
 8006f58:	189b      	addlt	r3, r3, r2
 8006f5a:	1b9e      	subge	r6, r3, r6
 8006f5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006f5e:	9b03      	ldr	r3, [sp, #12]
 8006f60:	bfb8      	it	lt
 8006f62:	2600      	movlt	r6, #0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	bfb7      	itett	lt
 8006f68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006f6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006f70:	1a9d      	sublt	r5, r3, r2
 8006f72:	2300      	movlt	r3, #0
 8006f74:	e734      	b.n	8006de0 <_dtoa_r+0x720>
 8006f76:	9e07      	ldr	r6, [sp, #28]
 8006f78:	9d04      	ldr	r5, [sp, #16]
 8006f7a:	9f08      	ldr	r7, [sp, #32]
 8006f7c:	e73b      	b.n	8006df6 <_dtoa_r+0x736>
 8006f7e:	9a07      	ldr	r2, [sp, #28]
 8006f80:	e767      	b.n	8006e52 <_dtoa_r+0x792>
 8006f82:	9b06      	ldr	r3, [sp, #24]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	dc18      	bgt.n	8006fba <_dtoa_r+0x8fa>
 8006f88:	f1ba 0f00 	cmp.w	sl, #0
 8006f8c:	d115      	bne.n	8006fba <_dtoa_r+0x8fa>
 8006f8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f92:	b993      	cbnz	r3, 8006fba <_dtoa_r+0x8fa>
 8006f94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f98:	0d1b      	lsrs	r3, r3, #20
 8006f9a:	051b      	lsls	r3, r3, #20
 8006f9c:	b183      	cbz	r3, 8006fc0 <_dtoa_r+0x900>
 8006f9e:	9b04      	ldr	r3, [sp, #16]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	9304      	str	r3, [sp, #16]
 8006fa4:	9b05      	ldr	r3, [sp, #20]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	9305      	str	r3, [sp, #20]
 8006faa:	f04f 0801 	mov.w	r8, #1
 8006fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f47f af6a 	bne.w	8006e8a <_dtoa_r+0x7ca>
 8006fb6:	2001      	movs	r0, #1
 8006fb8:	e76f      	b.n	8006e9a <_dtoa_r+0x7da>
 8006fba:	f04f 0800 	mov.w	r8, #0
 8006fbe:	e7f6      	b.n	8006fae <_dtoa_r+0x8ee>
 8006fc0:	4698      	mov	r8, r3
 8006fc2:	e7f4      	b.n	8006fae <_dtoa_r+0x8ee>
 8006fc4:	f43f af7d 	beq.w	8006ec2 <_dtoa_r+0x802>
 8006fc8:	4618      	mov	r0, r3
 8006fca:	301c      	adds	r0, #28
 8006fcc:	e772      	b.n	8006eb4 <_dtoa_r+0x7f4>
 8006fce:	9b03      	ldr	r3, [sp, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	dc37      	bgt.n	8007044 <_dtoa_r+0x984>
 8006fd4:	9b06      	ldr	r3, [sp, #24]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	dd34      	ble.n	8007044 <_dtoa_r+0x984>
 8006fda:	9b03      	ldr	r3, [sp, #12]
 8006fdc:	9302      	str	r3, [sp, #8]
 8006fde:	9b02      	ldr	r3, [sp, #8]
 8006fe0:	b96b      	cbnz	r3, 8006ffe <_dtoa_r+0x93e>
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	2205      	movs	r2, #5
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f000 fd56 	bl	8007a98 <__multadd>
 8006fec:	4601      	mov	r1, r0
 8006fee:	4606      	mov	r6, r0
 8006ff0:	ee18 0a10 	vmov	r0, s16
 8006ff4:	f000 ffba 	bl	8007f6c <__mcmp>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	f73f adbb 	bgt.w	8006b74 <_dtoa_r+0x4b4>
 8006ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007000:	9d01      	ldr	r5, [sp, #4]
 8007002:	43db      	mvns	r3, r3
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	f04f 0800 	mov.w	r8, #0
 800700a:	4631      	mov	r1, r6
 800700c:	4620      	mov	r0, r4
 800700e:	f000 fd21 	bl	8007a54 <_Bfree>
 8007012:	2f00      	cmp	r7, #0
 8007014:	f43f aea4 	beq.w	8006d60 <_dtoa_r+0x6a0>
 8007018:	f1b8 0f00 	cmp.w	r8, #0
 800701c:	d005      	beq.n	800702a <_dtoa_r+0x96a>
 800701e:	45b8      	cmp	r8, r7
 8007020:	d003      	beq.n	800702a <_dtoa_r+0x96a>
 8007022:	4641      	mov	r1, r8
 8007024:	4620      	mov	r0, r4
 8007026:	f000 fd15 	bl	8007a54 <_Bfree>
 800702a:	4639      	mov	r1, r7
 800702c:	4620      	mov	r0, r4
 800702e:	f000 fd11 	bl	8007a54 <_Bfree>
 8007032:	e695      	b.n	8006d60 <_dtoa_r+0x6a0>
 8007034:	2600      	movs	r6, #0
 8007036:	4637      	mov	r7, r6
 8007038:	e7e1      	b.n	8006ffe <_dtoa_r+0x93e>
 800703a:	9700      	str	r7, [sp, #0]
 800703c:	4637      	mov	r7, r6
 800703e:	e599      	b.n	8006b74 <_dtoa_r+0x4b4>
 8007040:	40240000 	.word	0x40240000
 8007044:	9b08      	ldr	r3, [sp, #32]
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 80ca 	beq.w	80071e0 <_dtoa_r+0xb20>
 800704c:	9b03      	ldr	r3, [sp, #12]
 800704e:	9302      	str	r3, [sp, #8]
 8007050:	2d00      	cmp	r5, #0
 8007052:	dd05      	ble.n	8007060 <_dtoa_r+0x9a0>
 8007054:	4639      	mov	r1, r7
 8007056:	462a      	mov	r2, r5
 8007058:	4620      	mov	r0, r4
 800705a:	f000 ff17 	bl	8007e8c <__lshift>
 800705e:	4607      	mov	r7, r0
 8007060:	f1b8 0f00 	cmp.w	r8, #0
 8007064:	d05b      	beq.n	800711e <_dtoa_r+0xa5e>
 8007066:	6879      	ldr	r1, [r7, #4]
 8007068:	4620      	mov	r0, r4
 800706a:	f000 fcb3 	bl	80079d4 <_Balloc>
 800706e:	4605      	mov	r5, r0
 8007070:	b928      	cbnz	r0, 800707e <_dtoa_r+0x9be>
 8007072:	4b87      	ldr	r3, [pc, #540]	; (8007290 <_dtoa_r+0xbd0>)
 8007074:	4602      	mov	r2, r0
 8007076:	f240 21ea 	movw	r1, #746	; 0x2ea
 800707a:	f7ff bb3b 	b.w	80066f4 <_dtoa_r+0x34>
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	3202      	adds	r2, #2
 8007082:	0092      	lsls	r2, r2, #2
 8007084:	f107 010c 	add.w	r1, r7, #12
 8007088:	300c      	adds	r0, #12
 800708a:	f000 fc95 	bl	80079b8 <memcpy>
 800708e:	2201      	movs	r2, #1
 8007090:	4629      	mov	r1, r5
 8007092:	4620      	mov	r0, r4
 8007094:	f000 fefa 	bl	8007e8c <__lshift>
 8007098:	9b01      	ldr	r3, [sp, #4]
 800709a:	f103 0901 	add.w	r9, r3, #1
 800709e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80070a2:	4413      	add	r3, r2
 80070a4:	9305      	str	r3, [sp, #20]
 80070a6:	f00a 0301 	and.w	r3, sl, #1
 80070aa:	46b8      	mov	r8, r7
 80070ac:	9304      	str	r3, [sp, #16]
 80070ae:	4607      	mov	r7, r0
 80070b0:	4631      	mov	r1, r6
 80070b2:	ee18 0a10 	vmov	r0, s16
 80070b6:	f7ff fa77 	bl	80065a8 <quorem>
 80070ba:	4641      	mov	r1, r8
 80070bc:	9002      	str	r0, [sp, #8]
 80070be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80070c2:	ee18 0a10 	vmov	r0, s16
 80070c6:	f000 ff51 	bl	8007f6c <__mcmp>
 80070ca:	463a      	mov	r2, r7
 80070cc:	9003      	str	r0, [sp, #12]
 80070ce:	4631      	mov	r1, r6
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 ff67 	bl	8007fa4 <__mdiff>
 80070d6:	68c2      	ldr	r2, [r0, #12]
 80070d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80070dc:	4605      	mov	r5, r0
 80070de:	bb02      	cbnz	r2, 8007122 <_dtoa_r+0xa62>
 80070e0:	4601      	mov	r1, r0
 80070e2:	ee18 0a10 	vmov	r0, s16
 80070e6:	f000 ff41 	bl	8007f6c <__mcmp>
 80070ea:	4602      	mov	r2, r0
 80070ec:	4629      	mov	r1, r5
 80070ee:	4620      	mov	r0, r4
 80070f0:	9207      	str	r2, [sp, #28]
 80070f2:	f000 fcaf 	bl	8007a54 <_Bfree>
 80070f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80070fa:	ea43 0102 	orr.w	r1, r3, r2
 80070fe:	9b04      	ldr	r3, [sp, #16]
 8007100:	430b      	orrs	r3, r1
 8007102:	464d      	mov	r5, r9
 8007104:	d10f      	bne.n	8007126 <_dtoa_r+0xa66>
 8007106:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800710a:	d02a      	beq.n	8007162 <_dtoa_r+0xaa2>
 800710c:	9b03      	ldr	r3, [sp, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	dd02      	ble.n	8007118 <_dtoa_r+0xa58>
 8007112:	9b02      	ldr	r3, [sp, #8]
 8007114:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007118:	f88b a000 	strb.w	sl, [fp]
 800711c:	e775      	b.n	800700a <_dtoa_r+0x94a>
 800711e:	4638      	mov	r0, r7
 8007120:	e7ba      	b.n	8007098 <_dtoa_r+0x9d8>
 8007122:	2201      	movs	r2, #1
 8007124:	e7e2      	b.n	80070ec <_dtoa_r+0xa2c>
 8007126:	9b03      	ldr	r3, [sp, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	db04      	blt.n	8007136 <_dtoa_r+0xa76>
 800712c:	9906      	ldr	r1, [sp, #24]
 800712e:	430b      	orrs	r3, r1
 8007130:	9904      	ldr	r1, [sp, #16]
 8007132:	430b      	orrs	r3, r1
 8007134:	d122      	bne.n	800717c <_dtoa_r+0xabc>
 8007136:	2a00      	cmp	r2, #0
 8007138:	ddee      	ble.n	8007118 <_dtoa_r+0xa58>
 800713a:	ee18 1a10 	vmov	r1, s16
 800713e:	2201      	movs	r2, #1
 8007140:	4620      	mov	r0, r4
 8007142:	f000 fea3 	bl	8007e8c <__lshift>
 8007146:	4631      	mov	r1, r6
 8007148:	ee08 0a10 	vmov	s16, r0
 800714c:	f000 ff0e 	bl	8007f6c <__mcmp>
 8007150:	2800      	cmp	r0, #0
 8007152:	dc03      	bgt.n	800715c <_dtoa_r+0xa9c>
 8007154:	d1e0      	bne.n	8007118 <_dtoa_r+0xa58>
 8007156:	f01a 0f01 	tst.w	sl, #1
 800715a:	d0dd      	beq.n	8007118 <_dtoa_r+0xa58>
 800715c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007160:	d1d7      	bne.n	8007112 <_dtoa_r+0xa52>
 8007162:	2339      	movs	r3, #57	; 0x39
 8007164:	f88b 3000 	strb.w	r3, [fp]
 8007168:	462b      	mov	r3, r5
 800716a:	461d      	mov	r5, r3
 800716c:	3b01      	subs	r3, #1
 800716e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007172:	2a39      	cmp	r2, #57	; 0x39
 8007174:	d071      	beq.n	800725a <_dtoa_r+0xb9a>
 8007176:	3201      	adds	r2, #1
 8007178:	701a      	strb	r2, [r3, #0]
 800717a:	e746      	b.n	800700a <_dtoa_r+0x94a>
 800717c:	2a00      	cmp	r2, #0
 800717e:	dd07      	ble.n	8007190 <_dtoa_r+0xad0>
 8007180:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007184:	d0ed      	beq.n	8007162 <_dtoa_r+0xaa2>
 8007186:	f10a 0301 	add.w	r3, sl, #1
 800718a:	f88b 3000 	strb.w	r3, [fp]
 800718e:	e73c      	b.n	800700a <_dtoa_r+0x94a>
 8007190:	9b05      	ldr	r3, [sp, #20]
 8007192:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007196:	4599      	cmp	r9, r3
 8007198:	d047      	beq.n	800722a <_dtoa_r+0xb6a>
 800719a:	ee18 1a10 	vmov	r1, s16
 800719e:	2300      	movs	r3, #0
 80071a0:	220a      	movs	r2, #10
 80071a2:	4620      	mov	r0, r4
 80071a4:	f000 fc78 	bl	8007a98 <__multadd>
 80071a8:	45b8      	cmp	r8, r7
 80071aa:	ee08 0a10 	vmov	s16, r0
 80071ae:	f04f 0300 	mov.w	r3, #0
 80071b2:	f04f 020a 	mov.w	r2, #10
 80071b6:	4641      	mov	r1, r8
 80071b8:	4620      	mov	r0, r4
 80071ba:	d106      	bne.n	80071ca <_dtoa_r+0xb0a>
 80071bc:	f000 fc6c 	bl	8007a98 <__multadd>
 80071c0:	4680      	mov	r8, r0
 80071c2:	4607      	mov	r7, r0
 80071c4:	f109 0901 	add.w	r9, r9, #1
 80071c8:	e772      	b.n	80070b0 <_dtoa_r+0x9f0>
 80071ca:	f000 fc65 	bl	8007a98 <__multadd>
 80071ce:	4639      	mov	r1, r7
 80071d0:	4680      	mov	r8, r0
 80071d2:	2300      	movs	r3, #0
 80071d4:	220a      	movs	r2, #10
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 fc5e 	bl	8007a98 <__multadd>
 80071dc:	4607      	mov	r7, r0
 80071de:	e7f1      	b.n	80071c4 <_dtoa_r+0xb04>
 80071e0:	9b03      	ldr	r3, [sp, #12]
 80071e2:	9302      	str	r3, [sp, #8]
 80071e4:	9d01      	ldr	r5, [sp, #4]
 80071e6:	ee18 0a10 	vmov	r0, s16
 80071ea:	4631      	mov	r1, r6
 80071ec:	f7ff f9dc 	bl	80065a8 <quorem>
 80071f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80071f4:	9b01      	ldr	r3, [sp, #4]
 80071f6:	f805 ab01 	strb.w	sl, [r5], #1
 80071fa:	1aea      	subs	r2, r5, r3
 80071fc:	9b02      	ldr	r3, [sp, #8]
 80071fe:	4293      	cmp	r3, r2
 8007200:	dd09      	ble.n	8007216 <_dtoa_r+0xb56>
 8007202:	ee18 1a10 	vmov	r1, s16
 8007206:	2300      	movs	r3, #0
 8007208:	220a      	movs	r2, #10
 800720a:	4620      	mov	r0, r4
 800720c:	f000 fc44 	bl	8007a98 <__multadd>
 8007210:	ee08 0a10 	vmov	s16, r0
 8007214:	e7e7      	b.n	80071e6 <_dtoa_r+0xb26>
 8007216:	9b02      	ldr	r3, [sp, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	bfc8      	it	gt
 800721c:	461d      	movgt	r5, r3
 800721e:	9b01      	ldr	r3, [sp, #4]
 8007220:	bfd8      	it	le
 8007222:	2501      	movle	r5, #1
 8007224:	441d      	add	r5, r3
 8007226:	f04f 0800 	mov.w	r8, #0
 800722a:	ee18 1a10 	vmov	r1, s16
 800722e:	2201      	movs	r2, #1
 8007230:	4620      	mov	r0, r4
 8007232:	f000 fe2b 	bl	8007e8c <__lshift>
 8007236:	4631      	mov	r1, r6
 8007238:	ee08 0a10 	vmov	s16, r0
 800723c:	f000 fe96 	bl	8007f6c <__mcmp>
 8007240:	2800      	cmp	r0, #0
 8007242:	dc91      	bgt.n	8007168 <_dtoa_r+0xaa8>
 8007244:	d102      	bne.n	800724c <_dtoa_r+0xb8c>
 8007246:	f01a 0f01 	tst.w	sl, #1
 800724a:	d18d      	bne.n	8007168 <_dtoa_r+0xaa8>
 800724c:	462b      	mov	r3, r5
 800724e:	461d      	mov	r5, r3
 8007250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007254:	2a30      	cmp	r2, #48	; 0x30
 8007256:	d0fa      	beq.n	800724e <_dtoa_r+0xb8e>
 8007258:	e6d7      	b.n	800700a <_dtoa_r+0x94a>
 800725a:	9a01      	ldr	r2, [sp, #4]
 800725c:	429a      	cmp	r2, r3
 800725e:	d184      	bne.n	800716a <_dtoa_r+0xaaa>
 8007260:	9b00      	ldr	r3, [sp, #0]
 8007262:	3301      	adds	r3, #1
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	2331      	movs	r3, #49	; 0x31
 8007268:	7013      	strb	r3, [r2, #0]
 800726a:	e6ce      	b.n	800700a <_dtoa_r+0x94a>
 800726c:	4b09      	ldr	r3, [pc, #36]	; (8007294 <_dtoa_r+0xbd4>)
 800726e:	f7ff ba95 	b.w	800679c <_dtoa_r+0xdc>
 8007272:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007274:	2b00      	cmp	r3, #0
 8007276:	f47f aa6e 	bne.w	8006756 <_dtoa_r+0x96>
 800727a:	4b07      	ldr	r3, [pc, #28]	; (8007298 <_dtoa_r+0xbd8>)
 800727c:	f7ff ba8e 	b.w	800679c <_dtoa_r+0xdc>
 8007280:	9b02      	ldr	r3, [sp, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	dcae      	bgt.n	80071e4 <_dtoa_r+0xb24>
 8007286:	9b06      	ldr	r3, [sp, #24]
 8007288:	2b02      	cmp	r3, #2
 800728a:	f73f aea8 	bgt.w	8006fde <_dtoa_r+0x91e>
 800728e:	e7a9      	b.n	80071e4 <_dtoa_r+0xb24>
 8007290:	0800a4a8 	.word	0x0800a4a8
 8007294:	0800a2a8 	.word	0x0800a2a8
 8007298:	0800a429 	.word	0x0800a429

0800729c <rshift>:
 800729c:	6903      	ldr	r3, [r0, #16]
 800729e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80072a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80072aa:	f100 0414 	add.w	r4, r0, #20
 80072ae:	dd45      	ble.n	800733c <rshift+0xa0>
 80072b0:	f011 011f 	ands.w	r1, r1, #31
 80072b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80072b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80072bc:	d10c      	bne.n	80072d8 <rshift+0x3c>
 80072be:	f100 0710 	add.w	r7, r0, #16
 80072c2:	4629      	mov	r1, r5
 80072c4:	42b1      	cmp	r1, r6
 80072c6:	d334      	bcc.n	8007332 <rshift+0x96>
 80072c8:	1a9b      	subs	r3, r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	1eea      	subs	r2, r5, #3
 80072ce:	4296      	cmp	r6, r2
 80072d0:	bf38      	it	cc
 80072d2:	2300      	movcc	r3, #0
 80072d4:	4423      	add	r3, r4
 80072d6:	e015      	b.n	8007304 <rshift+0x68>
 80072d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80072dc:	f1c1 0820 	rsb	r8, r1, #32
 80072e0:	40cf      	lsrs	r7, r1
 80072e2:	f105 0e04 	add.w	lr, r5, #4
 80072e6:	46a1      	mov	r9, r4
 80072e8:	4576      	cmp	r6, lr
 80072ea:	46f4      	mov	ip, lr
 80072ec:	d815      	bhi.n	800731a <rshift+0x7e>
 80072ee:	1a9a      	subs	r2, r3, r2
 80072f0:	0092      	lsls	r2, r2, #2
 80072f2:	3a04      	subs	r2, #4
 80072f4:	3501      	adds	r5, #1
 80072f6:	42ae      	cmp	r6, r5
 80072f8:	bf38      	it	cc
 80072fa:	2200      	movcc	r2, #0
 80072fc:	18a3      	adds	r3, r4, r2
 80072fe:	50a7      	str	r7, [r4, r2]
 8007300:	b107      	cbz	r7, 8007304 <rshift+0x68>
 8007302:	3304      	adds	r3, #4
 8007304:	1b1a      	subs	r2, r3, r4
 8007306:	42a3      	cmp	r3, r4
 8007308:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800730c:	bf08      	it	eq
 800730e:	2300      	moveq	r3, #0
 8007310:	6102      	str	r2, [r0, #16]
 8007312:	bf08      	it	eq
 8007314:	6143      	streq	r3, [r0, #20]
 8007316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800731a:	f8dc c000 	ldr.w	ip, [ip]
 800731e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007322:	ea4c 0707 	orr.w	r7, ip, r7
 8007326:	f849 7b04 	str.w	r7, [r9], #4
 800732a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800732e:	40cf      	lsrs	r7, r1
 8007330:	e7da      	b.n	80072e8 <rshift+0x4c>
 8007332:	f851 cb04 	ldr.w	ip, [r1], #4
 8007336:	f847 cf04 	str.w	ip, [r7, #4]!
 800733a:	e7c3      	b.n	80072c4 <rshift+0x28>
 800733c:	4623      	mov	r3, r4
 800733e:	e7e1      	b.n	8007304 <rshift+0x68>

08007340 <__hexdig_fun>:
 8007340:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007344:	2b09      	cmp	r3, #9
 8007346:	d802      	bhi.n	800734e <__hexdig_fun+0xe>
 8007348:	3820      	subs	r0, #32
 800734a:	b2c0      	uxtb	r0, r0
 800734c:	4770      	bx	lr
 800734e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007352:	2b05      	cmp	r3, #5
 8007354:	d801      	bhi.n	800735a <__hexdig_fun+0x1a>
 8007356:	3847      	subs	r0, #71	; 0x47
 8007358:	e7f7      	b.n	800734a <__hexdig_fun+0xa>
 800735a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800735e:	2b05      	cmp	r3, #5
 8007360:	d801      	bhi.n	8007366 <__hexdig_fun+0x26>
 8007362:	3827      	subs	r0, #39	; 0x27
 8007364:	e7f1      	b.n	800734a <__hexdig_fun+0xa>
 8007366:	2000      	movs	r0, #0
 8007368:	4770      	bx	lr
	...

0800736c <__gethex>:
 800736c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007370:	ed2d 8b02 	vpush	{d8}
 8007374:	b089      	sub	sp, #36	; 0x24
 8007376:	ee08 0a10 	vmov	s16, r0
 800737a:	9304      	str	r3, [sp, #16]
 800737c:	4bb4      	ldr	r3, [pc, #720]	; (8007650 <__gethex+0x2e4>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	4618      	mov	r0, r3
 8007384:	468b      	mov	fp, r1
 8007386:	4690      	mov	r8, r2
 8007388:	f7f8 ff22 	bl	80001d0 <strlen>
 800738c:	9b01      	ldr	r3, [sp, #4]
 800738e:	f8db 2000 	ldr.w	r2, [fp]
 8007392:	4403      	add	r3, r0
 8007394:	4682      	mov	sl, r0
 8007396:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800739a:	9305      	str	r3, [sp, #20]
 800739c:	1c93      	adds	r3, r2, #2
 800739e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80073a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80073a6:	32fe      	adds	r2, #254	; 0xfe
 80073a8:	18d1      	adds	r1, r2, r3
 80073aa:	461f      	mov	r7, r3
 80073ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80073b0:	9100      	str	r1, [sp, #0]
 80073b2:	2830      	cmp	r0, #48	; 0x30
 80073b4:	d0f8      	beq.n	80073a8 <__gethex+0x3c>
 80073b6:	f7ff ffc3 	bl	8007340 <__hexdig_fun>
 80073ba:	4604      	mov	r4, r0
 80073bc:	2800      	cmp	r0, #0
 80073be:	d13a      	bne.n	8007436 <__gethex+0xca>
 80073c0:	9901      	ldr	r1, [sp, #4]
 80073c2:	4652      	mov	r2, sl
 80073c4:	4638      	mov	r0, r7
 80073c6:	f001 fa33 	bl	8008830 <strncmp>
 80073ca:	4605      	mov	r5, r0
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d168      	bne.n	80074a2 <__gethex+0x136>
 80073d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80073d4:	eb07 060a 	add.w	r6, r7, sl
 80073d8:	f7ff ffb2 	bl	8007340 <__hexdig_fun>
 80073dc:	2800      	cmp	r0, #0
 80073de:	d062      	beq.n	80074a6 <__gethex+0x13a>
 80073e0:	4633      	mov	r3, r6
 80073e2:	7818      	ldrb	r0, [r3, #0]
 80073e4:	2830      	cmp	r0, #48	; 0x30
 80073e6:	461f      	mov	r7, r3
 80073e8:	f103 0301 	add.w	r3, r3, #1
 80073ec:	d0f9      	beq.n	80073e2 <__gethex+0x76>
 80073ee:	f7ff ffa7 	bl	8007340 <__hexdig_fun>
 80073f2:	2301      	movs	r3, #1
 80073f4:	fab0 f480 	clz	r4, r0
 80073f8:	0964      	lsrs	r4, r4, #5
 80073fa:	4635      	mov	r5, r6
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	463a      	mov	r2, r7
 8007400:	4616      	mov	r6, r2
 8007402:	3201      	adds	r2, #1
 8007404:	7830      	ldrb	r0, [r6, #0]
 8007406:	f7ff ff9b 	bl	8007340 <__hexdig_fun>
 800740a:	2800      	cmp	r0, #0
 800740c:	d1f8      	bne.n	8007400 <__gethex+0x94>
 800740e:	9901      	ldr	r1, [sp, #4]
 8007410:	4652      	mov	r2, sl
 8007412:	4630      	mov	r0, r6
 8007414:	f001 fa0c 	bl	8008830 <strncmp>
 8007418:	b980      	cbnz	r0, 800743c <__gethex+0xd0>
 800741a:	b94d      	cbnz	r5, 8007430 <__gethex+0xc4>
 800741c:	eb06 050a 	add.w	r5, r6, sl
 8007420:	462a      	mov	r2, r5
 8007422:	4616      	mov	r6, r2
 8007424:	3201      	adds	r2, #1
 8007426:	7830      	ldrb	r0, [r6, #0]
 8007428:	f7ff ff8a 	bl	8007340 <__hexdig_fun>
 800742c:	2800      	cmp	r0, #0
 800742e:	d1f8      	bne.n	8007422 <__gethex+0xb6>
 8007430:	1bad      	subs	r5, r5, r6
 8007432:	00ad      	lsls	r5, r5, #2
 8007434:	e004      	b.n	8007440 <__gethex+0xd4>
 8007436:	2400      	movs	r4, #0
 8007438:	4625      	mov	r5, r4
 800743a:	e7e0      	b.n	80073fe <__gethex+0x92>
 800743c:	2d00      	cmp	r5, #0
 800743e:	d1f7      	bne.n	8007430 <__gethex+0xc4>
 8007440:	7833      	ldrb	r3, [r6, #0]
 8007442:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007446:	2b50      	cmp	r3, #80	; 0x50
 8007448:	d13b      	bne.n	80074c2 <__gethex+0x156>
 800744a:	7873      	ldrb	r3, [r6, #1]
 800744c:	2b2b      	cmp	r3, #43	; 0x2b
 800744e:	d02c      	beq.n	80074aa <__gethex+0x13e>
 8007450:	2b2d      	cmp	r3, #45	; 0x2d
 8007452:	d02e      	beq.n	80074b2 <__gethex+0x146>
 8007454:	1c71      	adds	r1, r6, #1
 8007456:	f04f 0900 	mov.w	r9, #0
 800745a:	7808      	ldrb	r0, [r1, #0]
 800745c:	f7ff ff70 	bl	8007340 <__hexdig_fun>
 8007460:	1e43      	subs	r3, r0, #1
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b18      	cmp	r3, #24
 8007466:	d82c      	bhi.n	80074c2 <__gethex+0x156>
 8007468:	f1a0 0210 	sub.w	r2, r0, #16
 800746c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007470:	f7ff ff66 	bl	8007340 <__hexdig_fun>
 8007474:	1e43      	subs	r3, r0, #1
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b18      	cmp	r3, #24
 800747a:	d91d      	bls.n	80074b8 <__gethex+0x14c>
 800747c:	f1b9 0f00 	cmp.w	r9, #0
 8007480:	d000      	beq.n	8007484 <__gethex+0x118>
 8007482:	4252      	negs	r2, r2
 8007484:	4415      	add	r5, r2
 8007486:	f8cb 1000 	str.w	r1, [fp]
 800748a:	b1e4      	cbz	r4, 80074c6 <__gethex+0x15a>
 800748c:	9b00      	ldr	r3, [sp, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	bf14      	ite	ne
 8007492:	2700      	movne	r7, #0
 8007494:	2706      	moveq	r7, #6
 8007496:	4638      	mov	r0, r7
 8007498:	b009      	add	sp, #36	; 0x24
 800749a:	ecbd 8b02 	vpop	{d8}
 800749e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a2:	463e      	mov	r6, r7
 80074a4:	4625      	mov	r5, r4
 80074a6:	2401      	movs	r4, #1
 80074a8:	e7ca      	b.n	8007440 <__gethex+0xd4>
 80074aa:	f04f 0900 	mov.w	r9, #0
 80074ae:	1cb1      	adds	r1, r6, #2
 80074b0:	e7d3      	b.n	800745a <__gethex+0xee>
 80074b2:	f04f 0901 	mov.w	r9, #1
 80074b6:	e7fa      	b.n	80074ae <__gethex+0x142>
 80074b8:	230a      	movs	r3, #10
 80074ba:	fb03 0202 	mla	r2, r3, r2, r0
 80074be:	3a10      	subs	r2, #16
 80074c0:	e7d4      	b.n	800746c <__gethex+0x100>
 80074c2:	4631      	mov	r1, r6
 80074c4:	e7df      	b.n	8007486 <__gethex+0x11a>
 80074c6:	1bf3      	subs	r3, r6, r7
 80074c8:	3b01      	subs	r3, #1
 80074ca:	4621      	mov	r1, r4
 80074cc:	2b07      	cmp	r3, #7
 80074ce:	dc0b      	bgt.n	80074e8 <__gethex+0x17c>
 80074d0:	ee18 0a10 	vmov	r0, s16
 80074d4:	f000 fa7e 	bl	80079d4 <_Balloc>
 80074d8:	4604      	mov	r4, r0
 80074da:	b940      	cbnz	r0, 80074ee <__gethex+0x182>
 80074dc:	4b5d      	ldr	r3, [pc, #372]	; (8007654 <__gethex+0x2e8>)
 80074de:	4602      	mov	r2, r0
 80074e0:	21de      	movs	r1, #222	; 0xde
 80074e2:	485d      	ldr	r0, [pc, #372]	; (8007658 <__gethex+0x2ec>)
 80074e4:	f001 f9c6 	bl	8008874 <__assert_func>
 80074e8:	3101      	adds	r1, #1
 80074ea:	105b      	asrs	r3, r3, #1
 80074ec:	e7ee      	b.n	80074cc <__gethex+0x160>
 80074ee:	f100 0914 	add.w	r9, r0, #20
 80074f2:	f04f 0b00 	mov.w	fp, #0
 80074f6:	f1ca 0301 	rsb	r3, sl, #1
 80074fa:	f8cd 9008 	str.w	r9, [sp, #8]
 80074fe:	f8cd b000 	str.w	fp, [sp]
 8007502:	9306      	str	r3, [sp, #24]
 8007504:	42b7      	cmp	r7, r6
 8007506:	d340      	bcc.n	800758a <__gethex+0x21e>
 8007508:	9802      	ldr	r0, [sp, #8]
 800750a:	9b00      	ldr	r3, [sp, #0]
 800750c:	f840 3b04 	str.w	r3, [r0], #4
 8007510:	eba0 0009 	sub.w	r0, r0, r9
 8007514:	1080      	asrs	r0, r0, #2
 8007516:	0146      	lsls	r6, r0, #5
 8007518:	6120      	str	r0, [r4, #16]
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fb4c 	bl	8007bb8 <__hi0bits>
 8007520:	1a30      	subs	r0, r6, r0
 8007522:	f8d8 6000 	ldr.w	r6, [r8]
 8007526:	42b0      	cmp	r0, r6
 8007528:	dd63      	ble.n	80075f2 <__gethex+0x286>
 800752a:	1b87      	subs	r7, r0, r6
 800752c:	4639      	mov	r1, r7
 800752e:	4620      	mov	r0, r4
 8007530:	f000 fef0 	bl	8008314 <__any_on>
 8007534:	4682      	mov	sl, r0
 8007536:	b1a8      	cbz	r0, 8007564 <__gethex+0x1f8>
 8007538:	1e7b      	subs	r3, r7, #1
 800753a:	1159      	asrs	r1, r3, #5
 800753c:	f003 021f 	and.w	r2, r3, #31
 8007540:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007544:	f04f 0a01 	mov.w	sl, #1
 8007548:	fa0a f202 	lsl.w	r2, sl, r2
 800754c:	420a      	tst	r2, r1
 800754e:	d009      	beq.n	8007564 <__gethex+0x1f8>
 8007550:	4553      	cmp	r3, sl
 8007552:	dd05      	ble.n	8007560 <__gethex+0x1f4>
 8007554:	1eb9      	subs	r1, r7, #2
 8007556:	4620      	mov	r0, r4
 8007558:	f000 fedc 	bl	8008314 <__any_on>
 800755c:	2800      	cmp	r0, #0
 800755e:	d145      	bne.n	80075ec <__gethex+0x280>
 8007560:	f04f 0a02 	mov.w	sl, #2
 8007564:	4639      	mov	r1, r7
 8007566:	4620      	mov	r0, r4
 8007568:	f7ff fe98 	bl	800729c <rshift>
 800756c:	443d      	add	r5, r7
 800756e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007572:	42ab      	cmp	r3, r5
 8007574:	da4c      	bge.n	8007610 <__gethex+0x2a4>
 8007576:	ee18 0a10 	vmov	r0, s16
 800757a:	4621      	mov	r1, r4
 800757c:	f000 fa6a 	bl	8007a54 <_Bfree>
 8007580:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007582:	2300      	movs	r3, #0
 8007584:	6013      	str	r3, [r2, #0]
 8007586:	27a3      	movs	r7, #163	; 0xa3
 8007588:	e785      	b.n	8007496 <__gethex+0x12a>
 800758a:	1e73      	subs	r3, r6, #1
 800758c:	9a05      	ldr	r2, [sp, #20]
 800758e:	9303      	str	r3, [sp, #12]
 8007590:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007594:	4293      	cmp	r3, r2
 8007596:	d019      	beq.n	80075cc <__gethex+0x260>
 8007598:	f1bb 0f20 	cmp.w	fp, #32
 800759c:	d107      	bne.n	80075ae <__gethex+0x242>
 800759e:	9b02      	ldr	r3, [sp, #8]
 80075a0:	9a00      	ldr	r2, [sp, #0]
 80075a2:	f843 2b04 	str.w	r2, [r3], #4
 80075a6:	9302      	str	r3, [sp, #8]
 80075a8:	2300      	movs	r3, #0
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	469b      	mov	fp, r3
 80075ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80075b2:	f7ff fec5 	bl	8007340 <__hexdig_fun>
 80075b6:	9b00      	ldr	r3, [sp, #0]
 80075b8:	f000 000f 	and.w	r0, r0, #15
 80075bc:	fa00 f00b 	lsl.w	r0, r0, fp
 80075c0:	4303      	orrs	r3, r0
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	f10b 0b04 	add.w	fp, fp, #4
 80075c8:	9b03      	ldr	r3, [sp, #12]
 80075ca:	e00d      	b.n	80075e8 <__gethex+0x27c>
 80075cc:	9b03      	ldr	r3, [sp, #12]
 80075ce:	9a06      	ldr	r2, [sp, #24]
 80075d0:	4413      	add	r3, r2
 80075d2:	42bb      	cmp	r3, r7
 80075d4:	d3e0      	bcc.n	8007598 <__gethex+0x22c>
 80075d6:	4618      	mov	r0, r3
 80075d8:	9901      	ldr	r1, [sp, #4]
 80075da:	9307      	str	r3, [sp, #28]
 80075dc:	4652      	mov	r2, sl
 80075de:	f001 f927 	bl	8008830 <strncmp>
 80075e2:	9b07      	ldr	r3, [sp, #28]
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d1d7      	bne.n	8007598 <__gethex+0x22c>
 80075e8:	461e      	mov	r6, r3
 80075ea:	e78b      	b.n	8007504 <__gethex+0x198>
 80075ec:	f04f 0a03 	mov.w	sl, #3
 80075f0:	e7b8      	b.n	8007564 <__gethex+0x1f8>
 80075f2:	da0a      	bge.n	800760a <__gethex+0x29e>
 80075f4:	1a37      	subs	r7, r6, r0
 80075f6:	4621      	mov	r1, r4
 80075f8:	ee18 0a10 	vmov	r0, s16
 80075fc:	463a      	mov	r2, r7
 80075fe:	f000 fc45 	bl	8007e8c <__lshift>
 8007602:	1bed      	subs	r5, r5, r7
 8007604:	4604      	mov	r4, r0
 8007606:	f100 0914 	add.w	r9, r0, #20
 800760a:	f04f 0a00 	mov.w	sl, #0
 800760e:	e7ae      	b.n	800756e <__gethex+0x202>
 8007610:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007614:	42a8      	cmp	r0, r5
 8007616:	dd72      	ble.n	80076fe <__gethex+0x392>
 8007618:	1b45      	subs	r5, r0, r5
 800761a:	42ae      	cmp	r6, r5
 800761c:	dc36      	bgt.n	800768c <__gethex+0x320>
 800761e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007622:	2b02      	cmp	r3, #2
 8007624:	d02a      	beq.n	800767c <__gethex+0x310>
 8007626:	2b03      	cmp	r3, #3
 8007628:	d02c      	beq.n	8007684 <__gethex+0x318>
 800762a:	2b01      	cmp	r3, #1
 800762c:	d11c      	bne.n	8007668 <__gethex+0x2fc>
 800762e:	42ae      	cmp	r6, r5
 8007630:	d11a      	bne.n	8007668 <__gethex+0x2fc>
 8007632:	2e01      	cmp	r6, #1
 8007634:	d112      	bne.n	800765c <__gethex+0x2f0>
 8007636:	9a04      	ldr	r2, [sp, #16]
 8007638:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	2301      	movs	r3, #1
 8007640:	6123      	str	r3, [r4, #16]
 8007642:	f8c9 3000 	str.w	r3, [r9]
 8007646:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007648:	2762      	movs	r7, #98	; 0x62
 800764a:	601c      	str	r4, [r3, #0]
 800764c:	e723      	b.n	8007496 <__gethex+0x12a>
 800764e:	bf00      	nop
 8007650:	0800a520 	.word	0x0800a520
 8007654:	0800a4a8 	.word	0x0800a4a8
 8007658:	0800a4b9 	.word	0x0800a4b9
 800765c:	1e71      	subs	r1, r6, #1
 800765e:	4620      	mov	r0, r4
 8007660:	f000 fe58 	bl	8008314 <__any_on>
 8007664:	2800      	cmp	r0, #0
 8007666:	d1e6      	bne.n	8007636 <__gethex+0x2ca>
 8007668:	ee18 0a10 	vmov	r0, s16
 800766c:	4621      	mov	r1, r4
 800766e:	f000 f9f1 	bl	8007a54 <_Bfree>
 8007672:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007674:	2300      	movs	r3, #0
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	2750      	movs	r7, #80	; 0x50
 800767a:	e70c      	b.n	8007496 <__gethex+0x12a>
 800767c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1f2      	bne.n	8007668 <__gethex+0x2fc>
 8007682:	e7d8      	b.n	8007636 <__gethex+0x2ca>
 8007684:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1d5      	bne.n	8007636 <__gethex+0x2ca>
 800768a:	e7ed      	b.n	8007668 <__gethex+0x2fc>
 800768c:	1e6f      	subs	r7, r5, #1
 800768e:	f1ba 0f00 	cmp.w	sl, #0
 8007692:	d131      	bne.n	80076f8 <__gethex+0x38c>
 8007694:	b127      	cbz	r7, 80076a0 <__gethex+0x334>
 8007696:	4639      	mov	r1, r7
 8007698:	4620      	mov	r0, r4
 800769a:	f000 fe3b 	bl	8008314 <__any_on>
 800769e:	4682      	mov	sl, r0
 80076a0:	117b      	asrs	r3, r7, #5
 80076a2:	2101      	movs	r1, #1
 80076a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80076a8:	f007 071f 	and.w	r7, r7, #31
 80076ac:	fa01 f707 	lsl.w	r7, r1, r7
 80076b0:	421f      	tst	r7, r3
 80076b2:	4629      	mov	r1, r5
 80076b4:	4620      	mov	r0, r4
 80076b6:	bf18      	it	ne
 80076b8:	f04a 0a02 	orrne.w	sl, sl, #2
 80076bc:	1b76      	subs	r6, r6, r5
 80076be:	f7ff fded 	bl	800729c <rshift>
 80076c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80076c6:	2702      	movs	r7, #2
 80076c8:	f1ba 0f00 	cmp.w	sl, #0
 80076cc:	d048      	beq.n	8007760 <__gethex+0x3f4>
 80076ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d015      	beq.n	8007702 <__gethex+0x396>
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d017      	beq.n	800770a <__gethex+0x39e>
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d109      	bne.n	80076f2 <__gethex+0x386>
 80076de:	f01a 0f02 	tst.w	sl, #2
 80076e2:	d006      	beq.n	80076f2 <__gethex+0x386>
 80076e4:	f8d9 0000 	ldr.w	r0, [r9]
 80076e8:	ea4a 0a00 	orr.w	sl, sl, r0
 80076ec:	f01a 0f01 	tst.w	sl, #1
 80076f0:	d10e      	bne.n	8007710 <__gethex+0x3a4>
 80076f2:	f047 0710 	orr.w	r7, r7, #16
 80076f6:	e033      	b.n	8007760 <__gethex+0x3f4>
 80076f8:	f04f 0a01 	mov.w	sl, #1
 80076fc:	e7d0      	b.n	80076a0 <__gethex+0x334>
 80076fe:	2701      	movs	r7, #1
 8007700:	e7e2      	b.n	80076c8 <__gethex+0x35c>
 8007702:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007704:	f1c3 0301 	rsb	r3, r3, #1
 8007708:	9315      	str	r3, [sp, #84]	; 0x54
 800770a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0f0      	beq.n	80076f2 <__gethex+0x386>
 8007710:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007714:	f104 0314 	add.w	r3, r4, #20
 8007718:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800771c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007720:	f04f 0c00 	mov.w	ip, #0
 8007724:	4618      	mov	r0, r3
 8007726:	f853 2b04 	ldr.w	r2, [r3], #4
 800772a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800772e:	d01c      	beq.n	800776a <__gethex+0x3fe>
 8007730:	3201      	adds	r2, #1
 8007732:	6002      	str	r2, [r0, #0]
 8007734:	2f02      	cmp	r7, #2
 8007736:	f104 0314 	add.w	r3, r4, #20
 800773a:	d13f      	bne.n	80077bc <__gethex+0x450>
 800773c:	f8d8 2000 	ldr.w	r2, [r8]
 8007740:	3a01      	subs	r2, #1
 8007742:	42b2      	cmp	r2, r6
 8007744:	d10a      	bne.n	800775c <__gethex+0x3f0>
 8007746:	1171      	asrs	r1, r6, #5
 8007748:	2201      	movs	r2, #1
 800774a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800774e:	f006 061f 	and.w	r6, r6, #31
 8007752:	fa02 f606 	lsl.w	r6, r2, r6
 8007756:	421e      	tst	r6, r3
 8007758:	bf18      	it	ne
 800775a:	4617      	movne	r7, r2
 800775c:	f047 0720 	orr.w	r7, r7, #32
 8007760:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007762:	601c      	str	r4, [r3, #0]
 8007764:	9b04      	ldr	r3, [sp, #16]
 8007766:	601d      	str	r5, [r3, #0]
 8007768:	e695      	b.n	8007496 <__gethex+0x12a>
 800776a:	4299      	cmp	r1, r3
 800776c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007770:	d8d8      	bhi.n	8007724 <__gethex+0x3b8>
 8007772:	68a3      	ldr	r3, [r4, #8]
 8007774:	459b      	cmp	fp, r3
 8007776:	db19      	blt.n	80077ac <__gethex+0x440>
 8007778:	6861      	ldr	r1, [r4, #4]
 800777a:	ee18 0a10 	vmov	r0, s16
 800777e:	3101      	adds	r1, #1
 8007780:	f000 f928 	bl	80079d4 <_Balloc>
 8007784:	4681      	mov	r9, r0
 8007786:	b918      	cbnz	r0, 8007790 <__gethex+0x424>
 8007788:	4b1a      	ldr	r3, [pc, #104]	; (80077f4 <__gethex+0x488>)
 800778a:	4602      	mov	r2, r0
 800778c:	2184      	movs	r1, #132	; 0x84
 800778e:	e6a8      	b.n	80074e2 <__gethex+0x176>
 8007790:	6922      	ldr	r2, [r4, #16]
 8007792:	3202      	adds	r2, #2
 8007794:	f104 010c 	add.w	r1, r4, #12
 8007798:	0092      	lsls	r2, r2, #2
 800779a:	300c      	adds	r0, #12
 800779c:	f000 f90c 	bl	80079b8 <memcpy>
 80077a0:	4621      	mov	r1, r4
 80077a2:	ee18 0a10 	vmov	r0, s16
 80077a6:	f000 f955 	bl	8007a54 <_Bfree>
 80077aa:	464c      	mov	r4, r9
 80077ac:	6923      	ldr	r3, [r4, #16]
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80077b4:	6122      	str	r2, [r4, #16]
 80077b6:	2201      	movs	r2, #1
 80077b8:	615a      	str	r2, [r3, #20]
 80077ba:	e7bb      	b.n	8007734 <__gethex+0x3c8>
 80077bc:	6922      	ldr	r2, [r4, #16]
 80077be:	455a      	cmp	r2, fp
 80077c0:	dd0b      	ble.n	80077da <__gethex+0x46e>
 80077c2:	2101      	movs	r1, #1
 80077c4:	4620      	mov	r0, r4
 80077c6:	f7ff fd69 	bl	800729c <rshift>
 80077ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077ce:	3501      	adds	r5, #1
 80077d0:	42ab      	cmp	r3, r5
 80077d2:	f6ff aed0 	blt.w	8007576 <__gethex+0x20a>
 80077d6:	2701      	movs	r7, #1
 80077d8:	e7c0      	b.n	800775c <__gethex+0x3f0>
 80077da:	f016 061f 	ands.w	r6, r6, #31
 80077de:	d0fa      	beq.n	80077d6 <__gethex+0x46a>
 80077e0:	4453      	add	r3, sl
 80077e2:	f1c6 0620 	rsb	r6, r6, #32
 80077e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80077ea:	f000 f9e5 	bl	8007bb8 <__hi0bits>
 80077ee:	42b0      	cmp	r0, r6
 80077f0:	dbe7      	blt.n	80077c2 <__gethex+0x456>
 80077f2:	e7f0      	b.n	80077d6 <__gethex+0x46a>
 80077f4:	0800a4a8 	.word	0x0800a4a8

080077f8 <L_shift>:
 80077f8:	f1c2 0208 	rsb	r2, r2, #8
 80077fc:	0092      	lsls	r2, r2, #2
 80077fe:	b570      	push	{r4, r5, r6, lr}
 8007800:	f1c2 0620 	rsb	r6, r2, #32
 8007804:	6843      	ldr	r3, [r0, #4]
 8007806:	6804      	ldr	r4, [r0, #0]
 8007808:	fa03 f506 	lsl.w	r5, r3, r6
 800780c:	432c      	orrs	r4, r5
 800780e:	40d3      	lsrs	r3, r2
 8007810:	6004      	str	r4, [r0, #0]
 8007812:	f840 3f04 	str.w	r3, [r0, #4]!
 8007816:	4288      	cmp	r0, r1
 8007818:	d3f4      	bcc.n	8007804 <L_shift+0xc>
 800781a:	bd70      	pop	{r4, r5, r6, pc}

0800781c <__match>:
 800781c:	b530      	push	{r4, r5, lr}
 800781e:	6803      	ldr	r3, [r0, #0]
 8007820:	3301      	adds	r3, #1
 8007822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007826:	b914      	cbnz	r4, 800782e <__match+0x12>
 8007828:	6003      	str	r3, [r0, #0]
 800782a:	2001      	movs	r0, #1
 800782c:	bd30      	pop	{r4, r5, pc}
 800782e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007832:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007836:	2d19      	cmp	r5, #25
 8007838:	bf98      	it	ls
 800783a:	3220      	addls	r2, #32
 800783c:	42a2      	cmp	r2, r4
 800783e:	d0f0      	beq.n	8007822 <__match+0x6>
 8007840:	2000      	movs	r0, #0
 8007842:	e7f3      	b.n	800782c <__match+0x10>

08007844 <__hexnan>:
 8007844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007848:	680b      	ldr	r3, [r1, #0]
 800784a:	115e      	asrs	r6, r3, #5
 800784c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007850:	f013 031f 	ands.w	r3, r3, #31
 8007854:	b087      	sub	sp, #28
 8007856:	bf18      	it	ne
 8007858:	3604      	addne	r6, #4
 800785a:	2500      	movs	r5, #0
 800785c:	1f37      	subs	r7, r6, #4
 800785e:	4690      	mov	r8, r2
 8007860:	6802      	ldr	r2, [r0, #0]
 8007862:	9301      	str	r3, [sp, #4]
 8007864:	4682      	mov	sl, r0
 8007866:	f846 5c04 	str.w	r5, [r6, #-4]
 800786a:	46b9      	mov	r9, r7
 800786c:	463c      	mov	r4, r7
 800786e:	9502      	str	r5, [sp, #8]
 8007870:	46ab      	mov	fp, r5
 8007872:	7851      	ldrb	r1, [r2, #1]
 8007874:	1c53      	adds	r3, r2, #1
 8007876:	9303      	str	r3, [sp, #12]
 8007878:	b341      	cbz	r1, 80078cc <__hexnan+0x88>
 800787a:	4608      	mov	r0, r1
 800787c:	9205      	str	r2, [sp, #20]
 800787e:	9104      	str	r1, [sp, #16]
 8007880:	f7ff fd5e 	bl	8007340 <__hexdig_fun>
 8007884:	2800      	cmp	r0, #0
 8007886:	d14f      	bne.n	8007928 <__hexnan+0xe4>
 8007888:	9904      	ldr	r1, [sp, #16]
 800788a:	9a05      	ldr	r2, [sp, #20]
 800788c:	2920      	cmp	r1, #32
 800788e:	d818      	bhi.n	80078c2 <__hexnan+0x7e>
 8007890:	9b02      	ldr	r3, [sp, #8]
 8007892:	459b      	cmp	fp, r3
 8007894:	dd13      	ble.n	80078be <__hexnan+0x7a>
 8007896:	454c      	cmp	r4, r9
 8007898:	d206      	bcs.n	80078a8 <__hexnan+0x64>
 800789a:	2d07      	cmp	r5, #7
 800789c:	dc04      	bgt.n	80078a8 <__hexnan+0x64>
 800789e:	462a      	mov	r2, r5
 80078a0:	4649      	mov	r1, r9
 80078a2:	4620      	mov	r0, r4
 80078a4:	f7ff ffa8 	bl	80077f8 <L_shift>
 80078a8:	4544      	cmp	r4, r8
 80078aa:	d950      	bls.n	800794e <__hexnan+0x10a>
 80078ac:	2300      	movs	r3, #0
 80078ae:	f1a4 0904 	sub.w	r9, r4, #4
 80078b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80078b6:	f8cd b008 	str.w	fp, [sp, #8]
 80078ba:	464c      	mov	r4, r9
 80078bc:	461d      	mov	r5, r3
 80078be:	9a03      	ldr	r2, [sp, #12]
 80078c0:	e7d7      	b.n	8007872 <__hexnan+0x2e>
 80078c2:	2929      	cmp	r1, #41	; 0x29
 80078c4:	d156      	bne.n	8007974 <__hexnan+0x130>
 80078c6:	3202      	adds	r2, #2
 80078c8:	f8ca 2000 	str.w	r2, [sl]
 80078cc:	f1bb 0f00 	cmp.w	fp, #0
 80078d0:	d050      	beq.n	8007974 <__hexnan+0x130>
 80078d2:	454c      	cmp	r4, r9
 80078d4:	d206      	bcs.n	80078e4 <__hexnan+0xa0>
 80078d6:	2d07      	cmp	r5, #7
 80078d8:	dc04      	bgt.n	80078e4 <__hexnan+0xa0>
 80078da:	462a      	mov	r2, r5
 80078dc:	4649      	mov	r1, r9
 80078de:	4620      	mov	r0, r4
 80078e0:	f7ff ff8a 	bl	80077f8 <L_shift>
 80078e4:	4544      	cmp	r4, r8
 80078e6:	d934      	bls.n	8007952 <__hexnan+0x10e>
 80078e8:	f1a8 0204 	sub.w	r2, r8, #4
 80078ec:	4623      	mov	r3, r4
 80078ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80078f2:	f842 1f04 	str.w	r1, [r2, #4]!
 80078f6:	429f      	cmp	r7, r3
 80078f8:	d2f9      	bcs.n	80078ee <__hexnan+0xaa>
 80078fa:	1b3b      	subs	r3, r7, r4
 80078fc:	f023 0303 	bic.w	r3, r3, #3
 8007900:	3304      	adds	r3, #4
 8007902:	3401      	adds	r4, #1
 8007904:	3e03      	subs	r6, #3
 8007906:	42b4      	cmp	r4, r6
 8007908:	bf88      	it	hi
 800790a:	2304      	movhi	r3, #4
 800790c:	4443      	add	r3, r8
 800790e:	2200      	movs	r2, #0
 8007910:	f843 2b04 	str.w	r2, [r3], #4
 8007914:	429f      	cmp	r7, r3
 8007916:	d2fb      	bcs.n	8007910 <__hexnan+0xcc>
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	b91b      	cbnz	r3, 8007924 <__hexnan+0xe0>
 800791c:	4547      	cmp	r7, r8
 800791e:	d127      	bne.n	8007970 <__hexnan+0x12c>
 8007920:	2301      	movs	r3, #1
 8007922:	603b      	str	r3, [r7, #0]
 8007924:	2005      	movs	r0, #5
 8007926:	e026      	b.n	8007976 <__hexnan+0x132>
 8007928:	3501      	adds	r5, #1
 800792a:	2d08      	cmp	r5, #8
 800792c:	f10b 0b01 	add.w	fp, fp, #1
 8007930:	dd06      	ble.n	8007940 <__hexnan+0xfc>
 8007932:	4544      	cmp	r4, r8
 8007934:	d9c3      	bls.n	80078be <__hexnan+0x7a>
 8007936:	2300      	movs	r3, #0
 8007938:	f844 3c04 	str.w	r3, [r4, #-4]
 800793c:	2501      	movs	r5, #1
 800793e:	3c04      	subs	r4, #4
 8007940:	6822      	ldr	r2, [r4, #0]
 8007942:	f000 000f 	and.w	r0, r0, #15
 8007946:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800794a:	6022      	str	r2, [r4, #0]
 800794c:	e7b7      	b.n	80078be <__hexnan+0x7a>
 800794e:	2508      	movs	r5, #8
 8007950:	e7b5      	b.n	80078be <__hexnan+0x7a>
 8007952:	9b01      	ldr	r3, [sp, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0df      	beq.n	8007918 <__hexnan+0xd4>
 8007958:	f04f 32ff 	mov.w	r2, #4294967295
 800795c:	f1c3 0320 	rsb	r3, r3, #32
 8007960:	fa22 f303 	lsr.w	r3, r2, r3
 8007964:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007968:	401a      	ands	r2, r3
 800796a:	f846 2c04 	str.w	r2, [r6, #-4]
 800796e:	e7d3      	b.n	8007918 <__hexnan+0xd4>
 8007970:	3f04      	subs	r7, #4
 8007972:	e7d1      	b.n	8007918 <__hexnan+0xd4>
 8007974:	2004      	movs	r0, #4
 8007976:	b007      	add	sp, #28
 8007978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800797c <_localeconv_r>:
 800797c:	4800      	ldr	r0, [pc, #0]	; (8007980 <_localeconv_r+0x4>)
 800797e:	4770      	bx	lr
 8007980:	20000164 	.word	0x20000164

08007984 <malloc>:
 8007984:	4b02      	ldr	r3, [pc, #8]	; (8007990 <malloc+0xc>)
 8007986:	4601      	mov	r1, r0
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	f000 bd67 	b.w	800845c <_malloc_r>
 800798e:	bf00      	nop
 8007990:	2000000c 	.word	0x2000000c

08007994 <__ascii_mbtowc>:
 8007994:	b082      	sub	sp, #8
 8007996:	b901      	cbnz	r1, 800799a <__ascii_mbtowc+0x6>
 8007998:	a901      	add	r1, sp, #4
 800799a:	b142      	cbz	r2, 80079ae <__ascii_mbtowc+0x1a>
 800799c:	b14b      	cbz	r3, 80079b2 <__ascii_mbtowc+0x1e>
 800799e:	7813      	ldrb	r3, [r2, #0]
 80079a0:	600b      	str	r3, [r1, #0]
 80079a2:	7812      	ldrb	r2, [r2, #0]
 80079a4:	1e10      	subs	r0, r2, #0
 80079a6:	bf18      	it	ne
 80079a8:	2001      	movne	r0, #1
 80079aa:	b002      	add	sp, #8
 80079ac:	4770      	bx	lr
 80079ae:	4610      	mov	r0, r2
 80079b0:	e7fb      	b.n	80079aa <__ascii_mbtowc+0x16>
 80079b2:	f06f 0001 	mvn.w	r0, #1
 80079b6:	e7f8      	b.n	80079aa <__ascii_mbtowc+0x16>

080079b8 <memcpy>:
 80079b8:	440a      	add	r2, r1
 80079ba:	4291      	cmp	r1, r2
 80079bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80079c0:	d100      	bne.n	80079c4 <memcpy+0xc>
 80079c2:	4770      	bx	lr
 80079c4:	b510      	push	{r4, lr}
 80079c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079ce:	4291      	cmp	r1, r2
 80079d0:	d1f9      	bne.n	80079c6 <memcpy+0xe>
 80079d2:	bd10      	pop	{r4, pc}

080079d4 <_Balloc>:
 80079d4:	b570      	push	{r4, r5, r6, lr}
 80079d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079d8:	4604      	mov	r4, r0
 80079da:	460d      	mov	r5, r1
 80079dc:	b976      	cbnz	r6, 80079fc <_Balloc+0x28>
 80079de:	2010      	movs	r0, #16
 80079e0:	f7ff ffd0 	bl	8007984 <malloc>
 80079e4:	4602      	mov	r2, r0
 80079e6:	6260      	str	r0, [r4, #36]	; 0x24
 80079e8:	b920      	cbnz	r0, 80079f4 <_Balloc+0x20>
 80079ea:	4b18      	ldr	r3, [pc, #96]	; (8007a4c <_Balloc+0x78>)
 80079ec:	4818      	ldr	r0, [pc, #96]	; (8007a50 <_Balloc+0x7c>)
 80079ee:	2166      	movs	r1, #102	; 0x66
 80079f0:	f000 ff40 	bl	8008874 <__assert_func>
 80079f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079f8:	6006      	str	r6, [r0, #0]
 80079fa:	60c6      	str	r6, [r0, #12]
 80079fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80079fe:	68f3      	ldr	r3, [r6, #12]
 8007a00:	b183      	cbz	r3, 8007a24 <_Balloc+0x50>
 8007a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a0a:	b9b8      	cbnz	r0, 8007a3c <_Balloc+0x68>
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	fa01 f605 	lsl.w	r6, r1, r5
 8007a12:	1d72      	adds	r2, r6, #5
 8007a14:	0092      	lsls	r2, r2, #2
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 fc9d 	bl	8008356 <_calloc_r>
 8007a1c:	b160      	cbz	r0, 8007a38 <_Balloc+0x64>
 8007a1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a22:	e00e      	b.n	8007a42 <_Balloc+0x6e>
 8007a24:	2221      	movs	r2, #33	; 0x21
 8007a26:	2104      	movs	r1, #4
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f000 fc94 	bl	8008356 <_calloc_r>
 8007a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a30:	60f0      	str	r0, [r6, #12]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1e4      	bne.n	8007a02 <_Balloc+0x2e>
 8007a38:	2000      	movs	r0, #0
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	6802      	ldr	r2, [r0, #0]
 8007a3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a42:	2300      	movs	r3, #0
 8007a44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a48:	e7f7      	b.n	8007a3a <_Balloc+0x66>
 8007a4a:	bf00      	nop
 8007a4c:	0800a436 	.word	0x0800a436
 8007a50:	0800a534 	.word	0x0800a534

08007a54 <_Bfree>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a58:	4605      	mov	r5, r0
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	b976      	cbnz	r6, 8007a7c <_Bfree+0x28>
 8007a5e:	2010      	movs	r0, #16
 8007a60:	f7ff ff90 	bl	8007984 <malloc>
 8007a64:	4602      	mov	r2, r0
 8007a66:	6268      	str	r0, [r5, #36]	; 0x24
 8007a68:	b920      	cbnz	r0, 8007a74 <_Bfree+0x20>
 8007a6a:	4b09      	ldr	r3, [pc, #36]	; (8007a90 <_Bfree+0x3c>)
 8007a6c:	4809      	ldr	r0, [pc, #36]	; (8007a94 <_Bfree+0x40>)
 8007a6e:	218a      	movs	r1, #138	; 0x8a
 8007a70:	f000 ff00 	bl	8008874 <__assert_func>
 8007a74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a78:	6006      	str	r6, [r0, #0]
 8007a7a:	60c6      	str	r6, [r0, #12]
 8007a7c:	b13c      	cbz	r4, 8007a8e <_Bfree+0x3a>
 8007a7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a80:	6862      	ldr	r2, [r4, #4]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a88:	6021      	str	r1, [r4, #0]
 8007a8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	0800a436 	.word	0x0800a436
 8007a94:	0800a534 	.word	0x0800a534

08007a98 <__multadd>:
 8007a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a9c:	690d      	ldr	r5, [r1, #16]
 8007a9e:	4607      	mov	r7, r0
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	461e      	mov	r6, r3
 8007aa4:	f101 0c14 	add.w	ip, r1, #20
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	f8dc 3000 	ldr.w	r3, [ip]
 8007aae:	b299      	uxth	r1, r3
 8007ab0:	fb02 6101 	mla	r1, r2, r1, r6
 8007ab4:	0c1e      	lsrs	r6, r3, #16
 8007ab6:	0c0b      	lsrs	r3, r1, #16
 8007ab8:	fb02 3306 	mla	r3, r2, r6, r3
 8007abc:	b289      	uxth	r1, r1
 8007abe:	3001      	adds	r0, #1
 8007ac0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ac4:	4285      	cmp	r5, r0
 8007ac6:	f84c 1b04 	str.w	r1, [ip], #4
 8007aca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ace:	dcec      	bgt.n	8007aaa <__multadd+0x12>
 8007ad0:	b30e      	cbz	r6, 8007b16 <__multadd+0x7e>
 8007ad2:	68a3      	ldr	r3, [r4, #8]
 8007ad4:	42ab      	cmp	r3, r5
 8007ad6:	dc19      	bgt.n	8007b0c <__multadd+0x74>
 8007ad8:	6861      	ldr	r1, [r4, #4]
 8007ada:	4638      	mov	r0, r7
 8007adc:	3101      	adds	r1, #1
 8007ade:	f7ff ff79 	bl	80079d4 <_Balloc>
 8007ae2:	4680      	mov	r8, r0
 8007ae4:	b928      	cbnz	r0, 8007af2 <__multadd+0x5a>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	4b0c      	ldr	r3, [pc, #48]	; (8007b1c <__multadd+0x84>)
 8007aea:	480d      	ldr	r0, [pc, #52]	; (8007b20 <__multadd+0x88>)
 8007aec:	21b5      	movs	r1, #181	; 0xb5
 8007aee:	f000 fec1 	bl	8008874 <__assert_func>
 8007af2:	6922      	ldr	r2, [r4, #16]
 8007af4:	3202      	adds	r2, #2
 8007af6:	f104 010c 	add.w	r1, r4, #12
 8007afa:	0092      	lsls	r2, r2, #2
 8007afc:	300c      	adds	r0, #12
 8007afe:	f7ff ff5b 	bl	80079b8 <memcpy>
 8007b02:	4621      	mov	r1, r4
 8007b04:	4638      	mov	r0, r7
 8007b06:	f7ff ffa5 	bl	8007a54 <_Bfree>
 8007b0a:	4644      	mov	r4, r8
 8007b0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b10:	3501      	adds	r5, #1
 8007b12:	615e      	str	r6, [r3, #20]
 8007b14:	6125      	str	r5, [r4, #16]
 8007b16:	4620      	mov	r0, r4
 8007b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b1c:	0800a4a8 	.word	0x0800a4a8
 8007b20:	0800a534 	.word	0x0800a534

08007b24 <__s2b>:
 8007b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b28:	460c      	mov	r4, r1
 8007b2a:	4615      	mov	r5, r2
 8007b2c:	461f      	mov	r7, r3
 8007b2e:	2209      	movs	r2, #9
 8007b30:	3308      	adds	r3, #8
 8007b32:	4606      	mov	r6, r0
 8007b34:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b38:	2100      	movs	r1, #0
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	db09      	blt.n	8007b54 <__s2b+0x30>
 8007b40:	4630      	mov	r0, r6
 8007b42:	f7ff ff47 	bl	80079d4 <_Balloc>
 8007b46:	b940      	cbnz	r0, 8007b5a <__s2b+0x36>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	4b19      	ldr	r3, [pc, #100]	; (8007bb0 <__s2b+0x8c>)
 8007b4c:	4819      	ldr	r0, [pc, #100]	; (8007bb4 <__s2b+0x90>)
 8007b4e:	21ce      	movs	r1, #206	; 0xce
 8007b50:	f000 fe90 	bl	8008874 <__assert_func>
 8007b54:	0052      	lsls	r2, r2, #1
 8007b56:	3101      	adds	r1, #1
 8007b58:	e7f0      	b.n	8007b3c <__s2b+0x18>
 8007b5a:	9b08      	ldr	r3, [sp, #32]
 8007b5c:	6143      	str	r3, [r0, #20]
 8007b5e:	2d09      	cmp	r5, #9
 8007b60:	f04f 0301 	mov.w	r3, #1
 8007b64:	6103      	str	r3, [r0, #16]
 8007b66:	dd16      	ble.n	8007b96 <__s2b+0x72>
 8007b68:	f104 0909 	add.w	r9, r4, #9
 8007b6c:	46c8      	mov	r8, r9
 8007b6e:	442c      	add	r4, r5
 8007b70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007b74:	4601      	mov	r1, r0
 8007b76:	3b30      	subs	r3, #48	; 0x30
 8007b78:	220a      	movs	r2, #10
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f7ff ff8c 	bl	8007a98 <__multadd>
 8007b80:	45a0      	cmp	r8, r4
 8007b82:	d1f5      	bne.n	8007b70 <__s2b+0x4c>
 8007b84:	f1a5 0408 	sub.w	r4, r5, #8
 8007b88:	444c      	add	r4, r9
 8007b8a:	1b2d      	subs	r5, r5, r4
 8007b8c:	1963      	adds	r3, r4, r5
 8007b8e:	42bb      	cmp	r3, r7
 8007b90:	db04      	blt.n	8007b9c <__s2b+0x78>
 8007b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b96:	340a      	adds	r4, #10
 8007b98:	2509      	movs	r5, #9
 8007b9a:	e7f6      	b.n	8007b8a <__s2b+0x66>
 8007b9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007ba0:	4601      	mov	r1, r0
 8007ba2:	3b30      	subs	r3, #48	; 0x30
 8007ba4:	220a      	movs	r2, #10
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f7ff ff76 	bl	8007a98 <__multadd>
 8007bac:	e7ee      	b.n	8007b8c <__s2b+0x68>
 8007bae:	bf00      	nop
 8007bb0:	0800a4a8 	.word	0x0800a4a8
 8007bb4:	0800a534 	.word	0x0800a534

08007bb8 <__hi0bits>:
 8007bb8:	0c03      	lsrs	r3, r0, #16
 8007bba:	041b      	lsls	r3, r3, #16
 8007bbc:	b9d3      	cbnz	r3, 8007bf4 <__hi0bits+0x3c>
 8007bbe:	0400      	lsls	r0, r0, #16
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007bc6:	bf04      	itt	eq
 8007bc8:	0200      	lsleq	r0, r0, #8
 8007bca:	3308      	addeq	r3, #8
 8007bcc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007bd0:	bf04      	itt	eq
 8007bd2:	0100      	lsleq	r0, r0, #4
 8007bd4:	3304      	addeq	r3, #4
 8007bd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007bda:	bf04      	itt	eq
 8007bdc:	0080      	lsleq	r0, r0, #2
 8007bde:	3302      	addeq	r3, #2
 8007be0:	2800      	cmp	r0, #0
 8007be2:	db05      	blt.n	8007bf0 <__hi0bits+0x38>
 8007be4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007be8:	f103 0301 	add.w	r3, r3, #1
 8007bec:	bf08      	it	eq
 8007bee:	2320      	moveq	r3, #32
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	4770      	bx	lr
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	e7e4      	b.n	8007bc2 <__hi0bits+0xa>

08007bf8 <__lo0bits>:
 8007bf8:	6803      	ldr	r3, [r0, #0]
 8007bfa:	f013 0207 	ands.w	r2, r3, #7
 8007bfe:	4601      	mov	r1, r0
 8007c00:	d00b      	beq.n	8007c1a <__lo0bits+0x22>
 8007c02:	07da      	lsls	r2, r3, #31
 8007c04:	d423      	bmi.n	8007c4e <__lo0bits+0x56>
 8007c06:	0798      	lsls	r0, r3, #30
 8007c08:	bf49      	itett	mi
 8007c0a:	085b      	lsrmi	r3, r3, #1
 8007c0c:	089b      	lsrpl	r3, r3, #2
 8007c0e:	2001      	movmi	r0, #1
 8007c10:	600b      	strmi	r3, [r1, #0]
 8007c12:	bf5c      	itt	pl
 8007c14:	600b      	strpl	r3, [r1, #0]
 8007c16:	2002      	movpl	r0, #2
 8007c18:	4770      	bx	lr
 8007c1a:	b298      	uxth	r0, r3
 8007c1c:	b9a8      	cbnz	r0, 8007c4a <__lo0bits+0x52>
 8007c1e:	0c1b      	lsrs	r3, r3, #16
 8007c20:	2010      	movs	r0, #16
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	b90a      	cbnz	r2, 8007c2a <__lo0bits+0x32>
 8007c26:	3008      	adds	r0, #8
 8007c28:	0a1b      	lsrs	r3, r3, #8
 8007c2a:	071a      	lsls	r2, r3, #28
 8007c2c:	bf04      	itt	eq
 8007c2e:	091b      	lsreq	r3, r3, #4
 8007c30:	3004      	addeq	r0, #4
 8007c32:	079a      	lsls	r2, r3, #30
 8007c34:	bf04      	itt	eq
 8007c36:	089b      	lsreq	r3, r3, #2
 8007c38:	3002      	addeq	r0, #2
 8007c3a:	07da      	lsls	r2, r3, #31
 8007c3c:	d403      	bmi.n	8007c46 <__lo0bits+0x4e>
 8007c3e:	085b      	lsrs	r3, r3, #1
 8007c40:	f100 0001 	add.w	r0, r0, #1
 8007c44:	d005      	beq.n	8007c52 <__lo0bits+0x5a>
 8007c46:	600b      	str	r3, [r1, #0]
 8007c48:	4770      	bx	lr
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	e7e9      	b.n	8007c22 <__lo0bits+0x2a>
 8007c4e:	2000      	movs	r0, #0
 8007c50:	4770      	bx	lr
 8007c52:	2020      	movs	r0, #32
 8007c54:	4770      	bx	lr
	...

08007c58 <__i2b>:
 8007c58:	b510      	push	{r4, lr}
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	f7ff feb9 	bl	80079d4 <_Balloc>
 8007c62:	4602      	mov	r2, r0
 8007c64:	b928      	cbnz	r0, 8007c72 <__i2b+0x1a>
 8007c66:	4b05      	ldr	r3, [pc, #20]	; (8007c7c <__i2b+0x24>)
 8007c68:	4805      	ldr	r0, [pc, #20]	; (8007c80 <__i2b+0x28>)
 8007c6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c6e:	f000 fe01 	bl	8008874 <__assert_func>
 8007c72:	2301      	movs	r3, #1
 8007c74:	6144      	str	r4, [r0, #20]
 8007c76:	6103      	str	r3, [r0, #16]
 8007c78:	bd10      	pop	{r4, pc}
 8007c7a:	bf00      	nop
 8007c7c:	0800a4a8 	.word	0x0800a4a8
 8007c80:	0800a534 	.word	0x0800a534

08007c84 <__multiply>:
 8007c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c88:	4691      	mov	r9, r2
 8007c8a:	690a      	ldr	r2, [r1, #16]
 8007c8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	bfb8      	it	lt
 8007c94:	460b      	movlt	r3, r1
 8007c96:	460c      	mov	r4, r1
 8007c98:	bfbc      	itt	lt
 8007c9a:	464c      	movlt	r4, r9
 8007c9c:	4699      	movlt	r9, r3
 8007c9e:	6927      	ldr	r7, [r4, #16]
 8007ca0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ca4:	68a3      	ldr	r3, [r4, #8]
 8007ca6:	6861      	ldr	r1, [r4, #4]
 8007ca8:	eb07 060a 	add.w	r6, r7, sl
 8007cac:	42b3      	cmp	r3, r6
 8007cae:	b085      	sub	sp, #20
 8007cb0:	bfb8      	it	lt
 8007cb2:	3101      	addlt	r1, #1
 8007cb4:	f7ff fe8e 	bl	80079d4 <_Balloc>
 8007cb8:	b930      	cbnz	r0, 8007cc8 <__multiply+0x44>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	4b44      	ldr	r3, [pc, #272]	; (8007dd0 <__multiply+0x14c>)
 8007cbe:	4845      	ldr	r0, [pc, #276]	; (8007dd4 <__multiply+0x150>)
 8007cc0:	f240 115d 	movw	r1, #349	; 0x15d
 8007cc4:	f000 fdd6 	bl	8008874 <__assert_func>
 8007cc8:	f100 0514 	add.w	r5, r0, #20
 8007ccc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007cd0:	462b      	mov	r3, r5
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	4543      	cmp	r3, r8
 8007cd6:	d321      	bcc.n	8007d1c <__multiply+0x98>
 8007cd8:	f104 0314 	add.w	r3, r4, #20
 8007cdc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ce0:	f109 0314 	add.w	r3, r9, #20
 8007ce4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ce8:	9202      	str	r2, [sp, #8]
 8007cea:	1b3a      	subs	r2, r7, r4
 8007cec:	3a15      	subs	r2, #21
 8007cee:	f022 0203 	bic.w	r2, r2, #3
 8007cf2:	3204      	adds	r2, #4
 8007cf4:	f104 0115 	add.w	r1, r4, #21
 8007cf8:	428f      	cmp	r7, r1
 8007cfa:	bf38      	it	cc
 8007cfc:	2204      	movcc	r2, #4
 8007cfe:	9201      	str	r2, [sp, #4]
 8007d00:	9a02      	ldr	r2, [sp, #8]
 8007d02:	9303      	str	r3, [sp, #12]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d80c      	bhi.n	8007d22 <__multiply+0x9e>
 8007d08:	2e00      	cmp	r6, #0
 8007d0a:	dd03      	ble.n	8007d14 <__multiply+0x90>
 8007d0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d05a      	beq.n	8007dca <__multiply+0x146>
 8007d14:	6106      	str	r6, [r0, #16]
 8007d16:	b005      	add	sp, #20
 8007d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1c:	f843 2b04 	str.w	r2, [r3], #4
 8007d20:	e7d8      	b.n	8007cd4 <__multiply+0x50>
 8007d22:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d26:	f1ba 0f00 	cmp.w	sl, #0
 8007d2a:	d024      	beq.n	8007d76 <__multiply+0xf2>
 8007d2c:	f104 0e14 	add.w	lr, r4, #20
 8007d30:	46a9      	mov	r9, r5
 8007d32:	f04f 0c00 	mov.w	ip, #0
 8007d36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d3a:	f8d9 1000 	ldr.w	r1, [r9]
 8007d3e:	fa1f fb82 	uxth.w	fp, r2
 8007d42:	b289      	uxth	r1, r1
 8007d44:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d4c:	f8d9 2000 	ldr.w	r2, [r9]
 8007d50:	4461      	add	r1, ip
 8007d52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d56:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d5e:	b289      	uxth	r1, r1
 8007d60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d64:	4577      	cmp	r7, lr
 8007d66:	f849 1b04 	str.w	r1, [r9], #4
 8007d6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d6e:	d8e2      	bhi.n	8007d36 <__multiply+0xb2>
 8007d70:	9a01      	ldr	r2, [sp, #4]
 8007d72:	f845 c002 	str.w	ip, [r5, r2]
 8007d76:	9a03      	ldr	r2, [sp, #12]
 8007d78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	f1b9 0f00 	cmp.w	r9, #0
 8007d82:	d020      	beq.n	8007dc6 <__multiply+0x142>
 8007d84:	6829      	ldr	r1, [r5, #0]
 8007d86:	f104 0c14 	add.w	ip, r4, #20
 8007d8a:	46ae      	mov	lr, r5
 8007d8c:	f04f 0a00 	mov.w	sl, #0
 8007d90:	f8bc b000 	ldrh.w	fp, [ip]
 8007d94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d98:	fb09 220b 	mla	r2, r9, fp, r2
 8007d9c:	4492      	add	sl, r2
 8007d9e:	b289      	uxth	r1, r1
 8007da0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007da4:	f84e 1b04 	str.w	r1, [lr], #4
 8007da8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007dac:	f8be 1000 	ldrh.w	r1, [lr]
 8007db0:	0c12      	lsrs	r2, r2, #16
 8007db2:	fb09 1102 	mla	r1, r9, r2, r1
 8007db6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007dba:	4567      	cmp	r7, ip
 8007dbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007dc0:	d8e6      	bhi.n	8007d90 <__multiply+0x10c>
 8007dc2:	9a01      	ldr	r2, [sp, #4]
 8007dc4:	50a9      	str	r1, [r5, r2]
 8007dc6:	3504      	adds	r5, #4
 8007dc8:	e79a      	b.n	8007d00 <__multiply+0x7c>
 8007dca:	3e01      	subs	r6, #1
 8007dcc:	e79c      	b.n	8007d08 <__multiply+0x84>
 8007dce:	bf00      	nop
 8007dd0:	0800a4a8 	.word	0x0800a4a8
 8007dd4:	0800a534 	.word	0x0800a534

08007dd8 <__pow5mult>:
 8007dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ddc:	4615      	mov	r5, r2
 8007dde:	f012 0203 	ands.w	r2, r2, #3
 8007de2:	4606      	mov	r6, r0
 8007de4:	460f      	mov	r7, r1
 8007de6:	d007      	beq.n	8007df8 <__pow5mult+0x20>
 8007de8:	4c25      	ldr	r4, [pc, #148]	; (8007e80 <__pow5mult+0xa8>)
 8007dea:	3a01      	subs	r2, #1
 8007dec:	2300      	movs	r3, #0
 8007dee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007df2:	f7ff fe51 	bl	8007a98 <__multadd>
 8007df6:	4607      	mov	r7, r0
 8007df8:	10ad      	asrs	r5, r5, #2
 8007dfa:	d03d      	beq.n	8007e78 <__pow5mult+0xa0>
 8007dfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007dfe:	b97c      	cbnz	r4, 8007e20 <__pow5mult+0x48>
 8007e00:	2010      	movs	r0, #16
 8007e02:	f7ff fdbf 	bl	8007984 <malloc>
 8007e06:	4602      	mov	r2, r0
 8007e08:	6270      	str	r0, [r6, #36]	; 0x24
 8007e0a:	b928      	cbnz	r0, 8007e18 <__pow5mult+0x40>
 8007e0c:	4b1d      	ldr	r3, [pc, #116]	; (8007e84 <__pow5mult+0xac>)
 8007e0e:	481e      	ldr	r0, [pc, #120]	; (8007e88 <__pow5mult+0xb0>)
 8007e10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e14:	f000 fd2e 	bl	8008874 <__assert_func>
 8007e18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e1c:	6004      	str	r4, [r0, #0]
 8007e1e:	60c4      	str	r4, [r0, #12]
 8007e20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e28:	b94c      	cbnz	r4, 8007e3e <__pow5mult+0x66>
 8007e2a:	f240 2171 	movw	r1, #625	; 0x271
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f7ff ff12 	bl	8007c58 <__i2b>
 8007e34:	2300      	movs	r3, #0
 8007e36:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	6003      	str	r3, [r0, #0]
 8007e3e:	f04f 0900 	mov.w	r9, #0
 8007e42:	07eb      	lsls	r3, r5, #31
 8007e44:	d50a      	bpl.n	8007e5c <__pow5mult+0x84>
 8007e46:	4639      	mov	r1, r7
 8007e48:	4622      	mov	r2, r4
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f7ff ff1a 	bl	8007c84 <__multiply>
 8007e50:	4639      	mov	r1, r7
 8007e52:	4680      	mov	r8, r0
 8007e54:	4630      	mov	r0, r6
 8007e56:	f7ff fdfd 	bl	8007a54 <_Bfree>
 8007e5a:	4647      	mov	r7, r8
 8007e5c:	106d      	asrs	r5, r5, #1
 8007e5e:	d00b      	beq.n	8007e78 <__pow5mult+0xa0>
 8007e60:	6820      	ldr	r0, [r4, #0]
 8007e62:	b938      	cbnz	r0, 8007e74 <__pow5mult+0x9c>
 8007e64:	4622      	mov	r2, r4
 8007e66:	4621      	mov	r1, r4
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f7ff ff0b 	bl	8007c84 <__multiply>
 8007e6e:	6020      	str	r0, [r4, #0]
 8007e70:	f8c0 9000 	str.w	r9, [r0]
 8007e74:	4604      	mov	r4, r0
 8007e76:	e7e4      	b.n	8007e42 <__pow5mult+0x6a>
 8007e78:	4638      	mov	r0, r7
 8007e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e7e:	bf00      	nop
 8007e80:	0800a680 	.word	0x0800a680
 8007e84:	0800a436 	.word	0x0800a436
 8007e88:	0800a534 	.word	0x0800a534

08007e8c <__lshift>:
 8007e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e90:	460c      	mov	r4, r1
 8007e92:	6849      	ldr	r1, [r1, #4]
 8007e94:	6923      	ldr	r3, [r4, #16]
 8007e96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e9a:	68a3      	ldr	r3, [r4, #8]
 8007e9c:	4607      	mov	r7, r0
 8007e9e:	4691      	mov	r9, r2
 8007ea0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ea4:	f108 0601 	add.w	r6, r8, #1
 8007ea8:	42b3      	cmp	r3, r6
 8007eaa:	db0b      	blt.n	8007ec4 <__lshift+0x38>
 8007eac:	4638      	mov	r0, r7
 8007eae:	f7ff fd91 	bl	80079d4 <_Balloc>
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	b948      	cbnz	r0, 8007eca <__lshift+0x3e>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	4b2a      	ldr	r3, [pc, #168]	; (8007f64 <__lshift+0xd8>)
 8007eba:	482b      	ldr	r0, [pc, #172]	; (8007f68 <__lshift+0xdc>)
 8007ebc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ec0:	f000 fcd8 	bl	8008874 <__assert_func>
 8007ec4:	3101      	adds	r1, #1
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	e7ee      	b.n	8007ea8 <__lshift+0x1c>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f100 0114 	add.w	r1, r0, #20
 8007ed0:	f100 0210 	add.w	r2, r0, #16
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	4553      	cmp	r3, sl
 8007ed8:	db37      	blt.n	8007f4a <__lshift+0xbe>
 8007eda:	6920      	ldr	r0, [r4, #16]
 8007edc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ee0:	f104 0314 	add.w	r3, r4, #20
 8007ee4:	f019 091f 	ands.w	r9, r9, #31
 8007ee8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007eec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007ef0:	d02f      	beq.n	8007f52 <__lshift+0xc6>
 8007ef2:	f1c9 0e20 	rsb	lr, r9, #32
 8007ef6:	468a      	mov	sl, r1
 8007ef8:	f04f 0c00 	mov.w	ip, #0
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	fa02 f209 	lsl.w	r2, r2, r9
 8007f02:	ea42 020c 	orr.w	r2, r2, ip
 8007f06:	f84a 2b04 	str.w	r2, [sl], #4
 8007f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f0e:	4298      	cmp	r0, r3
 8007f10:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007f14:	d8f2      	bhi.n	8007efc <__lshift+0x70>
 8007f16:	1b03      	subs	r3, r0, r4
 8007f18:	3b15      	subs	r3, #21
 8007f1a:	f023 0303 	bic.w	r3, r3, #3
 8007f1e:	3304      	adds	r3, #4
 8007f20:	f104 0215 	add.w	r2, r4, #21
 8007f24:	4290      	cmp	r0, r2
 8007f26:	bf38      	it	cc
 8007f28:	2304      	movcc	r3, #4
 8007f2a:	f841 c003 	str.w	ip, [r1, r3]
 8007f2e:	f1bc 0f00 	cmp.w	ip, #0
 8007f32:	d001      	beq.n	8007f38 <__lshift+0xac>
 8007f34:	f108 0602 	add.w	r6, r8, #2
 8007f38:	3e01      	subs	r6, #1
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	612e      	str	r6, [r5, #16]
 8007f3e:	4621      	mov	r1, r4
 8007f40:	f7ff fd88 	bl	8007a54 <_Bfree>
 8007f44:	4628      	mov	r0, r5
 8007f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f4e:	3301      	adds	r3, #1
 8007f50:	e7c1      	b.n	8007ed6 <__lshift+0x4a>
 8007f52:	3904      	subs	r1, #4
 8007f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f58:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f5c:	4298      	cmp	r0, r3
 8007f5e:	d8f9      	bhi.n	8007f54 <__lshift+0xc8>
 8007f60:	e7ea      	b.n	8007f38 <__lshift+0xac>
 8007f62:	bf00      	nop
 8007f64:	0800a4a8 	.word	0x0800a4a8
 8007f68:	0800a534 	.word	0x0800a534

08007f6c <__mcmp>:
 8007f6c:	b530      	push	{r4, r5, lr}
 8007f6e:	6902      	ldr	r2, [r0, #16]
 8007f70:	690c      	ldr	r4, [r1, #16]
 8007f72:	1b12      	subs	r2, r2, r4
 8007f74:	d10e      	bne.n	8007f94 <__mcmp+0x28>
 8007f76:	f100 0314 	add.w	r3, r0, #20
 8007f7a:	3114      	adds	r1, #20
 8007f7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f8c:	42a5      	cmp	r5, r4
 8007f8e:	d003      	beq.n	8007f98 <__mcmp+0x2c>
 8007f90:	d305      	bcc.n	8007f9e <__mcmp+0x32>
 8007f92:	2201      	movs	r2, #1
 8007f94:	4610      	mov	r0, r2
 8007f96:	bd30      	pop	{r4, r5, pc}
 8007f98:	4283      	cmp	r3, r0
 8007f9a:	d3f3      	bcc.n	8007f84 <__mcmp+0x18>
 8007f9c:	e7fa      	b.n	8007f94 <__mcmp+0x28>
 8007f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa2:	e7f7      	b.n	8007f94 <__mcmp+0x28>

08007fa4 <__mdiff>:
 8007fa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa8:	460c      	mov	r4, r1
 8007faa:	4606      	mov	r6, r0
 8007fac:	4611      	mov	r1, r2
 8007fae:	4620      	mov	r0, r4
 8007fb0:	4690      	mov	r8, r2
 8007fb2:	f7ff ffdb 	bl	8007f6c <__mcmp>
 8007fb6:	1e05      	subs	r5, r0, #0
 8007fb8:	d110      	bne.n	8007fdc <__mdiff+0x38>
 8007fba:	4629      	mov	r1, r5
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	f7ff fd09 	bl	80079d4 <_Balloc>
 8007fc2:	b930      	cbnz	r0, 8007fd2 <__mdiff+0x2e>
 8007fc4:	4b3a      	ldr	r3, [pc, #232]	; (80080b0 <__mdiff+0x10c>)
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	f240 2132 	movw	r1, #562	; 0x232
 8007fcc:	4839      	ldr	r0, [pc, #228]	; (80080b4 <__mdiff+0x110>)
 8007fce:	f000 fc51 	bl	8008874 <__assert_func>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fdc:	bfa4      	itt	ge
 8007fde:	4643      	movge	r3, r8
 8007fe0:	46a0      	movge	r8, r4
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007fe8:	bfa6      	itte	ge
 8007fea:	461c      	movge	r4, r3
 8007fec:	2500      	movge	r5, #0
 8007fee:	2501      	movlt	r5, #1
 8007ff0:	f7ff fcf0 	bl	80079d4 <_Balloc>
 8007ff4:	b920      	cbnz	r0, 8008000 <__mdiff+0x5c>
 8007ff6:	4b2e      	ldr	r3, [pc, #184]	; (80080b0 <__mdiff+0x10c>)
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ffe:	e7e5      	b.n	8007fcc <__mdiff+0x28>
 8008000:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008004:	6926      	ldr	r6, [r4, #16]
 8008006:	60c5      	str	r5, [r0, #12]
 8008008:	f104 0914 	add.w	r9, r4, #20
 800800c:	f108 0514 	add.w	r5, r8, #20
 8008010:	f100 0e14 	add.w	lr, r0, #20
 8008014:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008018:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800801c:	f108 0210 	add.w	r2, r8, #16
 8008020:	46f2      	mov	sl, lr
 8008022:	2100      	movs	r1, #0
 8008024:	f859 3b04 	ldr.w	r3, [r9], #4
 8008028:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800802c:	fa1f f883 	uxth.w	r8, r3
 8008030:	fa11 f18b 	uxtah	r1, r1, fp
 8008034:	0c1b      	lsrs	r3, r3, #16
 8008036:	eba1 0808 	sub.w	r8, r1, r8
 800803a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800803e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008042:	fa1f f888 	uxth.w	r8, r8
 8008046:	1419      	asrs	r1, r3, #16
 8008048:	454e      	cmp	r6, r9
 800804a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800804e:	f84a 3b04 	str.w	r3, [sl], #4
 8008052:	d8e7      	bhi.n	8008024 <__mdiff+0x80>
 8008054:	1b33      	subs	r3, r6, r4
 8008056:	3b15      	subs	r3, #21
 8008058:	f023 0303 	bic.w	r3, r3, #3
 800805c:	3304      	adds	r3, #4
 800805e:	3415      	adds	r4, #21
 8008060:	42a6      	cmp	r6, r4
 8008062:	bf38      	it	cc
 8008064:	2304      	movcc	r3, #4
 8008066:	441d      	add	r5, r3
 8008068:	4473      	add	r3, lr
 800806a:	469e      	mov	lr, r3
 800806c:	462e      	mov	r6, r5
 800806e:	4566      	cmp	r6, ip
 8008070:	d30e      	bcc.n	8008090 <__mdiff+0xec>
 8008072:	f10c 0203 	add.w	r2, ip, #3
 8008076:	1b52      	subs	r2, r2, r5
 8008078:	f022 0203 	bic.w	r2, r2, #3
 800807c:	3d03      	subs	r5, #3
 800807e:	45ac      	cmp	ip, r5
 8008080:	bf38      	it	cc
 8008082:	2200      	movcc	r2, #0
 8008084:	441a      	add	r2, r3
 8008086:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800808a:	b17b      	cbz	r3, 80080ac <__mdiff+0x108>
 800808c:	6107      	str	r7, [r0, #16]
 800808e:	e7a3      	b.n	8007fd8 <__mdiff+0x34>
 8008090:	f856 8b04 	ldr.w	r8, [r6], #4
 8008094:	fa11 f288 	uxtah	r2, r1, r8
 8008098:	1414      	asrs	r4, r2, #16
 800809a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800809e:	b292      	uxth	r2, r2
 80080a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80080a4:	f84e 2b04 	str.w	r2, [lr], #4
 80080a8:	1421      	asrs	r1, r4, #16
 80080aa:	e7e0      	b.n	800806e <__mdiff+0xca>
 80080ac:	3f01      	subs	r7, #1
 80080ae:	e7ea      	b.n	8008086 <__mdiff+0xe2>
 80080b0:	0800a4a8 	.word	0x0800a4a8
 80080b4:	0800a534 	.word	0x0800a534

080080b8 <__ulp>:
 80080b8:	b082      	sub	sp, #8
 80080ba:	ed8d 0b00 	vstr	d0, [sp]
 80080be:	9b01      	ldr	r3, [sp, #4]
 80080c0:	4912      	ldr	r1, [pc, #72]	; (800810c <__ulp+0x54>)
 80080c2:	4019      	ands	r1, r3
 80080c4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80080c8:	2900      	cmp	r1, #0
 80080ca:	dd05      	ble.n	80080d8 <__ulp+0x20>
 80080cc:	2200      	movs	r2, #0
 80080ce:	460b      	mov	r3, r1
 80080d0:	ec43 2b10 	vmov	d0, r2, r3
 80080d4:	b002      	add	sp, #8
 80080d6:	4770      	bx	lr
 80080d8:	4249      	negs	r1, r1
 80080da:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80080de:	ea4f 5021 	mov.w	r0, r1, asr #20
 80080e2:	f04f 0200 	mov.w	r2, #0
 80080e6:	f04f 0300 	mov.w	r3, #0
 80080ea:	da04      	bge.n	80080f6 <__ulp+0x3e>
 80080ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80080f0:	fa41 f300 	asr.w	r3, r1, r0
 80080f4:	e7ec      	b.n	80080d0 <__ulp+0x18>
 80080f6:	f1a0 0114 	sub.w	r1, r0, #20
 80080fa:	291e      	cmp	r1, #30
 80080fc:	bfda      	itte	le
 80080fe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008102:	fa20 f101 	lsrle.w	r1, r0, r1
 8008106:	2101      	movgt	r1, #1
 8008108:	460a      	mov	r2, r1
 800810a:	e7e1      	b.n	80080d0 <__ulp+0x18>
 800810c:	7ff00000 	.word	0x7ff00000

08008110 <__b2d>:
 8008110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008112:	6905      	ldr	r5, [r0, #16]
 8008114:	f100 0714 	add.w	r7, r0, #20
 8008118:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800811c:	1f2e      	subs	r6, r5, #4
 800811e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008122:	4620      	mov	r0, r4
 8008124:	f7ff fd48 	bl	8007bb8 <__hi0bits>
 8008128:	f1c0 0320 	rsb	r3, r0, #32
 800812c:	280a      	cmp	r0, #10
 800812e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80081ac <__b2d+0x9c>
 8008132:	600b      	str	r3, [r1, #0]
 8008134:	dc14      	bgt.n	8008160 <__b2d+0x50>
 8008136:	f1c0 0e0b 	rsb	lr, r0, #11
 800813a:	fa24 f10e 	lsr.w	r1, r4, lr
 800813e:	42b7      	cmp	r7, r6
 8008140:	ea41 030c 	orr.w	r3, r1, ip
 8008144:	bf34      	ite	cc
 8008146:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800814a:	2100      	movcs	r1, #0
 800814c:	3015      	adds	r0, #21
 800814e:	fa04 f000 	lsl.w	r0, r4, r0
 8008152:	fa21 f10e 	lsr.w	r1, r1, lr
 8008156:	ea40 0201 	orr.w	r2, r0, r1
 800815a:	ec43 2b10 	vmov	d0, r2, r3
 800815e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008160:	42b7      	cmp	r7, r6
 8008162:	bf3a      	itte	cc
 8008164:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008168:	f1a5 0608 	subcc.w	r6, r5, #8
 800816c:	2100      	movcs	r1, #0
 800816e:	380b      	subs	r0, #11
 8008170:	d017      	beq.n	80081a2 <__b2d+0x92>
 8008172:	f1c0 0c20 	rsb	ip, r0, #32
 8008176:	fa04 f500 	lsl.w	r5, r4, r0
 800817a:	42be      	cmp	r6, r7
 800817c:	fa21 f40c 	lsr.w	r4, r1, ip
 8008180:	ea45 0504 	orr.w	r5, r5, r4
 8008184:	bf8c      	ite	hi
 8008186:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800818a:	2400      	movls	r4, #0
 800818c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008190:	fa01 f000 	lsl.w	r0, r1, r0
 8008194:	fa24 f40c 	lsr.w	r4, r4, ip
 8008198:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800819c:	ea40 0204 	orr.w	r2, r0, r4
 80081a0:	e7db      	b.n	800815a <__b2d+0x4a>
 80081a2:	ea44 030c 	orr.w	r3, r4, ip
 80081a6:	460a      	mov	r2, r1
 80081a8:	e7d7      	b.n	800815a <__b2d+0x4a>
 80081aa:	bf00      	nop
 80081ac:	3ff00000 	.word	0x3ff00000

080081b0 <__d2b>:
 80081b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081b4:	4689      	mov	r9, r1
 80081b6:	2101      	movs	r1, #1
 80081b8:	ec57 6b10 	vmov	r6, r7, d0
 80081bc:	4690      	mov	r8, r2
 80081be:	f7ff fc09 	bl	80079d4 <_Balloc>
 80081c2:	4604      	mov	r4, r0
 80081c4:	b930      	cbnz	r0, 80081d4 <__d2b+0x24>
 80081c6:	4602      	mov	r2, r0
 80081c8:	4b25      	ldr	r3, [pc, #148]	; (8008260 <__d2b+0xb0>)
 80081ca:	4826      	ldr	r0, [pc, #152]	; (8008264 <__d2b+0xb4>)
 80081cc:	f240 310a 	movw	r1, #778	; 0x30a
 80081d0:	f000 fb50 	bl	8008874 <__assert_func>
 80081d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80081d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80081dc:	bb35      	cbnz	r5, 800822c <__d2b+0x7c>
 80081de:	2e00      	cmp	r6, #0
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	d028      	beq.n	8008236 <__d2b+0x86>
 80081e4:	4668      	mov	r0, sp
 80081e6:	9600      	str	r6, [sp, #0]
 80081e8:	f7ff fd06 	bl	8007bf8 <__lo0bits>
 80081ec:	9900      	ldr	r1, [sp, #0]
 80081ee:	b300      	cbz	r0, 8008232 <__d2b+0x82>
 80081f0:	9a01      	ldr	r2, [sp, #4]
 80081f2:	f1c0 0320 	rsb	r3, r0, #32
 80081f6:	fa02 f303 	lsl.w	r3, r2, r3
 80081fa:	430b      	orrs	r3, r1
 80081fc:	40c2      	lsrs	r2, r0
 80081fe:	6163      	str	r3, [r4, #20]
 8008200:	9201      	str	r2, [sp, #4]
 8008202:	9b01      	ldr	r3, [sp, #4]
 8008204:	61a3      	str	r3, [r4, #24]
 8008206:	2b00      	cmp	r3, #0
 8008208:	bf14      	ite	ne
 800820a:	2202      	movne	r2, #2
 800820c:	2201      	moveq	r2, #1
 800820e:	6122      	str	r2, [r4, #16]
 8008210:	b1d5      	cbz	r5, 8008248 <__d2b+0x98>
 8008212:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008216:	4405      	add	r5, r0
 8008218:	f8c9 5000 	str.w	r5, [r9]
 800821c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008220:	f8c8 0000 	str.w	r0, [r8]
 8008224:	4620      	mov	r0, r4
 8008226:	b003      	add	sp, #12
 8008228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800822c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008230:	e7d5      	b.n	80081de <__d2b+0x2e>
 8008232:	6161      	str	r1, [r4, #20]
 8008234:	e7e5      	b.n	8008202 <__d2b+0x52>
 8008236:	a801      	add	r0, sp, #4
 8008238:	f7ff fcde 	bl	8007bf8 <__lo0bits>
 800823c:	9b01      	ldr	r3, [sp, #4]
 800823e:	6163      	str	r3, [r4, #20]
 8008240:	2201      	movs	r2, #1
 8008242:	6122      	str	r2, [r4, #16]
 8008244:	3020      	adds	r0, #32
 8008246:	e7e3      	b.n	8008210 <__d2b+0x60>
 8008248:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800824c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008250:	f8c9 0000 	str.w	r0, [r9]
 8008254:	6918      	ldr	r0, [r3, #16]
 8008256:	f7ff fcaf 	bl	8007bb8 <__hi0bits>
 800825a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800825e:	e7df      	b.n	8008220 <__d2b+0x70>
 8008260:	0800a4a8 	.word	0x0800a4a8
 8008264:	0800a534 	.word	0x0800a534

08008268 <__ratio>:
 8008268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826c:	4688      	mov	r8, r1
 800826e:	4669      	mov	r1, sp
 8008270:	4681      	mov	r9, r0
 8008272:	f7ff ff4d 	bl	8008110 <__b2d>
 8008276:	a901      	add	r1, sp, #4
 8008278:	4640      	mov	r0, r8
 800827a:	ec55 4b10 	vmov	r4, r5, d0
 800827e:	f7ff ff47 	bl	8008110 <__b2d>
 8008282:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008286:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800828a:	eba3 0c02 	sub.w	ip, r3, r2
 800828e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008292:	1a9b      	subs	r3, r3, r2
 8008294:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008298:	ec51 0b10 	vmov	r0, r1, d0
 800829c:	2b00      	cmp	r3, #0
 800829e:	bfd6      	itet	le
 80082a0:	460a      	movle	r2, r1
 80082a2:	462a      	movgt	r2, r5
 80082a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80082a8:	468b      	mov	fp, r1
 80082aa:	462f      	mov	r7, r5
 80082ac:	bfd4      	ite	le
 80082ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80082b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80082b6:	4620      	mov	r0, r4
 80082b8:	ee10 2a10 	vmov	r2, s0
 80082bc:	465b      	mov	r3, fp
 80082be:	4639      	mov	r1, r7
 80082c0:	f7f8 fac4 	bl	800084c <__aeabi_ddiv>
 80082c4:	ec41 0b10 	vmov	d0, r0, r1
 80082c8:	b003      	add	sp, #12
 80082ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080082ce <__copybits>:
 80082ce:	3901      	subs	r1, #1
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	1149      	asrs	r1, r1, #5
 80082d4:	6914      	ldr	r4, [r2, #16]
 80082d6:	3101      	adds	r1, #1
 80082d8:	f102 0314 	add.w	r3, r2, #20
 80082dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80082e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80082e4:	1f05      	subs	r5, r0, #4
 80082e6:	42a3      	cmp	r3, r4
 80082e8:	d30c      	bcc.n	8008304 <__copybits+0x36>
 80082ea:	1aa3      	subs	r3, r4, r2
 80082ec:	3b11      	subs	r3, #17
 80082ee:	f023 0303 	bic.w	r3, r3, #3
 80082f2:	3211      	adds	r2, #17
 80082f4:	42a2      	cmp	r2, r4
 80082f6:	bf88      	it	hi
 80082f8:	2300      	movhi	r3, #0
 80082fa:	4418      	add	r0, r3
 80082fc:	2300      	movs	r3, #0
 80082fe:	4288      	cmp	r0, r1
 8008300:	d305      	bcc.n	800830e <__copybits+0x40>
 8008302:	bd70      	pop	{r4, r5, r6, pc}
 8008304:	f853 6b04 	ldr.w	r6, [r3], #4
 8008308:	f845 6f04 	str.w	r6, [r5, #4]!
 800830c:	e7eb      	b.n	80082e6 <__copybits+0x18>
 800830e:	f840 3b04 	str.w	r3, [r0], #4
 8008312:	e7f4      	b.n	80082fe <__copybits+0x30>

08008314 <__any_on>:
 8008314:	f100 0214 	add.w	r2, r0, #20
 8008318:	6900      	ldr	r0, [r0, #16]
 800831a:	114b      	asrs	r3, r1, #5
 800831c:	4298      	cmp	r0, r3
 800831e:	b510      	push	{r4, lr}
 8008320:	db11      	blt.n	8008346 <__any_on+0x32>
 8008322:	dd0a      	ble.n	800833a <__any_on+0x26>
 8008324:	f011 011f 	ands.w	r1, r1, #31
 8008328:	d007      	beq.n	800833a <__any_on+0x26>
 800832a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800832e:	fa24 f001 	lsr.w	r0, r4, r1
 8008332:	fa00 f101 	lsl.w	r1, r0, r1
 8008336:	428c      	cmp	r4, r1
 8008338:	d10b      	bne.n	8008352 <__any_on+0x3e>
 800833a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800833e:	4293      	cmp	r3, r2
 8008340:	d803      	bhi.n	800834a <__any_on+0x36>
 8008342:	2000      	movs	r0, #0
 8008344:	bd10      	pop	{r4, pc}
 8008346:	4603      	mov	r3, r0
 8008348:	e7f7      	b.n	800833a <__any_on+0x26>
 800834a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800834e:	2900      	cmp	r1, #0
 8008350:	d0f5      	beq.n	800833e <__any_on+0x2a>
 8008352:	2001      	movs	r0, #1
 8008354:	e7f6      	b.n	8008344 <__any_on+0x30>

08008356 <_calloc_r>:
 8008356:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008358:	fba1 2402 	umull	r2, r4, r1, r2
 800835c:	b94c      	cbnz	r4, 8008372 <_calloc_r+0x1c>
 800835e:	4611      	mov	r1, r2
 8008360:	9201      	str	r2, [sp, #4]
 8008362:	f000 f87b 	bl	800845c <_malloc_r>
 8008366:	9a01      	ldr	r2, [sp, #4]
 8008368:	4605      	mov	r5, r0
 800836a:	b930      	cbnz	r0, 800837a <_calloc_r+0x24>
 800836c:	4628      	mov	r0, r5
 800836e:	b003      	add	sp, #12
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	220c      	movs	r2, #12
 8008374:	6002      	str	r2, [r0, #0]
 8008376:	2500      	movs	r5, #0
 8008378:	e7f8      	b.n	800836c <_calloc_r+0x16>
 800837a:	4621      	mov	r1, r4
 800837c:	f7fc fbc0 	bl	8004b00 <memset>
 8008380:	e7f4      	b.n	800836c <_calloc_r+0x16>
	...

08008384 <_free_r>:
 8008384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008386:	2900      	cmp	r1, #0
 8008388:	d044      	beq.n	8008414 <_free_r+0x90>
 800838a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800838e:	9001      	str	r0, [sp, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	f1a1 0404 	sub.w	r4, r1, #4
 8008396:	bfb8      	it	lt
 8008398:	18e4      	addlt	r4, r4, r3
 800839a:	f000 fab5 	bl	8008908 <__malloc_lock>
 800839e:	4a1e      	ldr	r2, [pc, #120]	; (8008418 <_free_r+0x94>)
 80083a0:	9801      	ldr	r0, [sp, #4]
 80083a2:	6813      	ldr	r3, [r2, #0]
 80083a4:	b933      	cbnz	r3, 80083b4 <_free_r+0x30>
 80083a6:	6063      	str	r3, [r4, #4]
 80083a8:	6014      	str	r4, [r2, #0]
 80083aa:	b003      	add	sp, #12
 80083ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083b0:	f000 bab0 	b.w	8008914 <__malloc_unlock>
 80083b4:	42a3      	cmp	r3, r4
 80083b6:	d908      	bls.n	80083ca <_free_r+0x46>
 80083b8:	6825      	ldr	r5, [r4, #0]
 80083ba:	1961      	adds	r1, r4, r5
 80083bc:	428b      	cmp	r3, r1
 80083be:	bf01      	itttt	eq
 80083c0:	6819      	ldreq	r1, [r3, #0]
 80083c2:	685b      	ldreq	r3, [r3, #4]
 80083c4:	1949      	addeq	r1, r1, r5
 80083c6:	6021      	streq	r1, [r4, #0]
 80083c8:	e7ed      	b.n	80083a6 <_free_r+0x22>
 80083ca:	461a      	mov	r2, r3
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	b10b      	cbz	r3, 80083d4 <_free_r+0x50>
 80083d0:	42a3      	cmp	r3, r4
 80083d2:	d9fa      	bls.n	80083ca <_free_r+0x46>
 80083d4:	6811      	ldr	r1, [r2, #0]
 80083d6:	1855      	adds	r5, r2, r1
 80083d8:	42a5      	cmp	r5, r4
 80083da:	d10b      	bne.n	80083f4 <_free_r+0x70>
 80083dc:	6824      	ldr	r4, [r4, #0]
 80083de:	4421      	add	r1, r4
 80083e0:	1854      	adds	r4, r2, r1
 80083e2:	42a3      	cmp	r3, r4
 80083e4:	6011      	str	r1, [r2, #0]
 80083e6:	d1e0      	bne.n	80083aa <_free_r+0x26>
 80083e8:	681c      	ldr	r4, [r3, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	6053      	str	r3, [r2, #4]
 80083ee:	4421      	add	r1, r4
 80083f0:	6011      	str	r1, [r2, #0]
 80083f2:	e7da      	b.n	80083aa <_free_r+0x26>
 80083f4:	d902      	bls.n	80083fc <_free_r+0x78>
 80083f6:	230c      	movs	r3, #12
 80083f8:	6003      	str	r3, [r0, #0]
 80083fa:	e7d6      	b.n	80083aa <_free_r+0x26>
 80083fc:	6825      	ldr	r5, [r4, #0]
 80083fe:	1961      	adds	r1, r4, r5
 8008400:	428b      	cmp	r3, r1
 8008402:	bf04      	itt	eq
 8008404:	6819      	ldreq	r1, [r3, #0]
 8008406:	685b      	ldreq	r3, [r3, #4]
 8008408:	6063      	str	r3, [r4, #4]
 800840a:	bf04      	itt	eq
 800840c:	1949      	addeq	r1, r1, r5
 800840e:	6021      	streq	r1, [r4, #0]
 8008410:	6054      	str	r4, [r2, #4]
 8008412:	e7ca      	b.n	80083aa <_free_r+0x26>
 8008414:	b003      	add	sp, #12
 8008416:	bd30      	pop	{r4, r5, pc}
 8008418:	2000037c 	.word	0x2000037c

0800841c <sbrk_aligned>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	4e0e      	ldr	r6, [pc, #56]	; (8008458 <sbrk_aligned+0x3c>)
 8008420:	460c      	mov	r4, r1
 8008422:	6831      	ldr	r1, [r6, #0]
 8008424:	4605      	mov	r5, r0
 8008426:	b911      	cbnz	r1, 800842e <sbrk_aligned+0x12>
 8008428:	f000 f9f2 	bl	8008810 <_sbrk_r>
 800842c:	6030      	str	r0, [r6, #0]
 800842e:	4621      	mov	r1, r4
 8008430:	4628      	mov	r0, r5
 8008432:	f000 f9ed 	bl	8008810 <_sbrk_r>
 8008436:	1c43      	adds	r3, r0, #1
 8008438:	d00a      	beq.n	8008450 <sbrk_aligned+0x34>
 800843a:	1cc4      	adds	r4, r0, #3
 800843c:	f024 0403 	bic.w	r4, r4, #3
 8008440:	42a0      	cmp	r0, r4
 8008442:	d007      	beq.n	8008454 <sbrk_aligned+0x38>
 8008444:	1a21      	subs	r1, r4, r0
 8008446:	4628      	mov	r0, r5
 8008448:	f000 f9e2 	bl	8008810 <_sbrk_r>
 800844c:	3001      	adds	r0, #1
 800844e:	d101      	bne.n	8008454 <sbrk_aligned+0x38>
 8008450:	f04f 34ff 	mov.w	r4, #4294967295
 8008454:	4620      	mov	r0, r4
 8008456:	bd70      	pop	{r4, r5, r6, pc}
 8008458:	20000380 	.word	0x20000380

0800845c <_malloc_r>:
 800845c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008460:	1ccd      	adds	r5, r1, #3
 8008462:	f025 0503 	bic.w	r5, r5, #3
 8008466:	3508      	adds	r5, #8
 8008468:	2d0c      	cmp	r5, #12
 800846a:	bf38      	it	cc
 800846c:	250c      	movcc	r5, #12
 800846e:	2d00      	cmp	r5, #0
 8008470:	4607      	mov	r7, r0
 8008472:	db01      	blt.n	8008478 <_malloc_r+0x1c>
 8008474:	42a9      	cmp	r1, r5
 8008476:	d905      	bls.n	8008484 <_malloc_r+0x28>
 8008478:	230c      	movs	r3, #12
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	2600      	movs	r6, #0
 800847e:	4630      	mov	r0, r6
 8008480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008484:	4e2e      	ldr	r6, [pc, #184]	; (8008540 <_malloc_r+0xe4>)
 8008486:	f000 fa3f 	bl	8008908 <__malloc_lock>
 800848a:	6833      	ldr	r3, [r6, #0]
 800848c:	461c      	mov	r4, r3
 800848e:	bb34      	cbnz	r4, 80084de <_malloc_r+0x82>
 8008490:	4629      	mov	r1, r5
 8008492:	4638      	mov	r0, r7
 8008494:	f7ff ffc2 	bl	800841c <sbrk_aligned>
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	4604      	mov	r4, r0
 800849c:	d14d      	bne.n	800853a <_malloc_r+0xde>
 800849e:	6834      	ldr	r4, [r6, #0]
 80084a0:	4626      	mov	r6, r4
 80084a2:	2e00      	cmp	r6, #0
 80084a4:	d140      	bne.n	8008528 <_malloc_r+0xcc>
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	4631      	mov	r1, r6
 80084aa:	4638      	mov	r0, r7
 80084ac:	eb04 0803 	add.w	r8, r4, r3
 80084b0:	f000 f9ae 	bl	8008810 <_sbrk_r>
 80084b4:	4580      	cmp	r8, r0
 80084b6:	d13a      	bne.n	800852e <_malloc_r+0xd2>
 80084b8:	6821      	ldr	r1, [r4, #0]
 80084ba:	3503      	adds	r5, #3
 80084bc:	1a6d      	subs	r5, r5, r1
 80084be:	f025 0503 	bic.w	r5, r5, #3
 80084c2:	3508      	adds	r5, #8
 80084c4:	2d0c      	cmp	r5, #12
 80084c6:	bf38      	it	cc
 80084c8:	250c      	movcc	r5, #12
 80084ca:	4629      	mov	r1, r5
 80084cc:	4638      	mov	r0, r7
 80084ce:	f7ff ffa5 	bl	800841c <sbrk_aligned>
 80084d2:	3001      	adds	r0, #1
 80084d4:	d02b      	beq.n	800852e <_malloc_r+0xd2>
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	442b      	add	r3, r5
 80084da:	6023      	str	r3, [r4, #0]
 80084dc:	e00e      	b.n	80084fc <_malloc_r+0xa0>
 80084de:	6822      	ldr	r2, [r4, #0]
 80084e0:	1b52      	subs	r2, r2, r5
 80084e2:	d41e      	bmi.n	8008522 <_malloc_r+0xc6>
 80084e4:	2a0b      	cmp	r2, #11
 80084e6:	d916      	bls.n	8008516 <_malloc_r+0xba>
 80084e8:	1961      	adds	r1, r4, r5
 80084ea:	42a3      	cmp	r3, r4
 80084ec:	6025      	str	r5, [r4, #0]
 80084ee:	bf18      	it	ne
 80084f0:	6059      	strne	r1, [r3, #4]
 80084f2:	6863      	ldr	r3, [r4, #4]
 80084f4:	bf08      	it	eq
 80084f6:	6031      	streq	r1, [r6, #0]
 80084f8:	5162      	str	r2, [r4, r5]
 80084fa:	604b      	str	r3, [r1, #4]
 80084fc:	4638      	mov	r0, r7
 80084fe:	f104 060b 	add.w	r6, r4, #11
 8008502:	f000 fa07 	bl	8008914 <__malloc_unlock>
 8008506:	f026 0607 	bic.w	r6, r6, #7
 800850a:	1d23      	adds	r3, r4, #4
 800850c:	1af2      	subs	r2, r6, r3
 800850e:	d0b6      	beq.n	800847e <_malloc_r+0x22>
 8008510:	1b9b      	subs	r3, r3, r6
 8008512:	50a3      	str	r3, [r4, r2]
 8008514:	e7b3      	b.n	800847e <_malloc_r+0x22>
 8008516:	6862      	ldr	r2, [r4, #4]
 8008518:	42a3      	cmp	r3, r4
 800851a:	bf0c      	ite	eq
 800851c:	6032      	streq	r2, [r6, #0]
 800851e:	605a      	strne	r2, [r3, #4]
 8008520:	e7ec      	b.n	80084fc <_malloc_r+0xa0>
 8008522:	4623      	mov	r3, r4
 8008524:	6864      	ldr	r4, [r4, #4]
 8008526:	e7b2      	b.n	800848e <_malloc_r+0x32>
 8008528:	4634      	mov	r4, r6
 800852a:	6876      	ldr	r6, [r6, #4]
 800852c:	e7b9      	b.n	80084a2 <_malloc_r+0x46>
 800852e:	230c      	movs	r3, #12
 8008530:	603b      	str	r3, [r7, #0]
 8008532:	4638      	mov	r0, r7
 8008534:	f000 f9ee 	bl	8008914 <__malloc_unlock>
 8008538:	e7a1      	b.n	800847e <_malloc_r+0x22>
 800853a:	6025      	str	r5, [r4, #0]
 800853c:	e7de      	b.n	80084fc <_malloc_r+0xa0>
 800853e:	bf00      	nop
 8008540:	2000037c 	.word	0x2000037c

08008544 <__ssputs_r>:
 8008544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008548:	688e      	ldr	r6, [r1, #8]
 800854a:	429e      	cmp	r6, r3
 800854c:	4682      	mov	sl, r0
 800854e:	460c      	mov	r4, r1
 8008550:	4690      	mov	r8, r2
 8008552:	461f      	mov	r7, r3
 8008554:	d838      	bhi.n	80085c8 <__ssputs_r+0x84>
 8008556:	898a      	ldrh	r2, [r1, #12]
 8008558:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800855c:	d032      	beq.n	80085c4 <__ssputs_r+0x80>
 800855e:	6825      	ldr	r5, [r4, #0]
 8008560:	6909      	ldr	r1, [r1, #16]
 8008562:	eba5 0901 	sub.w	r9, r5, r1
 8008566:	6965      	ldr	r5, [r4, #20]
 8008568:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800856c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008570:	3301      	adds	r3, #1
 8008572:	444b      	add	r3, r9
 8008574:	106d      	asrs	r5, r5, #1
 8008576:	429d      	cmp	r5, r3
 8008578:	bf38      	it	cc
 800857a:	461d      	movcc	r5, r3
 800857c:	0553      	lsls	r3, r2, #21
 800857e:	d531      	bpl.n	80085e4 <__ssputs_r+0xa0>
 8008580:	4629      	mov	r1, r5
 8008582:	f7ff ff6b 	bl	800845c <_malloc_r>
 8008586:	4606      	mov	r6, r0
 8008588:	b950      	cbnz	r0, 80085a0 <__ssputs_r+0x5c>
 800858a:	230c      	movs	r3, #12
 800858c:	f8ca 3000 	str.w	r3, [sl]
 8008590:	89a3      	ldrh	r3, [r4, #12]
 8008592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008596:	81a3      	strh	r3, [r4, #12]
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
 800859c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a0:	6921      	ldr	r1, [r4, #16]
 80085a2:	464a      	mov	r2, r9
 80085a4:	f7ff fa08 	bl	80079b8 <memcpy>
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b2:	81a3      	strh	r3, [r4, #12]
 80085b4:	6126      	str	r6, [r4, #16]
 80085b6:	6165      	str	r5, [r4, #20]
 80085b8:	444e      	add	r6, r9
 80085ba:	eba5 0509 	sub.w	r5, r5, r9
 80085be:	6026      	str	r6, [r4, #0]
 80085c0:	60a5      	str	r5, [r4, #8]
 80085c2:	463e      	mov	r6, r7
 80085c4:	42be      	cmp	r6, r7
 80085c6:	d900      	bls.n	80085ca <__ssputs_r+0x86>
 80085c8:	463e      	mov	r6, r7
 80085ca:	6820      	ldr	r0, [r4, #0]
 80085cc:	4632      	mov	r2, r6
 80085ce:	4641      	mov	r1, r8
 80085d0:	f000 f980 	bl	80088d4 <memmove>
 80085d4:	68a3      	ldr	r3, [r4, #8]
 80085d6:	1b9b      	subs	r3, r3, r6
 80085d8:	60a3      	str	r3, [r4, #8]
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	4433      	add	r3, r6
 80085de:	6023      	str	r3, [r4, #0]
 80085e0:	2000      	movs	r0, #0
 80085e2:	e7db      	b.n	800859c <__ssputs_r+0x58>
 80085e4:	462a      	mov	r2, r5
 80085e6:	f000 f99b 	bl	8008920 <_realloc_r>
 80085ea:	4606      	mov	r6, r0
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d1e1      	bne.n	80085b4 <__ssputs_r+0x70>
 80085f0:	6921      	ldr	r1, [r4, #16]
 80085f2:	4650      	mov	r0, sl
 80085f4:	f7ff fec6 	bl	8008384 <_free_r>
 80085f8:	e7c7      	b.n	800858a <__ssputs_r+0x46>
	...

080085fc <_svfiprintf_r>:
 80085fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008600:	4698      	mov	r8, r3
 8008602:	898b      	ldrh	r3, [r1, #12]
 8008604:	061b      	lsls	r3, r3, #24
 8008606:	b09d      	sub	sp, #116	; 0x74
 8008608:	4607      	mov	r7, r0
 800860a:	460d      	mov	r5, r1
 800860c:	4614      	mov	r4, r2
 800860e:	d50e      	bpl.n	800862e <_svfiprintf_r+0x32>
 8008610:	690b      	ldr	r3, [r1, #16]
 8008612:	b963      	cbnz	r3, 800862e <_svfiprintf_r+0x32>
 8008614:	2140      	movs	r1, #64	; 0x40
 8008616:	f7ff ff21 	bl	800845c <_malloc_r>
 800861a:	6028      	str	r0, [r5, #0]
 800861c:	6128      	str	r0, [r5, #16]
 800861e:	b920      	cbnz	r0, 800862a <_svfiprintf_r+0x2e>
 8008620:	230c      	movs	r3, #12
 8008622:	603b      	str	r3, [r7, #0]
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	e0d1      	b.n	80087ce <_svfiprintf_r+0x1d2>
 800862a:	2340      	movs	r3, #64	; 0x40
 800862c:	616b      	str	r3, [r5, #20]
 800862e:	2300      	movs	r3, #0
 8008630:	9309      	str	r3, [sp, #36]	; 0x24
 8008632:	2320      	movs	r3, #32
 8008634:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008638:	f8cd 800c 	str.w	r8, [sp, #12]
 800863c:	2330      	movs	r3, #48	; 0x30
 800863e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80087e8 <_svfiprintf_r+0x1ec>
 8008642:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008646:	f04f 0901 	mov.w	r9, #1
 800864a:	4623      	mov	r3, r4
 800864c:	469a      	mov	sl, r3
 800864e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008652:	b10a      	cbz	r2, 8008658 <_svfiprintf_r+0x5c>
 8008654:	2a25      	cmp	r2, #37	; 0x25
 8008656:	d1f9      	bne.n	800864c <_svfiprintf_r+0x50>
 8008658:	ebba 0b04 	subs.w	fp, sl, r4
 800865c:	d00b      	beq.n	8008676 <_svfiprintf_r+0x7a>
 800865e:	465b      	mov	r3, fp
 8008660:	4622      	mov	r2, r4
 8008662:	4629      	mov	r1, r5
 8008664:	4638      	mov	r0, r7
 8008666:	f7ff ff6d 	bl	8008544 <__ssputs_r>
 800866a:	3001      	adds	r0, #1
 800866c:	f000 80aa 	beq.w	80087c4 <_svfiprintf_r+0x1c8>
 8008670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008672:	445a      	add	r2, fp
 8008674:	9209      	str	r2, [sp, #36]	; 0x24
 8008676:	f89a 3000 	ldrb.w	r3, [sl]
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 80a2 	beq.w	80087c4 <_svfiprintf_r+0x1c8>
 8008680:	2300      	movs	r3, #0
 8008682:	f04f 32ff 	mov.w	r2, #4294967295
 8008686:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800868a:	f10a 0a01 	add.w	sl, sl, #1
 800868e:	9304      	str	r3, [sp, #16]
 8008690:	9307      	str	r3, [sp, #28]
 8008692:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008696:	931a      	str	r3, [sp, #104]	; 0x68
 8008698:	4654      	mov	r4, sl
 800869a:	2205      	movs	r2, #5
 800869c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a0:	4851      	ldr	r0, [pc, #324]	; (80087e8 <_svfiprintf_r+0x1ec>)
 80086a2:	f7f7 fd9d 	bl	80001e0 <memchr>
 80086a6:	9a04      	ldr	r2, [sp, #16]
 80086a8:	b9d8      	cbnz	r0, 80086e2 <_svfiprintf_r+0xe6>
 80086aa:	06d0      	lsls	r0, r2, #27
 80086ac:	bf44      	itt	mi
 80086ae:	2320      	movmi	r3, #32
 80086b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086b4:	0711      	lsls	r1, r2, #28
 80086b6:	bf44      	itt	mi
 80086b8:	232b      	movmi	r3, #43	; 0x2b
 80086ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086be:	f89a 3000 	ldrb.w	r3, [sl]
 80086c2:	2b2a      	cmp	r3, #42	; 0x2a
 80086c4:	d015      	beq.n	80086f2 <_svfiprintf_r+0xf6>
 80086c6:	9a07      	ldr	r2, [sp, #28]
 80086c8:	4654      	mov	r4, sl
 80086ca:	2000      	movs	r0, #0
 80086cc:	f04f 0c0a 	mov.w	ip, #10
 80086d0:	4621      	mov	r1, r4
 80086d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086d6:	3b30      	subs	r3, #48	; 0x30
 80086d8:	2b09      	cmp	r3, #9
 80086da:	d94e      	bls.n	800877a <_svfiprintf_r+0x17e>
 80086dc:	b1b0      	cbz	r0, 800870c <_svfiprintf_r+0x110>
 80086de:	9207      	str	r2, [sp, #28]
 80086e0:	e014      	b.n	800870c <_svfiprintf_r+0x110>
 80086e2:	eba0 0308 	sub.w	r3, r0, r8
 80086e6:	fa09 f303 	lsl.w	r3, r9, r3
 80086ea:	4313      	orrs	r3, r2
 80086ec:	9304      	str	r3, [sp, #16]
 80086ee:	46a2      	mov	sl, r4
 80086f0:	e7d2      	b.n	8008698 <_svfiprintf_r+0x9c>
 80086f2:	9b03      	ldr	r3, [sp, #12]
 80086f4:	1d19      	adds	r1, r3, #4
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	9103      	str	r1, [sp, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	bfbb      	ittet	lt
 80086fe:	425b      	neglt	r3, r3
 8008700:	f042 0202 	orrlt.w	r2, r2, #2
 8008704:	9307      	strge	r3, [sp, #28]
 8008706:	9307      	strlt	r3, [sp, #28]
 8008708:	bfb8      	it	lt
 800870a:	9204      	strlt	r2, [sp, #16]
 800870c:	7823      	ldrb	r3, [r4, #0]
 800870e:	2b2e      	cmp	r3, #46	; 0x2e
 8008710:	d10c      	bne.n	800872c <_svfiprintf_r+0x130>
 8008712:	7863      	ldrb	r3, [r4, #1]
 8008714:	2b2a      	cmp	r3, #42	; 0x2a
 8008716:	d135      	bne.n	8008784 <_svfiprintf_r+0x188>
 8008718:	9b03      	ldr	r3, [sp, #12]
 800871a:	1d1a      	adds	r2, r3, #4
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	9203      	str	r2, [sp, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	bfb8      	it	lt
 8008724:	f04f 33ff 	movlt.w	r3, #4294967295
 8008728:	3402      	adds	r4, #2
 800872a:	9305      	str	r3, [sp, #20]
 800872c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80087f8 <_svfiprintf_r+0x1fc>
 8008730:	7821      	ldrb	r1, [r4, #0]
 8008732:	2203      	movs	r2, #3
 8008734:	4650      	mov	r0, sl
 8008736:	f7f7 fd53 	bl	80001e0 <memchr>
 800873a:	b140      	cbz	r0, 800874e <_svfiprintf_r+0x152>
 800873c:	2340      	movs	r3, #64	; 0x40
 800873e:	eba0 000a 	sub.w	r0, r0, sl
 8008742:	fa03 f000 	lsl.w	r0, r3, r0
 8008746:	9b04      	ldr	r3, [sp, #16]
 8008748:	4303      	orrs	r3, r0
 800874a:	3401      	adds	r4, #1
 800874c:	9304      	str	r3, [sp, #16]
 800874e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008752:	4826      	ldr	r0, [pc, #152]	; (80087ec <_svfiprintf_r+0x1f0>)
 8008754:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008758:	2206      	movs	r2, #6
 800875a:	f7f7 fd41 	bl	80001e0 <memchr>
 800875e:	2800      	cmp	r0, #0
 8008760:	d038      	beq.n	80087d4 <_svfiprintf_r+0x1d8>
 8008762:	4b23      	ldr	r3, [pc, #140]	; (80087f0 <_svfiprintf_r+0x1f4>)
 8008764:	bb1b      	cbnz	r3, 80087ae <_svfiprintf_r+0x1b2>
 8008766:	9b03      	ldr	r3, [sp, #12]
 8008768:	3307      	adds	r3, #7
 800876a:	f023 0307 	bic.w	r3, r3, #7
 800876e:	3308      	adds	r3, #8
 8008770:	9303      	str	r3, [sp, #12]
 8008772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008774:	4433      	add	r3, r6
 8008776:	9309      	str	r3, [sp, #36]	; 0x24
 8008778:	e767      	b.n	800864a <_svfiprintf_r+0x4e>
 800877a:	fb0c 3202 	mla	r2, ip, r2, r3
 800877e:	460c      	mov	r4, r1
 8008780:	2001      	movs	r0, #1
 8008782:	e7a5      	b.n	80086d0 <_svfiprintf_r+0xd4>
 8008784:	2300      	movs	r3, #0
 8008786:	3401      	adds	r4, #1
 8008788:	9305      	str	r3, [sp, #20]
 800878a:	4619      	mov	r1, r3
 800878c:	f04f 0c0a 	mov.w	ip, #10
 8008790:	4620      	mov	r0, r4
 8008792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008796:	3a30      	subs	r2, #48	; 0x30
 8008798:	2a09      	cmp	r2, #9
 800879a:	d903      	bls.n	80087a4 <_svfiprintf_r+0x1a8>
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0c5      	beq.n	800872c <_svfiprintf_r+0x130>
 80087a0:	9105      	str	r1, [sp, #20]
 80087a2:	e7c3      	b.n	800872c <_svfiprintf_r+0x130>
 80087a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80087a8:	4604      	mov	r4, r0
 80087aa:	2301      	movs	r3, #1
 80087ac:	e7f0      	b.n	8008790 <_svfiprintf_r+0x194>
 80087ae:	ab03      	add	r3, sp, #12
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	462a      	mov	r2, r5
 80087b4:	4b0f      	ldr	r3, [pc, #60]	; (80087f4 <_svfiprintf_r+0x1f8>)
 80087b6:	a904      	add	r1, sp, #16
 80087b8:	4638      	mov	r0, r7
 80087ba:	f7fc fa49 	bl	8004c50 <_printf_float>
 80087be:	1c42      	adds	r2, r0, #1
 80087c0:	4606      	mov	r6, r0
 80087c2:	d1d6      	bne.n	8008772 <_svfiprintf_r+0x176>
 80087c4:	89ab      	ldrh	r3, [r5, #12]
 80087c6:	065b      	lsls	r3, r3, #25
 80087c8:	f53f af2c 	bmi.w	8008624 <_svfiprintf_r+0x28>
 80087cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087ce:	b01d      	add	sp, #116	; 0x74
 80087d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d4:	ab03      	add	r3, sp, #12
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	462a      	mov	r2, r5
 80087da:	4b06      	ldr	r3, [pc, #24]	; (80087f4 <_svfiprintf_r+0x1f8>)
 80087dc:	a904      	add	r1, sp, #16
 80087de:	4638      	mov	r0, r7
 80087e0:	f7fc fcda 	bl	8005198 <_printf_i>
 80087e4:	e7eb      	b.n	80087be <_svfiprintf_r+0x1c2>
 80087e6:	bf00      	nop
 80087e8:	0800a68c 	.word	0x0800a68c
 80087ec:	0800a696 	.word	0x0800a696
 80087f0:	08004c51 	.word	0x08004c51
 80087f4:	08008545 	.word	0x08008545
 80087f8:	0800a692 	.word	0x0800a692
 80087fc:	00000000 	.word	0x00000000

08008800 <nan>:
 8008800:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008808 <nan+0x8>
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	00000000 	.word	0x00000000
 800880c:	7ff80000 	.word	0x7ff80000

08008810 <_sbrk_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4d06      	ldr	r5, [pc, #24]	; (800882c <_sbrk_r+0x1c>)
 8008814:	2300      	movs	r3, #0
 8008816:	4604      	mov	r4, r0
 8008818:	4608      	mov	r0, r1
 800881a:	602b      	str	r3, [r5, #0]
 800881c:	f7f9 fc1c 	bl	8002058 <_sbrk>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_sbrk_r+0x1a>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b103      	cbz	r3, 800882a <_sbrk_r+0x1a>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	20000384 	.word	0x20000384

08008830 <strncmp>:
 8008830:	b510      	push	{r4, lr}
 8008832:	b17a      	cbz	r2, 8008854 <strncmp+0x24>
 8008834:	4603      	mov	r3, r0
 8008836:	3901      	subs	r1, #1
 8008838:	1884      	adds	r4, r0, r2
 800883a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800883e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008842:	4290      	cmp	r0, r2
 8008844:	d101      	bne.n	800884a <strncmp+0x1a>
 8008846:	42a3      	cmp	r3, r4
 8008848:	d101      	bne.n	800884e <strncmp+0x1e>
 800884a:	1a80      	subs	r0, r0, r2
 800884c:	bd10      	pop	{r4, pc}
 800884e:	2800      	cmp	r0, #0
 8008850:	d1f3      	bne.n	800883a <strncmp+0xa>
 8008852:	e7fa      	b.n	800884a <strncmp+0x1a>
 8008854:	4610      	mov	r0, r2
 8008856:	e7f9      	b.n	800884c <strncmp+0x1c>

08008858 <__ascii_wctomb>:
 8008858:	b149      	cbz	r1, 800886e <__ascii_wctomb+0x16>
 800885a:	2aff      	cmp	r2, #255	; 0xff
 800885c:	bf85      	ittet	hi
 800885e:	238a      	movhi	r3, #138	; 0x8a
 8008860:	6003      	strhi	r3, [r0, #0]
 8008862:	700a      	strbls	r2, [r1, #0]
 8008864:	f04f 30ff 	movhi.w	r0, #4294967295
 8008868:	bf98      	it	ls
 800886a:	2001      	movls	r0, #1
 800886c:	4770      	bx	lr
 800886e:	4608      	mov	r0, r1
 8008870:	4770      	bx	lr
	...

08008874 <__assert_func>:
 8008874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008876:	4614      	mov	r4, r2
 8008878:	461a      	mov	r2, r3
 800887a:	4b09      	ldr	r3, [pc, #36]	; (80088a0 <__assert_func+0x2c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4605      	mov	r5, r0
 8008880:	68d8      	ldr	r0, [r3, #12]
 8008882:	b14c      	cbz	r4, 8008898 <__assert_func+0x24>
 8008884:	4b07      	ldr	r3, [pc, #28]	; (80088a4 <__assert_func+0x30>)
 8008886:	9100      	str	r1, [sp, #0]
 8008888:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800888c:	4906      	ldr	r1, [pc, #24]	; (80088a8 <__assert_func+0x34>)
 800888e:	462b      	mov	r3, r5
 8008890:	f000 f80e 	bl	80088b0 <fiprintf>
 8008894:	f000 fa8c 	bl	8008db0 <abort>
 8008898:	4b04      	ldr	r3, [pc, #16]	; (80088ac <__assert_func+0x38>)
 800889a:	461c      	mov	r4, r3
 800889c:	e7f3      	b.n	8008886 <__assert_func+0x12>
 800889e:	bf00      	nop
 80088a0:	2000000c 	.word	0x2000000c
 80088a4:	0800a69d 	.word	0x0800a69d
 80088a8:	0800a6aa 	.word	0x0800a6aa
 80088ac:	0800a6d8 	.word	0x0800a6d8

080088b0 <fiprintf>:
 80088b0:	b40e      	push	{r1, r2, r3}
 80088b2:	b503      	push	{r0, r1, lr}
 80088b4:	4601      	mov	r1, r0
 80088b6:	ab03      	add	r3, sp, #12
 80088b8:	4805      	ldr	r0, [pc, #20]	; (80088d0 <fiprintf+0x20>)
 80088ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80088be:	6800      	ldr	r0, [r0, #0]
 80088c0:	9301      	str	r3, [sp, #4]
 80088c2:	f000 f885 	bl	80089d0 <_vfiprintf_r>
 80088c6:	b002      	add	sp, #8
 80088c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80088cc:	b003      	add	sp, #12
 80088ce:	4770      	bx	lr
 80088d0:	2000000c 	.word	0x2000000c

080088d4 <memmove>:
 80088d4:	4288      	cmp	r0, r1
 80088d6:	b510      	push	{r4, lr}
 80088d8:	eb01 0402 	add.w	r4, r1, r2
 80088dc:	d902      	bls.n	80088e4 <memmove+0x10>
 80088de:	4284      	cmp	r4, r0
 80088e0:	4623      	mov	r3, r4
 80088e2:	d807      	bhi.n	80088f4 <memmove+0x20>
 80088e4:	1e43      	subs	r3, r0, #1
 80088e6:	42a1      	cmp	r1, r4
 80088e8:	d008      	beq.n	80088fc <memmove+0x28>
 80088ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088f2:	e7f8      	b.n	80088e6 <memmove+0x12>
 80088f4:	4402      	add	r2, r0
 80088f6:	4601      	mov	r1, r0
 80088f8:	428a      	cmp	r2, r1
 80088fa:	d100      	bne.n	80088fe <memmove+0x2a>
 80088fc:	bd10      	pop	{r4, pc}
 80088fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008906:	e7f7      	b.n	80088f8 <memmove+0x24>

08008908 <__malloc_lock>:
 8008908:	4801      	ldr	r0, [pc, #4]	; (8008910 <__malloc_lock+0x8>)
 800890a:	f000 bc11 	b.w	8009130 <__retarget_lock_acquire_recursive>
 800890e:	bf00      	nop
 8008910:	20000388 	.word	0x20000388

08008914 <__malloc_unlock>:
 8008914:	4801      	ldr	r0, [pc, #4]	; (800891c <__malloc_unlock+0x8>)
 8008916:	f000 bc0c 	b.w	8009132 <__retarget_lock_release_recursive>
 800891a:	bf00      	nop
 800891c:	20000388 	.word	0x20000388

08008920 <_realloc_r>:
 8008920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008924:	4680      	mov	r8, r0
 8008926:	4614      	mov	r4, r2
 8008928:	460e      	mov	r6, r1
 800892a:	b921      	cbnz	r1, 8008936 <_realloc_r+0x16>
 800892c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008930:	4611      	mov	r1, r2
 8008932:	f7ff bd93 	b.w	800845c <_malloc_r>
 8008936:	b92a      	cbnz	r2, 8008944 <_realloc_r+0x24>
 8008938:	f7ff fd24 	bl	8008384 <_free_r>
 800893c:	4625      	mov	r5, r4
 800893e:	4628      	mov	r0, r5
 8008940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008944:	f000 fc5c 	bl	8009200 <_malloc_usable_size_r>
 8008948:	4284      	cmp	r4, r0
 800894a:	4607      	mov	r7, r0
 800894c:	d802      	bhi.n	8008954 <_realloc_r+0x34>
 800894e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008952:	d812      	bhi.n	800897a <_realloc_r+0x5a>
 8008954:	4621      	mov	r1, r4
 8008956:	4640      	mov	r0, r8
 8008958:	f7ff fd80 	bl	800845c <_malloc_r>
 800895c:	4605      	mov	r5, r0
 800895e:	2800      	cmp	r0, #0
 8008960:	d0ed      	beq.n	800893e <_realloc_r+0x1e>
 8008962:	42bc      	cmp	r4, r7
 8008964:	4622      	mov	r2, r4
 8008966:	4631      	mov	r1, r6
 8008968:	bf28      	it	cs
 800896a:	463a      	movcs	r2, r7
 800896c:	f7ff f824 	bl	80079b8 <memcpy>
 8008970:	4631      	mov	r1, r6
 8008972:	4640      	mov	r0, r8
 8008974:	f7ff fd06 	bl	8008384 <_free_r>
 8008978:	e7e1      	b.n	800893e <_realloc_r+0x1e>
 800897a:	4635      	mov	r5, r6
 800897c:	e7df      	b.n	800893e <_realloc_r+0x1e>

0800897e <__sfputc_r>:
 800897e:	6893      	ldr	r3, [r2, #8]
 8008980:	3b01      	subs	r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	b410      	push	{r4}
 8008986:	6093      	str	r3, [r2, #8]
 8008988:	da08      	bge.n	800899c <__sfputc_r+0x1e>
 800898a:	6994      	ldr	r4, [r2, #24]
 800898c:	42a3      	cmp	r3, r4
 800898e:	db01      	blt.n	8008994 <__sfputc_r+0x16>
 8008990:	290a      	cmp	r1, #10
 8008992:	d103      	bne.n	800899c <__sfputc_r+0x1e>
 8008994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008998:	f000 b94a 	b.w	8008c30 <__swbuf_r>
 800899c:	6813      	ldr	r3, [r2, #0]
 800899e:	1c58      	adds	r0, r3, #1
 80089a0:	6010      	str	r0, [r2, #0]
 80089a2:	7019      	strb	r1, [r3, #0]
 80089a4:	4608      	mov	r0, r1
 80089a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <__sfputs_r>:
 80089ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ae:	4606      	mov	r6, r0
 80089b0:	460f      	mov	r7, r1
 80089b2:	4614      	mov	r4, r2
 80089b4:	18d5      	adds	r5, r2, r3
 80089b6:	42ac      	cmp	r4, r5
 80089b8:	d101      	bne.n	80089be <__sfputs_r+0x12>
 80089ba:	2000      	movs	r0, #0
 80089bc:	e007      	b.n	80089ce <__sfputs_r+0x22>
 80089be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c2:	463a      	mov	r2, r7
 80089c4:	4630      	mov	r0, r6
 80089c6:	f7ff ffda 	bl	800897e <__sfputc_r>
 80089ca:	1c43      	adds	r3, r0, #1
 80089cc:	d1f3      	bne.n	80089b6 <__sfputs_r+0xa>
 80089ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080089d0 <_vfiprintf_r>:
 80089d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d4:	460d      	mov	r5, r1
 80089d6:	b09d      	sub	sp, #116	; 0x74
 80089d8:	4614      	mov	r4, r2
 80089da:	4698      	mov	r8, r3
 80089dc:	4606      	mov	r6, r0
 80089de:	b118      	cbz	r0, 80089e8 <_vfiprintf_r+0x18>
 80089e0:	6983      	ldr	r3, [r0, #24]
 80089e2:	b90b      	cbnz	r3, 80089e8 <_vfiprintf_r+0x18>
 80089e4:	f000 fb06 	bl	8008ff4 <__sinit>
 80089e8:	4b89      	ldr	r3, [pc, #548]	; (8008c10 <_vfiprintf_r+0x240>)
 80089ea:	429d      	cmp	r5, r3
 80089ec:	d11b      	bne.n	8008a26 <_vfiprintf_r+0x56>
 80089ee:	6875      	ldr	r5, [r6, #4]
 80089f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089f2:	07d9      	lsls	r1, r3, #31
 80089f4:	d405      	bmi.n	8008a02 <_vfiprintf_r+0x32>
 80089f6:	89ab      	ldrh	r3, [r5, #12]
 80089f8:	059a      	lsls	r2, r3, #22
 80089fa:	d402      	bmi.n	8008a02 <_vfiprintf_r+0x32>
 80089fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089fe:	f000 fb97 	bl	8009130 <__retarget_lock_acquire_recursive>
 8008a02:	89ab      	ldrh	r3, [r5, #12]
 8008a04:	071b      	lsls	r3, r3, #28
 8008a06:	d501      	bpl.n	8008a0c <_vfiprintf_r+0x3c>
 8008a08:	692b      	ldr	r3, [r5, #16]
 8008a0a:	b9eb      	cbnz	r3, 8008a48 <_vfiprintf_r+0x78>
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f000 f960 	bl	8008cd4 <__swsetup_r>
 8008a14:	b1c0      	cbz	r0, 8008a48 <_vfiprintf_r+0x78>
 8008a16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a18:	07dc      	lsls	r4, r3, #31
 8008a1a:	d50e      	bpl.n	8008a3a <_vfiprintf_r+0x6a>
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a20:	b01d      	add	sp, #116	; 0x74
 8008a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a26:	4b7b      	ldr	r3, [pc, #492]	; (8008c14 <_vfiprintf_r+0x244>)
 8008a28:	429d      	cmp	r5, r3
 8008a2a:	d101      	bne.n	8008a30 <_vfiprintf_r+0x60>
 8008a2c:	68b5      	ldr	r5, [r6, #8]
 8008a2e:	e7df      	b.n	80089f0 <_vfiprintf_r+0x20>
 8008a30:	4b79      	ldr	r3, [pc, #484]	; (8008c18 <_vfiprintf_r+0x248>)
 8008a32:	429d      	cmp	r5, r3
 8008a34:	bf08      	it	eq
 8008a36:	68f5      	ldreq	r5, [r6, #12]
 8008a38:	e7da      	b.n	80089f0 <_vfiprintf_r+0x20>
 8008a3a:	89ab      	ldrh	r3, [r5, #12]
 8008a3c:	0598      	lsls	r0, r3, #22
 8008a3e:	d4ed      	bmi.n	8008a1c <_vfiprintf_r+0x4c>
 8008a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a42:	f000 fb76 	bl	8009132 <__retarget_lock_release_recursive>
 8008a46:	e7e9      	b.n	8008a1c <_vfiprintf_r+0x4c>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a4c:	2320      	movs	r3, #32
 8008a4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a56:	2330      	movs	r3, #48	; 0x30
 8008a58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c1c <_vfiprintf_r+0x24c>
 8008a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a60:	f04f 0901 	mov.w	r9, #1
 8008a64:	4623      	mov	r3, r4
 8008a66:	469a      	mov	sl, r3
 8008a68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a6c:	b10a      	cbz	r2, 8008a72 <_vfiprintf_r+0xa2>
 8008a6e:	2a25      	cmp	r2, #37	; 0x25
 8008a70:	d1f9      	bne.n	8008a66 <_vfiprintf_r+0x96>
 8008a72:	ebba 0b04 	subs.w	fp, sl, r4
 8008a76:	d00b      	beq.n	8008a90 <_vfiprintf_r+0xc0>
 8008a78:	465b      	mov	r3, fp
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	4630      	mov	r0, r6
 8008a80:	f7ff ff94 	bl	80089ac <__sfputs_r>
 8008a84:	3001      	adds	r0, #1
 8008a86:	f000 80aa 	beq.w	8008bde <_vfiprintf_r+0x20e>
 8008a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a8c:	445a      	add	r2, fp
 8008a8e:	9209      	str	r2, [sp, #36]	; 0x24
 8008a90:	f89a 3000 	ldrb.w	r3, [sl]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f000 80a2 	beq.w	8008bde <_vfiprintf_r+0x20e>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aa4:	f10a 0a01 	add.w	sl, sl, #1
 8008aa8:	9304      	str	r3, [sp, #16]
 8008aaa:	9307      	str	r3, [sp, #28]
 8008aac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ab0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ab2:	4654      	mov	r4, sl
 8008ab4:	2205      	movs	r2, #5
 8008ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aba:	4858      	ldr	r0, [pc, #352]	; (8008c1c <_vfiprintf_r+0x24c>)
 8008abc:	f7f7 fb90 	bl	80001e0 <memchr>
 8008ac0:	9a04      	ldr	r2, [sp, #16]
 8008ac2:	b9d8      	cbnz	r0, 8008afc <_vfiprintf_r+0x12c>
 8008ac4:	06d1      	lsls	r1, r2, #27
 8008ac6:	bf44      	itt	mi
 8008ac8:	2320      	movmi	r3, #32
 8008aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ace:	0713      	lsls	r3, r2, #28
 8008ad0:	bf44      	itt	mi
 8008ad2:	232b      	movmi	r3, #43	; 0x2b
 8008ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8008adc:	2b2a      	cmp	r3, #42	; 0x2a
 8008ade:	d015      	beq.n	8008b0c <_vfiprintf_r+0x13c>
 8008ae0:	9a07      	ldr	r2, [sp, #28]
 8008ae2:	4654      	mov	r4, sl
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	f04f 0c0a 	mov.w	ip, #10
 8008aea:	4621      	mov	r1, r4
 8008aec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008af0:	3b30      	subs	r3, #48	; 0x30
 8008af2:	2b09      	cmp	r3, #9
 8008af4:	d94e      	bls.n	8008b94 <_vfiprintf_r+0x1c4>
 8008af6:	b1b0      	cbz	r0, 8008b26 <_vfiprintf_r+0x156>
 8008af8:	9207      	str	r2, [sp, #28]
 8008afa:	e014      	b.n	8008b26 <_vfiprintf_r+0x156>
 8008afc:	eba0 0308 	sub.w	r3, r0, r8
 8008b00:	fa09 f303 	lsl.w	r3, r9, r3
 8008b04:	4313      	orrs	r3, r2
 8008b06:	9304      	str	r3, [sp, #16]
 8008b08:	46a2      	mov	sl, r4
 8008b0a:	e7d2      	b.n	8008ab2 <_vfiprintf_r+0xe2>
 8008b0c:	9b03      	ldr	r3, [sp, #12]
 8008b0e:	1d19      	adds	r1, r3, #4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	9103      	str	r1, [sp, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	bfbb      	ittet	lt
 8008b18:	425b      	neglt	r3, r3
 8008b1a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b1e:	9307      	strge	r3, [sp, #28]
 8008b20:	9307      	strlt	r3, [sp, #28]
 8008b22:	bfb8      	it	lt
 8008b24:	9204      	strlt	r2, [sp, #16]
 8008b26:	7823      	ldrb	r3, [r4, #0]
 8008b28:	2b2e      	cmp	r3, #46	; 0x2e
 8008b2a:	d10c      	bne.n	8008b46 <_vfiprintf_r+0x176>
 8008b2c:	7863      	ldrb	r3, [r4, #1]
 8008b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b30:	d135      	bne.n	8008b9e <_vfiprintf_r+0x1ce>
 8008b32:	9b03      	ldr	r3, [sp, #12]
 8008b34:	1d1a      	adds	r2, r3, #4
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	9203      	str	r2, [sp, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	bfb8      	it	lt
 8008b3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b42:	3402      	adds	r4, #2
 8008b44:	9305      	str	r3, [sp, #20]
 8008b46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c2c <_vfiprintf_r+0x25c>
 8008b4a:	7821      	ldrb	r1, [r4, #0]
 8008b4c:	2203      	movs	r2, #3
 8008b4e:	4650      	mov	r0, sl
 8008b50:	f7f7 fb46 	bl	80001e0 <memchr>
 8008b54:	b140      	cbz	r0, 8008b68 <_vfiprintf_r+0x198>
 8008b56:	2340      	movs	r3, #64	; 0x40
 8008b58:	eba0 000a 	sub.w	r0, r0, sl
 8008b5c:	fa03 f000 	lsl.w	r0, r3, r0
 8008b60:	9b04      	ldr	r3, [sp, #16]
 8008b62:	4303      	orrs	r3, r0
 8008b64:	3401      	adds	r4, #1
 8008b66:	9304      	str	r3, [sp, #16]
 8008b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b6c:	482c      	ldr	r0, [pc, #176]	; (8008c20 <_vfiprintf_r+0x250>)
 8008b6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b72:	2206      	movs	r2, #6
 8008b74:	f7f7 fb34 	bl	80001e0 <memchr>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d03f      	beq.n	8008bfc <_vfiprintf_r+0x22c>
 8008b7c:	4b29      	ldr	r3, [pc, #164]	; (8008c24 <_vfiprintf_r+0x254>)
 8008b7e:	bb1b      	cbnz	r3, 8008bc8 <_vfiprintf_r+0x1f8>
 8008b80:	9b03      	ldr	r3, [sp, #12]
 8008b82:	3307      	adds	r3, #7
 8008b84:	f023 0307 	bic.w	r3, r3, #7
 8008b88:	3308      	adds	r3, #8
 8008b8a:	9303      	str	r3, [sp, #12]
 8008b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8e:	443b      	add	r3, r7
 8008b90:	9309      	str	r3, [sp, #36]	; 0x24
 8008b92:	e767      	b.n	8008a64 <_vfiprintf_r+0x94>
 8008b94:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b98:	460c      	mov	r4, r1
 8008b9a:	2001      	movs	r0, #1
 8008b9c:	e7a5      	b.n	8008aea <_vfiprintf_r+0x11a>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	3401      	adds	r4, #1
 8008ba2:	9305      	str	r3, [sp, #20]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	f04f 0c0a 	mov.w	ip, #10
 8008baa:	4620      	mov	r0, r4
 8008bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bb0:	3a30      	subs	r2, #48	; 0x30
 8008bb2:	2a09      	cmp	r2, #9
 8008bb4:	d903      	bls.n	8008bbe <_vfiprintf_r+0x1ee>
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0c5      	beq.n	8008b46 <_vfiprintf_r+0x176>
 8008bba:	9105      	str	r1, [sp, #20]
 8008bbc:	e7c3      	b.n	8008b46 <_vfiprintf_r+0x176>
 8008bbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e7f0      	b.n	8008baa <_vfiprintf_r+0x1da>
 8008bc8:	ab03      	add	r3, sp, #12
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	462a      	mov	r2, r5
 8008bce:	4b16      	ldr	r3, [pc, #88]	; (8008c28 <_vfiprintf_r+0x258>)
 8008bd0:	a904      	add	r1, sp, #16
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f7fc f83c 	bl	8004c50 <_printf_float>
 8008bd8:	4607      	mov	r7, r0
 8008bda:	1c78      	adds	r0, r7, #1
 8008bdc:	d1d6      	bne.n	8008b8c <_vfiprintf_r+0x1bc>
 8008bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008be0:	07d9      	lsls	r1, r3, #31
 8008be2:	d405      	bmi.n	8008bf0 <_vfiprintf_r+0x220>
 8008be4:	89ab      	ldrh	r3, [r5, #12]
 8008be6:	059a      	lsls	r2, r3, #22
 8008be8:	d402      	bmi.n	8008bf0 <_vfiprintf_r+0x220>
 8008bea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bec:	f000 faa1 	bl	8009132 <__retarget_lock_release_recursive>
 8008bf0:	89ab      	ldrh	r3, [r5, #12]
 8008bf2:	065b      	lsls	r3, r3, #25
 8008bf4:	f53f af12 	bmi.w	8008a1c <_vfiprintf_r+0x4c>
 8008bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bfa:	e711      	b.n	8008a20 <_vfiprintf_r+0x50>
 8008bfc:	ab03      	add	r3, sp, #12
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	462a      	mov	r2, r5
 8008c02:	4b09      	ldr	r3, [pc, #36]	; (8008c28 <_vfiprintf_r+0x258>)
 8008c04:	a904      	add	r1, sp, #16
 8008c06:	4630      	mov	r0, r6
 8008c08:	f7fc fac6 	bl	8005198 <_printf_i>
 8008c0c:	e7e4      	b.n	8008bd8 <_vfiprintf_r+0x208>
 8008c0e:	bf00      	nop
 8008c10:	0800a6fc 	.word	0x0800a6fc
 8008c14:	0800a71c 	.word	0x0800a71c
 8008c18:	0800a6dc 	.word	0x0800a6dc
 8008c1c:	0800a68c 	.word	0x0800a68c
 8008c20:	0800a696 	.word	0x0800a696
 8008c24:	08004c51 	.word	0x08004c51
 8008c28:	080089ad 	.word	0x080089ad
 8008c2c:	0800a692 	.word	0x0800a692

08008c30 <__swbuf_r>:
 8008c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c32:	460e      	mov	r6, r1
 8008c34:	4614      	mov	r4, r2
 8008c36:	4605      	mov	r5, r0
 8008c38:	b118      	cbz	r0, 8008c42 <__swbuf_r+0x12>
 8008c3a:	6983      	ldr	r3, [r0, #24]
 8008c3c:	b90b      	cbnz	r3, 8008c42 <__swbuf_r+0x12>
 8008c3e:	f000 f9d9 	bl	8008ff4 <__sinit>
 8008c42:	4b21      	ldr	r3, [pc, #132]	; (8008cc8 <__swbuf_r+0x98>)
 8008c44:	429c      	cmp	r4, r3
 8008c46:	d12b      	bne.n	8008ca0 <__swbuf_r+0x70>
 8008c48:	686c      	ldr	r4, [r5, #4]
 8008c4a:	69a3      	ldr	r3, [r4, #24]
 8008c4c:	60a3      	str	r3, [r4, #8]
 8008c4e:	89a3      	ldrh	r3, [r4, #12]
 8008c50:	071a      	lsls	r2, r3, #28
 8008c52:	d52f      	bpl.n	8008cb4 <__swbuf_r+0x84>
 8008c54:	6923      	ldr	r3, [r4, #16]
 8008c56:	b36b      	cbz	r3, 8008cb4 <__swbuf_r+0x84>
 8008c58:	6923      	ldr	r3, [r4, #16]
 8008c5a:	6820      	ldr	r0, [r4, #0]
 8008c5c:	1ac0      	subs	r0, r0, r3
 8008c5e:	6963      	ldr	r3, [r4, #20]
 8008c60:	b2f6      	uxtb	r6, r6
 8008c62:	4283      	cmp	r3, r0
 8008c64:	4637      	mov	r7, r6
 8008c66:	dc04      	bgt.n	8008c72 <__swbuf_r+0x42>
 8008c68:	4621      	mov	r1, r4
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f000 f92e 	bl	8008ecc <_fflush_r>
 8008c70:	bb30      	cbnz	r0, 8008cc0 <__swbuf_r+0x90>
 8008c72:	68a3      	ldr	r3, [r4, #8]
 8008c74:	3b01      	subs	r3, #1
 8008c76:	60a3      	str	r3, [r4, #8]
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	1c5a      	adds	r2, r3, #1
 8008c7c:	6022      	str	r2, [r4, #0]
 8008c7e:	701e      	strb	r6, [r3, #0]
 8008c80:	6963      	ldr	r3, [r4, #20]
 8008c82:	3001      	adds	r0, #1
 8008c84:	4283      	cmp	r3, r0
 8008c86:	d004      	beq.n	8008c92 <__swbuf_r+0x62>
 8008c88:	89a3      	ldrh	r3, [r4, #12]
 8008c8a:	07db      	lsls	r3, r3, #31
 8008c8c:	d506      	bpl.n	8008c9c <__swbuf_r+0x6c>
 8008c8e:	2e0a      	cmp	r6, #10
 8008c90:	d104      	bne.n	8008c9c <__swbuf_r+0x6c>
 8008c92:	4621      	mov	r1, r4
 8008c94:	4628      	mov	r0, r5
 8008c96:	f000 f919 	bl	8008ecc <_fflush_r>
 8008c9a:	b988      	cbnz	r0, 8008cc0 <__swbuf_r+0x90>
 8008c9c:	4638      	mov	r0, r7
 8008c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ca0:	4b0a      	ldr	r3, [pc, #40]	; (8008ccc <__swbuf_r+0x9c>)
 8008ca2:	429c      	cmp	r4, r3
 8008ca4:	d101      	bne.n	8008caa <__swbuf_r+0x7a>
 8008ca6:	68ac      	ldr	r4, [r5, #8]
 8008ca8:	e7cf      	b.n	8008c4a <__swbuf_r+0x1a>
 8008caa:	4b09      	ldr	r3, [pc, #36]	; (8008cd0 <__swbuf_r+0xa0>)
 8008cac:	429c      	cmp	r4, r3
 8008cae:	bf08      	it	eq
 8008cb0:	68ec      	ldreq	r4, [r5, #12]
 8008cb2:	e7ca      	b.n	8008c4a <__swbuf_r+0x1a>
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f000 f80c 	bl	8008cd4 <__swsetup_r>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	d0cb      	beq.n	8008c58 <__swbuf_r+0x28>
 8008cc0:	f04f 37ff 	mov.w	r7, #4294967295
 8008cc4:	e7ea      	b.n	8008c9c <__swbuf_r+0x6c>
 8008cc6:	bf00      	nop
 8008cc8:	0800a6fc 	.word	0x0800a6fc
 8008ccc:	0800a71c 	.word	0x0800a71c
 8008cd0:	0800a6dc 	.word	0x0800a6dc

08008cd4 <__swsetup_r>:
 8008cd4:	4b32      	ldr	r3, [pc, #200]	; (8008da0 <__swsetup_r+0xcc>)
 8008cd6:	b570      	push	{r4, r5, r6, lr}
 8008cd8:	681d      	ldr	r5, [r3, #0]
 8008cda:	4606      	mov	r6, r0
 8008cdc:	460c      	mov	r4, r1
 8008cde:	b125      	cbz	r5, 8008cea <__swsetup_r+0x16>
 8008ce0:	69ab      	ldr	r3, [r5, #24]
 8008ce2:	b913      	cbnz	r3, 8008cea <__swsetup_r+0x16>
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	f000 f985 	bl	8008ff4 <__sinit>
 8008cea:	4b2e      	ldr	r3, [pc, #184]	; (8008da4 <__swsetup_r+0xd0>)
 8008cec:	429c      	cmp	r4, r3
 8008cee:	d10f      	bne.n	8008d10 <__swsetup_r+0x3c>
 8008cf0:	686c      	ldr	r4, [r5, #4]
 8008cf2:	89a3      	ldrh	r3, [r4, #12]
 8008cf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cf8:	0719      	lsls	r1, r3, #28
 8008cfa:	d42c      	bmi.n	8008d56 <__swsetup_r+0x82>
 8008cfc:	06dd      	lsls	r5, r3, #27
 8008cfe:	d411      	bmi.n	8008d24 <__swsetup_r+0x50>
 8008d00:	2309      	movs	r3, #9
 8008d02:	6033      	str	r3, [r6, #0]
 8008d04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d08:	81a3      	strh	r3, [r4, #12]
 8008d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d0e:	e03e      	b.n	8008d8e <__swsetup_r+0xba>
 8008d10:	4b25      	ldr	r3, [pc, #148]	; (8008da8 <__swsetup_r+0xd4>)
 8008d12:	429c      	cmp	r4, r3
 8008d14:	d101      	bne.n	8008d1a <__swsetup_r+0x46>
 8008d16:	68ac      	ldr	r4, [r5, #8]
 8008d18:	e7eb      	b.n	8008cf2 <__swsetup_r+0x1e>
 8008d1a:	4b24      	ldr	r3, [pc, #144]	; (8008dac <__swsetup_r+0xd8>)
 8008d1c:	429c      	cmp	r4, r3
 8008d1e:	bf08      	it	eq
 8008d20:	68ec      	ldreq	r4, [r5, #12]
 8008d22:	e7e6      	b.n	8008cf2 <__swsetup_r+0x1e>
 8008d24:	0758      	lsls	r0, r3, #29
 8008d26:	d512      	bpl.n	8008d4e <__swsetup_r+0x7a>
 8008d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d2a:	b141      	cbz	r1, 8008d3e <__swsetup_r+0x6a>
 8008d2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d30:	4299      	cmp	r1, r3
 8008d32:	d002      	beq.n	8008d3a <__swsetup_r+0x66>
 8008d34:	4630      	mov	r0, r6
 8008d36:	f7ff fb25 	bl	8008384 <_free_r>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	6363      	str	r3, [r4, #52]	; 0x34
 8008d3e:	89a3      	ldrh	r3, [r4, #12]
 8008d40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d44:	81a3      	strh	r3, [r4, #12]
 8008d46:	2300      	movs	r3, #0
 8008d48:	6063      	str	r3, [r4, #4]
 8008d4a:	6923      	ldr	r3, [r4, #16]
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	89a3      	ldrh	r3, [r4, #12]
 8008d50:	f043 0308 	orr.w	r3, r3, #8
 8008d54:	81a3      	strh	r3, [r4, #12]
 8008d56:	6923      	ldr	r3, [r4, #16]
 8008d58:	b94b      	cbnz	r3, 8008d6e <__swsetup_r+0x9a>
 8008d5a:	89a3      	ldrh	r3, [r4, #12]
 8008d5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d64:	d003      	beq.n	8008d6e <__swsetup_r+0x9a>
 8008d66:	4621      	mov	r1, r4
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f000 fa09 	bl	8009180 <__smakebuf_r>
 8008d6e:	89a0      	ldrh	r0, [r4, #12]
 8008d70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d74:	f010 0301 	ands.w	r3, r0, #1
 8008d78:	d00a      	beq.n	8008d90 <__swsetup_r+0xbc>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60a3      	str	r3, [r4, #8]
 8008d7e:	6963      	ldr	r3, [r4, #20]
 8008d80:	425b      	negs	r3, r3
 8008d82:	61a3      	str	r3, [r4, #24]
 8008d84:	6923      	ldr	r3, [r4, #16]
 8008d86:	b943      	cbnz	r3, 8008d9a <__swsetup_r+0xc6>
 8008d88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d8c:	d1ba      	bne.n	8008d04 <__swsetup_r+0x30>
 8008d8e:	bd70      	pop	{r4, r5, r6, pc}
 8008d90:	0781      	lsls	r1, r0, #30
 8008d92:	bf58      	it	pl
 8008d94:	6963      	ldrpl	r3, [r4, #20]
 8008d96:	60a3      	str	r3, [r4, #8]
 8008d98:	e7f4      	b.n	8008d84 <__swsetup_r+0xb0>
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	e7f7      	b.n	8008d8e <__swsetup_r+0xba>
 8008d9e:	bf00      	nop
 8008da0:	2000000c 	.word	0x2000000c
 8008da4:	0800a6fc 	.word	0x0800a6fc
 8008da8:	0800a71c 	.word	0x0800a71c
 8008dac:	0800a6dc 	.word	0x0800a6dc

08008db0 <abort>:
 8008db0:	b508      	push	{r3, lr}
 8008db2:	2006      	movs	r0, #6
 8008db4:	f000 fa54 	bl	8009260 <raise>
 8008db8:	2001      	movs	r0, #1
 8008dba:	f7f9 f8d5 	bl	8001f68 <_exit>
	...

08008dc0 <__sflush_r>:
 8008dc0:	898a      	ldrh	r2, [r1, #12]
 8008dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc6:	4605      	mov	r5, r0
 8008dc8:	0710      	lsls	r0, r2, #28
 8008dca:	460c      	mov	r4, r1
 8008dcc:	d458      	bmi.n	8008e80 <__sflush_r+0xc0>
 8008dce:	684b      	ldr	r3, [r1, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	dc05      	bgt.n	8008de0 <__sflush_r+0x20>
 8008dd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	dc02      	bgt.n	8008de0 <__sflush_r+0x20>
 8008dda:	2000      	movs	r0, #0
 8008ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008de2:	2e00      	cmp	r6, #0
 8008de4:	d0f9      	beq.n	8008dda <__sflush_r+0x1a>
 8008de6:	2300      	movs	r3, #0
 8008de8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008dec:	682f      	ldr	r7, [r5, #0]
 8008dee:	602b      	str	r3, [r5, #0]
 8008df0:	d032      	beq.n	8008e58 <__sflush_r+0x98>
 8008df2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008df4:	89a3      	ldrh	r3, [r4, #12]
 8008df6:	075a      	lsls	r2, r3, #29
 8008df8:	d505      	bpl.n	8008e06 <__sflush_r+0x46>
 8008dfa:	6863      	ldr	r3, [r4, #4]
 8008dfc:	1ac0      	subs	r0, r0, r3
 8008dfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e00:	b10b      	cbz	r3, 8008e06 <__sflush_r+0x46>
 8008e02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e04:	1ac0      	subs	r0, r0, r3
 8008e06:	2300      	movs	r3, #0
 8008e08:	4602      	mov	r2, r0
 8008e0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e0c:	6a21      	ldr	r1, [r4, #32]
 8008e0e:	4628      	mov	r0, r5
 8008e10:	47b0      	blx	r6
 8008e12:	1c43      	adds	r3, r0, #1
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	d106      	bne.n	8008e26 <__sflush_r+0x66>
 8008e18:	6829      	ldr	r1, [r5, #0]
 8008e1a:	291d      	cmp	r1, #29
 8008e1c:	d82c      	bhi.n	8008e78 <__sflush_r+0xb8>
 8008e1e:	4a2a      	ldr	r2, [pc, #168]	; (8008ec8 <__sflush_r+0x108>)
 8008e20:	40ca      	lsrs	r2, r1
 8008e22:	07d6      	lsls	r6, r2, #31
 8008e24:	d528      	bpl.n	8008e78 <__sflush_r+0xb8>
 8008e26:	2200      	movs	r2, #0
 8008e28:	6062      	str	r2, [r4, #4]
 8008e2a:	04d9      	lsls	r1, r3, #19
 8008e2c:	6922      	ldr	r2, [r4, #16]
 8008e2e:	6022      	str	r2, [r4, #0]
 8008e30:	d504      	bpl.n	8008e3c <__sflush_r+0x7c>
 8008e32:	1c42      	adds	r2, r0, #1
 8008e34:	d101      	bne.n	8008e3a <__sflush_r+0x7a>
 8008e36:	682b      	ldr	r3, [r5, #0]
 8008e38:	b903      	cbnz	r3, 8008e3c <__sflush_r+0x7c>
 8008e3a:	6560      	str	r0, [r4, #84]	; 0x54
 8008e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e3e:	602f      	str	r7, [r5, #0]
 8008e40:	2900      	cmp	r1, #0
 8008e42:	d0ca      	beq.n	8008dda <__sflush_r+0x1a>
 8008e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e48:	4299      	cmp	r1, r3
 8008e4a:	d002      	beq.n	8008e52 <__sflush_r+0x92>
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	f7ff fa99 	bl	8008384 <_free_r>
 8008e52:	2000      	movs	r0, #0
 8008e54:	6360      	str	r0, [r4, #52]	; 0x34
 8008e56:	e7c1      	b.n	8008ddc <__sflush_r+0x1c>
 8008e58:	6a21      	ldr	r1, [r4, #32]
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	47b0      	blx	r6
 8008e60:	1c41      	adds	r1, r0, #1
 8008e62:	d1c7      	bne.n	8008df4 <__sflush_r+0x34>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d0c4      	beq.n	8008df4 <__sflush_r+0x34>
 8008e6a:	2b1d      	cmp	r3, #29
 8008e6c:	d001      	beq.n	8008e72 <__sflush_r+0xb2>
 8008e6e:	2b16      	cmp	r3, #22
 8008e70:	d101      	bne.n	8008e76 <__sflush_r+0xb6>
 8008e72:	602f      	str	r7, [r5, #0]
 8008e74:	e7b1      	b.n	8008dda <__sflush_r+0x1a>
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e7c:	81a3      	strh	r3, [r4, #12]
 8008e7e:	e7ad      	b.n	8008ddc <__sflush_r+0x1c>
 8008e80:	690f      	ldr	r7, [r1, #16]
 8008e82:	2f00      	cmp	r7, #0
 8008e84:	d0a9      	beq.n	8008dda <__sflush_r+0x1a>
 8008e86:	0793      	lsls	r3, r2, #30
 8008e88:	680e      	ldr	r6, [r1, #0]
 8008e8a:	bf08      	it	eq
 8008e8c:	694b      	ldreq	r3, [r1, #20]
 8008e8e:	600f      	str	r7, [r1, #0]
 8008e90:	bf18      	it	ne
 8008e92:	2300      	movne	r3, #0
 8008e94:	eba6 0807 	sub.w	r8, r6, r7
 8008e98:	608b      	str	r3, [r1, #8]
 8008e9a:	f1b8 0f00 	cmp.w	r8, #0
 8008e9e:	dd9c      	ble.n	8008dda <__sflush_r+0x1a>
 8008ea0:	6a21      	ldr	r1, [r4, #32]
 8008ea2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ea4:	4643      	mov	r3, r8
 8008ea6:	463a      	mov	r2, r7
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	47b0      	blx	r6
 8008eac:	2800      	cmp	r0, #0
 8008eae:	dc06      	bgt.n	8008ebe <__sflush_r+0xfe>
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eb6:	81a3      	strh	r3, [r4, #12]
 8008eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ebc:	e78e      	b.n	8008ddc <__sflush_r+0x1c>
 8008ebe:	4407      	add	r7, r0
 8008ec0:	eba8 0800 	sub.w	r8, r8, r0
 8008ec4:	e7e9      	b.n	8008e9a <__sflush_r+0xda>
 8008ec6:	bf00      	nop
 8008ec8:	20400001 	.word	0x20400001

08008ecc <_fflush_r>:
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	690b      	ldr	r3, [r1, #16]
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	b913      	cbnz	r3, 8008edc <_fflush_r+0x10>
 8008ed6:	2500      	movs	r5, #0
 8008ed8:	4628      	mov	r0, r5
 8008eda:	bd38      	pop	{r3, r4, r5, pc}
 8008edc:	b118      	cbz	r0, 8008ee6 <_fflush_r+0x1a>
 8008ede:	6983      	ldr	r3, [r0, #24]
 8008ee0:	b90b      	cbnz	r3, 8008ee6 <_fflush_r+0x1a>
 8008ee2:	f000 f887 	bl	8008ff4 <__sinit>
 8008ee6:	4b14      	ldr	r3, [pc, #80]	; (8008f38 <_fflush_r+0x6c>)
 8008ee8:	429c      	cmp	r4, r3
 8008eea:	d11b      	bne.n	8008f24 <_fflush_r+0x58>
 8008eec:	686c      	ldr	r4, [r5, #4]
 8008eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d0ef      	beq.n	8008ed6 <_fflush_r+0xa>
 8008ef6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ef8:	07d0      	lsls	r0, r2, #31
 8008efa:	d404      	bmi.n	8008f06 <_fflush_r+0x3a>
 8008efc:	0599      	lsls	r1, r3, #22
 8008efe:	d402      	bmi.n	8008f06 <_fflush_r+0x3a>
 8008f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f02:	f000 f915 	bl	8009130 <__retarget_lock_acquire_recursive>
 8008f06:	4628      	mov	r0, r5
 8008f08:	4621      	mov	r1, r4
 8008f0a:	f7ff ff59 	bl	8008dc0 <__sflush_r>
 8008f0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f10:	07da      	lsls	r2, r3, #31
 8008f12:	4605      	mov	r5, r0
 8008f14:	d4e0      	bmi.n	8008ed8 <_fflush_r+0xc>
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	059b      	lsls	r3, r3, #22
 8008f1a:	d4dd      	bmi.n	8008ed8 <_fflush_r+0xc>
 8008f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f1e:	f000 f908 	bl	8009132 <__retarget_lock_release_recursive>
 8008f22:	e7d9      	b.n	8008ed8 <_fflush_r+0xc>
 8008f24:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <_fflush_r+0x70>)
 8008f26:	429c      	cmp	r4, r3
 8008f28:	d101      	bne.n	8008f2e <_fflush_r+0x62>
 8008f2a:	68ac      	ldr	r4, [r5, #8]
 8008f2c:	e7df      	b.n	8008eee <_fflush_r+0x22>
 8008f2e:	4b04      	ldr	r3, [pc, #16]	; (8008f40 <_fflush_r+0x74>)
 8008f30:	429c      	cmp	r4, r3
 8008f32:	bf08      	it	eq
 8008f34:	68ec      	ldreq	r4, [r5, #12]
 8008f36:	e7da      	b.n	8008eee <_fflush_r+0x22>
 8008f38:	0800a6fc 	.word	0x0800a6fc
 8008f3c:	0800a71c 	.word	0x0800a71c
 8008f40:	0800a6dc 	.word	0x0800a6dc

08008f44 <std>:
 8008f44:	2300      	movs	r3, #0
 8008f46:	b510      	push	{r4, lr}
 8008f48:	4604      	mov	r4, r0
 8008f4a:	e9c0 3300 	strd	r3, r3, [r0]
 8008f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f52:	6083      	str	r3, [r0, #8]
 8008f54:	8181      	strh	r1, [r0, #12]
 8008f56:	6643      	str	r3, [r0, #100]	; 0x64
 8008f58:	81c2      	strh	r2, [r0, #14]
 8008f5a:	6183      	str	r3, [r0, #24]
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	2208      	movs	r2, #8
 8008f60:	305c      	adds	r0, #92	; 0x5c
 8008f62:	f7fb fdcd 	bl	8004b00 <memset>
 8008f66:	4b05      	ldr	r3, [pc, #20]	; (8008f7c <std+0x38>)
 8008f68:	6263      	str	r3, [r4, #36]	; 0x24
 8008f6a:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <std+0x3c>)
 8008f6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f6e:	4b05      	ldr	r3, [pc, #20]	; (8008f84 <std+0x40>)
 8008f70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f72:	4b05      	ldr	r3, [pc, #20]	; (8008f88 <std+0x44>)
 8008f74:	6224      	str	r4, [r4, #32]
 8008f76:	6323      	str	r3, [r4, #48]	; 0x30
 8008f78:	bd10      	pop	{r4, pc}
 8008f7a:	bf00      	nop
 8008f7c:	08009299 	.word	0x08009299
 8008f80:	080092bb 	.word	0x080092bb
 8008f84:	080092f3 	.word	0x080092f3
 8008f88:	08009317 	.word	0x08009317

08008f8c <_cleanup_r>:
 8008f8c:	4901      	ldr	r1, [pc, #4]	; (8008f94 <_cleanup_r+0x8>)
 8008f8e:	f000 b8af 	b.w	80090f0 <_fwalk_reent>
 8008f92:	bf00      	nop
 8008f94:	08008ecd 	.word	0x08008ecd

08008f98 <__sfmoreglue>:
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	2268      	movs	r2, #104	; 0x68
 8008f9c:	1e4d      	subs	r5, r1, #1
 8008f9e:	4355      	muls	r5, r2
 8008fa0:	460e      	mov	r6, r1
 8008fa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008fa6:	f7ff fa59 	bl	800845c <_malloc_r>
 8008faa:	4604      	mov	r4, r0
 8008fac:	b140      	cbz	r0, 8008fc0 <__sfmoreglue+0x28>
 8008fae:	2100      	movs	r1, #0
 8008fb0:	e9c0 1600 	strd	r1, r6, [r0]
 8008fb4:	300c      	adds	r0, #12
 8008fb6:	60a0      	str	r0, [r4, #8]
 8008fb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008fbc:	f7fb fda0 	bl	8004b00 <memset>
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	bd70      	pop	{r4, r5, r6, pc}

08008fc4 <__sfp_lock_acquire>:
 8008fc4:	4801      	ldr	r0, [pc, #4]	; (8008fcc <__sfp_lock_acquire+0x8>)
 8008fc6:	f000 b8b3 	b.w	8009130 <__retarget_lock_acquire_recursive>
 8008fca:	bf00      	nop
 8008fcc:	20000389 	.word	0x20000389

08008fd0 <__sfp_lock_release>:
 8008fd0:	4801      	ldr	r0, [pc, #4]	; (8008fd8 <__sfp_lock_release+0x8>)
 8008fd2:	f000 b8ae 	b.w	8009132 <__retarget_lock_release_recursive>
 8008fd6:	bf00      	nop
 8008fd8:	20000389 	.word	0x20000389

08008fdc <__sinit_lock_acquire>:
 8008fdc:	4801      	ldr	r0, [pc, #4]	; (8008fe4 <__sinit_lock_acquire+0x8>)
 8008fde:	f000 b8a7 	b.w	8009130 <__retarget_lock_acquire_recursive>
 8008fe2:	bf00      	nop
 8008fe4:	2000038a 	.word	0x2000038a

08008fe8 <__sinit_lock_release>:
 8008fe8:	4801      	ldr	r0, [pc, #4]	; (8008ff0 <__sinit_lock_release+0x8>)
 8008fea:	f000 b8a2 	b.w	8009132 <__retarget_lock_release_recursive>
 8008fee:	bf00      	nop
 8008ff0:	2000038a 	.word	0x2000038a

08008ff4 <__sinit>:
 8008ff4:	b510      	push	{r4, lr}
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	f7ff fff0 	bl	8008fdc <__sinit_lock_acquire>
 8008ffc:	69a3      	ldr	r3, [r4, #24]
 8008ffe:	b11b      	cbz	r3, 8009008 <__sinit+0x14>
 8009000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009004:	f7ff bff0 	b.w	8008fe8 <__sinit_lock_release>
 8009008:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800900c:	6523      	str	r3, [r4, #80]	; 0x50
 800900e:	4b13      	ldr	r3, [pc, #76]	; (800905c <__sinit+0x68>)
 8009010:	4a13      	ldr	r2, [pc, #76]	; (8009060 <__sinit+0x6c>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	62a2      	str	r2, [r4, #40]	; 0x28
 8009016:	42a3      	cmp	r3, r4
 8009018:	bf04      	itt	eq
 800901a:	2301      	moveq	r3, #1
 800901c:	61a3      	streq	r3, [r4, #24]
 800901e:	4620      	mov	r0, r4
 8009020:	f000 f820 	bl	8009064 <__sfp>
 8009024:	6060      	str	r0, [r4, #4]
 8009026:	4620      	mov	r0, r4
 8009028:	f000 f81c 	bl	8009064 <__sfp>
 800902c:	60a0      	str	r0, [r4, #8]
 800902e:	4620      	mov	r0, r4
 8009030:	f000 f818 	bl	8009064 <__sfp>
 8009034:	2200      	movs	r2, #0
 8009036:	60e0      	str	r0, [r4, #12]
 8009038:	2104      	movs	r1, #4
 800903a:	6860      	ldr	r0, [r4, #4]
 800903c:	f7ff ff82 	bl	8008f44 <std>
 8009040:	68a0      	ldr	r0, [r4, #8]
 8009042:	2201      	movs	r2, #1
 8009044:	2109      	movs	r1, #9
 8009046:	f7ff ff7d 	bl	8008f44 <std>
 800904a:	68e0      	ldr	r0, [r4, #12]
 800904c:	2202      	movs	r2, #2
 800904e:	2112      	movs	r1, #18
 8009050:	f7ff ff78 	bl	8008f44 <std>
 8009054:	2301      	movs	r3, #1
 8009056:	61a3      	str	r3, [r4, #24]
 8009058:	e7d2      	b.n	8009000 <__sinit+0xc>
 800905a:	bf00      	nop
 800905c:	0800a294 	.word	0x0800a294
 8009060:	08008f8d 	.word	0x08008f8d

08009064 <__sfp>:
 8009064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009066:	4607      	mov	r7, r0
 8009068:	f7ff ffac 	bl	8008fc4 <__sfp_lock_acquire>
 800906c:	4b1e      	ldr	r3, [pc, #120]	; (80090e8 <__sfp+0x84>)
 800906e:	681e      	ldr	r6, [r3, #0]
 8009070:	69b3      	ldr	r3, [r6, #24]
 8009072:	b913      	cbnz	r3, 800907a <__sfp+0x16>
 8009074:	4630      	mov	r0, r6
 8009076:	f7ff ffbd 	bl	8008ff4 <__sinit>
 800907a:	3648      	adds	r6, #72	; 0x48
 800907c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009080:	3b01      	subs	r3, #1
 8009082:	d503      	bpl.n	800908c <__sfp+0x28>
 8009084:	6833      	ldr	r3, [r6, #0]
 8009086:	b30b      	cbz	r3, 80090cc <__sfp+0x68>
 8009088:	6836      	ldr	r6, [r6, #0]
 800908a:	e7f7      	b.n	800907c <__sfp+0x18>
 800908c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009090:	b9d5      	cbnz	r5, 80090c8 <__sfp+0x64>
 8009092:	4b16      	ldr	r3, [pc, #88]	; (80090ec <__sfp+0x88>)
 8009094:	60e3      	str	r3, [r4, #12]
 8009096:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800909a:	6665      	str	r5, [r4, #100]	; 0x64
 800909c:	f000 f847 	bl	800912e <__retarget_lock_init_recursive>
 80090a0:	f7ff ff96 	bl	8008fd0 <__sfp_lock_release>
 80090a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80090a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80090ac:	6025      	str	r5, [r4, #0]
 80090ae:	61a5      	str	r5, [r4, #24]
 80090b0:	2208      	movs	r2, #8
 80090b2:	4629      	mov	r1, r5
 80090b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80090b8:	f7fb fd22 	bl	8004b00 <memset>
 80090bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80090c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80090c4:	4620      	mov	r0, r4
 80090c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c8:	3468      	adds	r4, #104	; 0x68
 80090ca:	e7d9      	b.n	8009080 <__sfp+0x1c>
 80090cc:	2104      	movs	r1, #4
 80090ce:	4638      	mov	r0, r7
 80090d0:	f7ff ff62 	bl	8008f98 <__sfmoreglue>
 80090d4:	4604      	mov	r4, r0
 80090d6:	6030      	str	r0, [r6, #0]
 80090d8:	2800      	cmp	r0, #0
 80090da:	d1d5      	bne.n	8009088 <__sfp+0x24>
 80090dc:	f7ff ff78 	bl	8008fd0 <__sfp_lock_release>
 80090e0:	230c      	movs	r3, #12
 80090e2:	603b      	str	r3, [r7, #0]
 80090e4:	e7ee      	b.n	80090c4 <__sfp+0x60>
 80090e6:	bf00      	nop
 80090e8:	0800a294 	.word	0x0800a294
 80090ec:	ffff0001 	.word	0xffff0001

080090f0 <_fwalk_reent>:
 80090f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090f4:	4606      	mov	r6, r0
 80090f6:	4688      	mov	r8, r1
 80090f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090fc:	2700      	movs	r7, #0
 80090fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009102:	f1b9 0901 	subs.w	r9, r9, #1
 8009106:	d505      	bpl.n	8009114 <_fwalk_reent+0x24>
 8009108:	6824      	ldr	r4, [r4, #0]
 800910a:	2c00      	cmp	r4, #0
 800910c:	d1f7      	bne.n	80090fe <_fwalk_reent+0xe>
 800910e:	4638      	mov	r0, r7
 8009110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009114:	89ab      	ldrh	r3, [r5, #12]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d907      	bls.n	800912a <_fwalk_reent+0x3a>
 800911a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800911e:	3301      	adds	r3, #1
 8009120:	d003      	beq.n	800912a <_fwalk_reent+0x3a>
 8009122:	4629      	mov	r1, r5
 8009124:	4630      	mov	r0, r6
 8009126:	47c0      	blx	r8
 8009128:	4307      	orrs	r7, r0
 800912a:	3568      	adds	r5, #104	; 0x68
 800912c:	e7e9      	b.n	8009102 <_fwalk_reent+0x12>

0800912e <__retarget_lock_init_recursive>:
 800912e:	4770      	bx	lr

08009130 <__retarget_lock_acquire_recursive>:
 8009130:	4770      	bx	lr

08009132 <__retarget_lock_release_recursive>:
 8009132:	4770      	bx	lr

08009134 <__swhatbuf_r>:
 8009134:	b570      	push	{r4, r5, r6, lr}
 8009136:	460e      	mov	r6, r1
 8009138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800913c:	2900      	cmp	r1, #0
 800913e:	b096      	sub	sp, #88	; 0x58
 8009140:	4614      	mov	r4, r2
 8009142:	461d      	mov	r5, r3
 8009144:	da08      	bge.n	8009158 <__swhatbuf_r+0x24>
 8009146:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	602a      	str	r2, [r5, #0]
 800914e:	061a      	lsls	r2, r3, #24
 8009150:	d410      	bmi.n	8009174 <__swhatbuf_r+0x40>
 8009152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009156:	e00e      	b.n	8009176 <__swhatbuf_r+0x42>
 8009158:	466a      	mov	r2, sp
 800915a:	f000 f903 	bl	8009364 <_fstat_r>
 800915e:	2800      	cmp	r0, #0
 8009160:	dbf1      	blt.n	8009146 <__swhatbuf_r+0x12>
 8009162:	9a01      	ldr	r2, [sp, #4]
 8009164:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009168:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800916c:	425a      	negs	r2, r3
 800916e:	415a      	adcs	r2, r3
 8009170:	602a      	str	r2, [r5, #0]
 8009172:	e7ee      	b.n	8009152 <__swhatbuf_r+0x1e>
 8009174:	2340      	movs	r3, #64	; 0x40
 8009176:	2000      	movs	r0, #0
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	b016      	add	sp, #88	; 0x58
 800917c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009180 <__smakebuf_r>:
 8009180:	898b      	ldrh	r3, [r1, #12]
 8009182:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009184:	079d      	lsls	r5, r3, #30
 8009186:	4606      	mov	r6, r0
 8009188:	460c      	mov	r4, r1
 800918a:	d507      	bpl.n	800919c <__smakebuf_r+0x1c>
 800918c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	6123      	str	r3, [r4, #16]
 8009194:	2301      	movs	r3, #1
 8009196:	6163      	str	r3, [r4, #20]
 8009198:	b002      	add	sp, #8
 800919a:	bd70      	pop	{r4, r5, r6, pc}
 800919c:	ab01      	add	r3, sp, #4
 800919e:	466a      	mov	r2, sp
 80091a0:	f7ff ffc8 	bl	8009134 <__swhatbuf_r>
 80091a4:	9900      	ldr	r1, [sp, #0]
 80091a6:	4605      	mov	r5, r0
 80091a8:	4630      	mov	r0, r6
 80091aa:	f7ff f957 	bl	800845c <_malloc_r>
 80091ae:	b948      	cbnz	r0, 80091c4 <__smakebuf_r+0x44>
 80091b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b4:	059a      	lsls	r2, r3, #22
 80091b6:	d4ef      	bmi.n	8009198 <__smakebuf_r+0x18>
 80091b8:	f023 0303 	bic.w	r3, r3, #3
 80091bc:	f043 0302 	orr.w	r3, r3, #2
 80091c0:	81a3      	strh	r3, [r4, #12]
 80091c2:	e7e3      	b.n	800918c <__smakebuf_r+0xc>
 80091c4:	4b0d      	ldr	r3, [pc, #52]	; (80091fc <__smakebuf_r+0x7c>)
 80091c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	6020      	str	r0, [r4, #0]
 80091cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d0:	81a3      	strh	r3, [r4, #12]
 80091d2:	9b00      	ldr	r3, [sp, #0]
 80091d4:	6163      	str	r3, [r4, #20]
 80091d6:	9b01      	ldr	r3, [sp, #4]
 80091d8:	6120      	str	r0, [r4, #16]
 80091da:	b15b      	cbz	r3, 80091f4 <__smakebuf_r+0x74>
 80091dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091e0:	4630      	mov	r0, r6
 80091e2:	f000 f8d1 	bl	8009388 <_isatty_r>
 80091e6:	b128      	cbz	r0, 80091f4 <__smakebuf_r+0x74>
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	f023 0303 	bic.w	r3, r3, #3
 80091ee:	f043 0301 	orr.w	r3, r3, #1
 80091f2:	81a3      	strh	r3, [r4, #12]
 80091f4:	89a0      	ldrh	r0, [r4, #12]
 80091f6:	4305      	orrs	r5, r0
 80091f8:	81a5      	strh	r5, [r4, #12]
 80091fa:	e7cd      	b.n	8009198 <__smakebuf_r+0x18>
 80091fc:	08008f8d 	.word	0x08008f8d

08009200 <_malloc_usable_size_r>:
 8009200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009204:	1f18      	subs	r0, r3, #4
 8009206:	2b00      	cmp	r3, #0
 8009208:	bfbc      	itt	lt
 800920a:	580b      	ldrlt	r3, [r1, r0]
 800920c:	18c0      	addlt	r0, r0, r3
 800920e:	4770      	bx	lr

08009210 <_raise_r>:
 8009210:	291f      	cmp	r1, #31
 8009212:	b538      	push	{r3, r4, r5, lr}
 8009214:	4604      	mov	r4, r0
 8009216:	460d      	mov	r5, r1
 8009218:	d904      	bls.n	8009224 <_raise_r+0x14>
 800921a:	2316      	movs	r3, #22
 800921c:	6003      	str	r3, [r0, #0]
 800921e:	f04f 30ff 	mov.w	r0, #4294967295
 8009222:	bd38      	pop	{r3, r4, r5, pc}
 8009224:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009226:	b112      	cbz	r2, 800922e <_raise_r+0x1e>
 8009228:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800922c:	b94b      	cbnz	r3, 8009242 <_raise_r+0x32>
 800922e:	4620      	mov	r0, r4
 8009230:	f000 f830 	bl	8009294 <_getpid_r>
 8009234:	462a      	mov	r2, r5
 8009236:	4601      	mov	r1, r0
 8009238:	4620      	mov	r0, r4
 800923a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800923e:	f000 b817 	b.w	8009270 <_kill_r>
 8009242:	2b01      	cmp	r3, #1
 8009244:	d00a      	beq.n	800925c <_raise_r+0x4c>
 8009246:	1c59      	adds	r1, r3, #1
 8009248:	d103      	bne.n	8009252 <_raise_r+0x42>
 800924a:	2316      	movs	r3, #22
 800924c:	6003      	str	r3, [r0, #0]
 800924e:	2001      	movs	r0, #1
 8009250:	e7e7      	b.n	8009222 <_raise_r+0x12>
 8009252:	2400      	movs	r4, #0
 8009254:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009258:	4628      	mov	r0, r5
 800925a:	4798      	blx	r3
 800925c:	2000      	movs	r0, #0
 800925e:	e7e0      	b.n	8009222 <_raise_r+0x12>

08009260 <raise>:
 8009260:	4b02      	ldr	r3, [pc, #8]	; (800926c <raise+0xc>)
 8009262:	4601      	mov	r1, r0
 8009264:	6818      	ldr	r0, [r3, #0]
 8009266:	f7ff bfd3 	b.w	8009210 <_raise_r>
 800926a:	bf00      	nop
 800926c:	2000000c 	.word	0x2000000c

08009270 <_kill_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	4d07      	ldr	r5, [pc, #28]	; (8009290 <_kill_r+0x20>)
 8009274:	2300      	movs	r3, #0
 8009276:	4604      	mov	r4, r0
 8009278:	4608      	mov	r0, r1
 800927a:	4611      	mov	r1, r2
 800927c:	602b      	str	r3, [r5, #0]
 800927e:	f7f8 fe63 	bl	8001f48 <_kill>
 8009282:	1c43      	adds	r3, r0, #1
 8009284:	d102      	bne.n	800928c <_kill_r+0x1c>
 8009286:	682b      	ldr	r3, [r5, #0]
 8009288:	b103      	cbz	r3, 800928c <_kill_r+0x1c>
 800928a:	6023      	str	r3, [r4, #0]
 800928c:	bd38      	pop	{r3, r4, r5, pc}
 800928e:	bf00      	nop
 8009290:	20000384 	.word	0x20000384

08009294 <_getpid_r>:
 8009294:	f7f8 be50 	b.w	8001f38 <_getpid>

08009298 <__sread>:
 8009298:	b510      	push	{r4, lr}
 800929a:	460c      	mov	r4, r1
 800929c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a0:	f000 f894 	bl	80093cc <_read_r>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	bfab      	itete	ge
 80092a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092aa:	89a3      	ldrhlt	r3, [r4, #12]
 80092ac:	181b      	addge	r3, r3, r0
 80092ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092b2:	bfac      	ite	ge
 80092b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80092b6:	81a3      	strhlt	r3, [r4, #12]
 80092b8:	bd10      	pop	{r4, pc}

080092ba <__swrite>:
 80092ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092be:	461f      	mov	r7, r3
 80092c0:	898b      	ldrh	r3, [r1, #12]
 80092c2:	05db      	lsls	r3, r3, #23
 80092c4:	4605      	mov	r5, r0
 80092c6:	460c      	mov	r4, r1
 80092c8:	4616      	mov	r6, r2
 80092ca:	d505      	bpl.n	80092d8 <__swrite+0x1e>
 80092cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d0:	2302      	movs	r3, #2
 80092d2:	2200      	movs	r2, #0
 80092d4:	f000 f868 	bl	80093a8 <_lseek_r>
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092e2:	81a3      	strh	r3, [r4, #12]
 80092e4:	4632      	mov	r2, r6
 80092e6:	463b      	mov	r3, r7
 80092e8:	4628      	mov	r0, r5
 80092ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092ee:	f000 b817 	b.w	8009320 <_write_r>

080092f2 <__sseek>:
 80092f2:	b510      	push	{r4, lr}
 80092f4:	460c      	mov	r4, r1
 80092f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092fa:	f000 f855 	bl	80093a8 <_lseek_r>
 80092fe:	1c43      	adds	r3, r0, #1
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	bf15      	itete	ne
 8009304:	6560      	strne	r0, [r4, #84]	; 0x54
 8009306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800930a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800930e:	81a3      	strheq	r3, [r4, #12]
 8009310:	bf18      	it	ne
 8009312:	81a3      	strhne	r3, [r4, #12]
 8009314:	bd10      	pop	{r4, pc}

08009316 <__sclose>:
 8009316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800931a:	f000 b813 	b.w	8009344 <_close_r>
	...

08009320 <_write_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4d07      	ldr	r5, [pc, #28]	; (8009340 <_write_r+0x20>)
 8009324:	4604      	mov	r4, r0
 8009326:	4608      	mov	r0, r1
 8009328:	4611      	mov	r1, r2
 800932a:	2200      	movs	r2, #0
 800932c:	602a      	str	r2, [r5, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	f7f8 fe41 	bl	8001fb6 <_write>
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	d102      	bne.n	800933e <_write_r+0x1e>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	b103      	cbz	r3, 800933e <_write_r+0x1e>
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	bd38      	pop	{r3, r4, r5, pc}
 8009340:	20000384 	.word	0x20000384

08009344 <_close_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4d06      	ldr	r5, [pc, #24]	; (8009360 <_close_r+0x1c>)
 8009348:	2300      	movs	r3, #0
 800934a:	4604      	mov	r4, r0
 800934c:	4608      	mov	r0, r1
 800934e:	602b      	str	r3, [r5, #0]
 8009350:	f7f8 fe4d 	bl	8001fee <_close>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_close_r+0x1a>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	b103      	cbz	r3, 800935e <_close_r+0x1a>
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	20000384 	.word	0x20000384

08009364 <_fstat_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4d07      	ldr	r5, [pc, #28]	; (8009384 <_fstat_r+0x20>)
 8009368:	2300      	movs	r3, #0
 800936a:	4604      	mov	r4, r0
 800936c:	4608      	mov	r0, r1
 800936e:	4611      	mov	r1, r2
 8009370:	602b      	str	r3, [r5, #0]
 8009372:	f7f8 fe48 	bl	8002006 <_fstat>
 8009376:	1c43      	adds	r3, r0, #1
 8009378:	d102      	bne.n	8009380 <_fstat_r+0x1c>
 800937a:	682b      	ldr	r3, [r5, #0]
 800937c:	b103      	cbz	r3, 8009380 <_fstat_r+0x1c>
 800937e:	6023      	str	r3, [r4, #0]
 8009380:	bd38      	pop	{r3, r4, r5, pc}
 8009382:	bf00      	nop
 8009384:	20000384 	.word	0x20000384

08009388 <_isatty_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4d06      	ldr	r5, [pc, #24]	; (80093a4 <_isatty_r+0x1c>)
 800938c:	2300      	movs	r3, #0
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	602b      	str	r3, [r5, #0]
 8009394:	f7f8 fe47 	bl	8002026 <_isatty>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_isatty_r+0x1a>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_isatty_r+0x1a>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	20000384 	.word	0x20000384

080093a8 <_lseek_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4d07      	ldr	r5, [pc, #28]	; (80093c8 <_lseek_r+0x20>)
 80093ac:	4604      	mov	r4, r0
 80093ae:	4608      	mov	r0, r1
 80093b0:	4611      	mov	r1, r2
 80093b2:	2200      	movs	r2, #0
 80093b4:	602a      	str	r2, [r5, #0]
 80093b6:	461a      	mov	r2, r3
 80093b8:	f7f8 fe40 	bl	800203c <_lseek>
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	d102      	bne.n	80093c6 <_lseek_r+0x1e>
 80093c0:	682b      	ldr	r3, [r5, #0]
 80093c2:	b103      	cbz	r3, 80093c6 <_lseek_r+0x1e>
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	bd38      	pop	{r3, r4, r5, pc}
 80093c8:	20000384 	.word	0x20000384

080093cc <_read_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	4d07      	ldr	r5, [pc, #28]	; (80093ec <_read_r+0x20>)
 80093d0:	4604      	mov	r4, r0
 80093d2:	4608      	mov	r0, r1
 80093d4:	4611      	mov	r1, r2
 80093d6:	2200      	movs	r2, #0
 80093d8:	602a      	str	r2, [r5, #0]
 80093da:	461a      	mov	r2, r3
 80093dc:	f7f8 fdce 	bl	8001f7c <_read>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d102      	bne.n	80093ea <_read_r+0x1e>
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	b103      	cbz	r3, 80093ea <_read_r+0x1e>
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	20000384 	.word	0x20000384

080093f0 <pow>:
 80093f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f2:	ed2d 8b02 	vpush	{d8}
 80093f6:	eeb0 8a40 	vmov.f32	s16, s0
 80093fa:	eef0 8a60 	vmov.f32	s17, s1
 80093fe:	ec55 4b11 	vmov	r4, r5, d1
 8009402:	f000 f865 	bl	80094d0 <__ieee754_pow>
 8009406:	4622      	mov	r2, r4
 8009408:	462b      	mov	r3, r5
 800940a:	4620      	mov	r0, r4
 800940c:	4629      	mov	r1, r5
 800940e:	ec57 6b10 	vmov	r6, r7, d0
 8009412:	f7f7 fb8b 	bl	8000b2c <__aeabi_dcmpun>
 8009416:	2800      	cmp	r0, #0
 8009418:	d13b      	bne.n	8009492 <pow+0xa2>
 800941a:	ec51 0b18 	vmov	r0, r1, d8
 800941e:	2200      	movs	r2, #0
 8009420:	2300      	movs	r3, #0
 8009422:	f7f7 fb51 	bl	8000ac8 <__aeabi_dcmpeq>
 8009426:	b1b8      	cbz	r0, 8009458 <pow+0x68>
 8009428:	2200      	movs	r2, #0
 800942a:	2300      	movs	r3, #0
 800942c:	4620      	mov	r0, r4
 800942e:	4629      	mov	r1, r5
 8009430:	f7f7 fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009434:	2800      	cmp	r0, #0
 8009436:	d146      	bne.n	80094c6 <pow+0xd6>
 8009438:	ec45 4b10 	vmov	d0, r4, r5
 800943c:	f000 fe61 	bl	800a102 <finite>
 8009440:	b338      	cbz	r0, 8009492 <pow+0xa2>
 8009442:	2200      	movs	r2, #0
 8009444:	2300      	movs	r3, #0
 8009446:	4620      	mov	r0, r4
 8009448:	4629      	mov	r1, r5
 800944a:	f7f7 fb47 	bl	8000adc <__aeabi_dcmplt>
 800944e:	b300      	cbz	r0, 8009492 <pow+0xa2>
 8009450:	f7fb fb2c 	bl	8004aac <__errno>
 8009454:	2322      	movs	r3, #34	; 0x22
 8009456:	e01b      	b.n	8009490 <pow+0xa0>
 8009458:	ec47 6b10 	vmov	d0, r6, r7
 800945c:	f000 fe51 	bl	800a102 <finite>
 8009460:	b9e0      	cbnz	r0, 800949c <pow+0xac>
 8009462:	eeb0 0a48 	vmov.f32	s0, s16
 8009466:	eef0 0a68 	vmov.f32	s1, s17
 800946a:	f000 fe4a 	bl	800a102 <finite>
 800946e:	b1a8      	cbz	r0, 800949c <pow+0xac>
 8009470:	ec45 4b10 	vmov	d0, r4, r5
 8009474:	f000 fe45 	bl	800a102 <finite>
 8009478:	b180      	cbz	r0, 800949c <pow+0xac>
 800947a:	4632      	mov	r2, r6
 800947c:	463b      	mov	r3, r7
 800947e:	4630      	mov	r0, r6
 8009480:	4639      	mov	r1, r7
 8009482:	f7f7 fb53 	bl	8000b2c <__aeabi_dcmpun>
 8009486:	2800      	cmp	r0, #0
 8009488:	d0e2      	beq.n	8009450 <pow+0x60>
 800948a:	f7fb fb0f 	bl	8004aac <__errno>
 800948e:	2321      	movs	r3, #33	; 0x21
 8009490:	6003      	str	r3, [r0, #0]
 8009492:	ecbd 8b02 	vpop	{d8}
 8009496:	ec47 6b10 	vmov	d0, r6, r7
 800949a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800949c:	2200      	movs	r2, #0
 800949e:	2300      	movs	r3, #0
 80094a0:	4630      	mov	r0, r6
 80094a2:	4639      	mov	r1, r7
 80094a4:	f7f7 fb10 	bl	8000ac8 <__aeabi_dcmpeq>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d0f2      	beq.n	8009492 <pow+0xa2>
 80094ac:	eeb0 0a48 	vmov.f32	s0, s16
 80094b0:	eef0 0a68 	vmov.f32	s1, s17
 80094b4:	f000 fe25 	bl	800a102 <finite>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d0ea      	beq.n	8009492 <pow+0xa2>
 80094bc:	ec45 4b10 	vmov	d0, r4, r5
 80094c0:	f000 fe1f 	bl	800a102 <finite>
 80094c4:	e7c3      	b.n	800944e <pow+0x5e>
 80094c6:	4f01      	ldr	r7, [pc, #4]	; (80094cc <pow+0xdc>)
 80094c8:	2600      	movs	r6, #0
 80094ca:	e7e2      	b.n	8009492 <pow+0xa2>
 80094cc:	3ff00000 	.word	0x3ff00000

080094d0 <__ieee754_pow>:
 80094d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d4:	ed2d 8b06 	vpush	{d8-d10}
 80094d8:	b089      	sub	sp, #36	; 0x24
 80094da:	ed8d 1b00 	vstr	d1, [sp]
 80094de:	e9dd 2900 	ldrd	r2, r9, [sp]
 80094e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80094e6:	ea58 0102 	orrs.w	r1, r8, r2
 80094ea:	ec57 6b10 	vmov	r6, r7, d0
 80094ee:	d115      	bne.n	800951c <__ieee754_pow+0x4c>
 80094f0:	19b3      	adds	r3, r6, r6
 80094f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80094f6:	4152      	adcs	r2, r2
 80094f8:	4299      	cmp	r1, r3
 80094fa:	4b89      	ldr	r3, [pc, #548]	; (8009720 <__ieee754_pow+0x250>)
 80094fc:	4193      	sbcs	r3, r2
 80094fe:	f080 84d2 	bcs.w	8009ea6 <__ieee754_pow+0x9d6>
 8009502:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009506:	4630      	mov	r0, r6
 8009508:	4639      	mov	r1, r7
 800950a:	f7f6 febf 	bl	800028c <__adddf3>
 800950e:	ec41 0b10 	vmov	d0, r0, r1
 8009512:	b009      	add	sp, #36	; 0x24
 8009514:	ecbd 8b06 	vpop	{d8-d10}
 8009518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951c:	4b81      	ldr	r3, [pc, #516]	; (8009724 <__ieee754_pow+0x254>)
 800951e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009522:	429c      	cmp	r4, r3
 8009524:	ee10 aa10 	vmov	sl, s0
 8009528:	463d      	mov	r5, r7
 800952a:	dc06      	bgt.n	800953a <__ieee754_pow+0x6a>
 800952c:	d101      	bne.n	8009532 <__ieee754_pow+0x62>
 800952e:	2e00      	cmp	r6, #0
 8009530:	d1e7      	bne.n	8009502 <__ieee754_pow+0x32>
 8009532:	4598      	cmp	r8, r3
 8009534:	dc01      	bgt.n	800953a <__ieee754_pow+0x6a>
 8009536:	d10f      	bne.n	8009558 <__ieee754_pow+0x88>
 8009538:	b172      	cbz	r2, 8009558 <__ieee754_pow+0x88>
 800953a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800953e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009542:	ea55 050a 	orrs.w	r5, r5, sl
 8009546:	d1dc      	bne.n	8009502 <__ieee754_pow+0x32>
 8009548:	e9dd 3200 	ldrd	r3, r2, [sp]
 800954c:	18db      	adds	r3, r3, r3
 800954e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009552:	4152      	adcs	r2, r2
 8009554:	429d      	cmp	r5, r3
 8009556:	e7d0      	b.n	80094fa <__ieee754_pow+0x2a>
 8009558:	2d00      	cmp	r5, #0
 800955a:	da3b      	bge.n	80095d4 <__ieee754_pow+0x104>
 800955c:	4b72      	ldr	r3, [pc, #456]	; (8009728 <__ieee754_pow+0x258>)
 800955e:	4598      	cmp	r8, r3
 8009560:	dc51      	bgt.n	8009606 <__ieee754_pow+0x136>
 8009562:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009566:	4598      	cmp	r8, r3
 8009568:	f340 84ac 	ble.w	8009ec4 <__ieee754_pow+0x9f4>
 800956c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009570:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009574:	2b14      	cmp	r3, #20
 8009576:	dd0f      	ble.n	8009598 <__ieee754_pow+0xc8>
 8009578:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800957c:	fa22 f103 	lsr.w	r1, r2, r3
 8009580:	fa01 f303 	lsl.w	r3, r1, r3
 8009584:	4293      	cmp	r3, r2
 8009586:	f040 849d 	bne.w	8009ec4 <__ieee754_pow+0x9f4>
 800958a:	f001 0101 	and.w	r1, r1, #1
 800958e:	f1c1 0302 	rsb	r3, r1, #2
 8009592:	9304      	str	r3, [sp, #16]
 8009594:	b182      	cbz	r2, 80095b8 <__ieee754_pow+0xe8>
 8009596:	e05f      	b.n	8009658 <__ieee754_pow+0x188>
 8009598:	2a00      	cmp	r2, #0
 800959a:	d15b      	bne.n	8009654 <__ieee754_pow+0x184>
 800959c:	f1c3 0314 	rsb	r3, r3, #20
 80095a0:	fa48 f103 	asr.w	r1, r8, r3
 80095a4:	fa01 f303 	lsl.w	r3, r1, r3
 80095a8:	4543      	cmp	r3, r8
 80095aa:	f040 8488 	bne.w	8009ebe <__ieee754_pow+0x9ee>
 80095ae:	f001 0101 	and.w	r1, r1, #1
 80095b2:	f1c1 0302 	rsb	r3, r1, #2
 80095b6:	9304      	str	r3, [sp, #16]
 80095b8:	4b5c      	ldr	r3, [pc, #368]	; (800972c <__ieee754_pow+0x25c>)
 80095ba:	4598      	cmp	r8, r3
 80095bc:	d132      	bne.n	8009624 <__ieee754_pow+0x154>
 80095be:	f1b9 0f00 	cmp.w	r9, #0
 80095c2:	f280 8478 	bge.w	8009eb6 <__ieee754_pow+0x9e6>
 80095c6:	4959      	ldr	r1, [pc, #356]	; (800972c <__ieee754_pow+0x25c>)
 80095c8:	4632      	mov	r2, r6
 80095ca:	463b      	mov	r3, r7
 80095cc:	2000      	movs	r0, #0
 80095ce:	f7f7 f93d 	bl	800084c <__aeabi_ddiv>
 80095d2:	e79c      	b.n	800950e <__ieee754_pow+0x3e>
 80095d4:	2300      	movs	r3, #0
 80095d6:	9304      	str	r3, [sp, #16]
 80095d8:	2a00      	cmp	r2, #0
 80095da:	d13d      	bne.n	8009658 <__ieee754_pow+0x188>
 80095dc:	4b51      	ldr	r3, [pc, #324]	; (8009724 <__ieee754_pow+0x254>)
 80095de:	4598      	cmp	r8, r3
 80095e0:	d1ea      	bne.n	80095b8 <__ieee754_pow+0xe8>
 80095e2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80095e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80095ea:	ea53 030a 	orrs.w	r3, r3, sl
 80095ee:	f000 845a 	beq.w	8009ea6 <__ieee754_pow+0x9d6>
 80095f2:	4b4f      	ldr	r3, [pc, #316]	; (8009730 <__ieee754_pow+0x260>)
 80095f4:	429c      	cmp	r4, r3
 80095f6:	dd08      	ble.n	800960a <__ieee754_pow+0x13a>
 80095f8:	f1b9 0f00 	cmp.w	r9, #0
 80095fc:	f2c0 8457 	blt.w	8009eae <__ieee754_pow+0x9de>
 8009600:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009604:	e783      	b.n	800950e <__ieee754_pow+0x3e>
 8009606:	2302      	movs	r3, #2
 8009608:	e7e5      	b.n	80095d6 <__ieee754_pow+0x106>
 800960a:	f1b9 0f00 	cmp.w	r9, #0
 800960e:	f04f 0000 	mov.w	r0, #0
 8009612:	f04f 0100 	mov.w	r1, #0
 8009616:	f6bf af7a 	bge.w	800950e <__ieee754_pow+0x3e>
 800961a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800961e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009622:	e774      	b.n	800950e <__ieee754_pow+0x3e>
 8009624:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009628:	d106      	bne.n	8009638 <__ieee754_pow+0x168>
 800962a:	4632      	mov	r2, r6
 800962c:	463b      	mov	r3, r7
 800962e:	4630      	mov	r0, r6
 8009630:	4639      	mov	r1, r7
 8009632:	f7f6 ffe1 	bl	80005f8 <__aeabi_dmul>
 8009636:	e76a      	b.n	800950e <__ieee754_pow+0x3e>
 8009638:	4b3e      	ldr	r3, [pc, #248]	; (8009734 <__ieee754_pow+0x264>)
 800963a:	4599      	cmp	r9, r3
 800963c:	d10c      	bne.n	8009658 <__ieee754_pow+0x188>
 800963e:	2d00      	cmp	r5, #0
 8009640:	db0a      	blt.n	8009658 <__ieee754_pow+0x188>
 8009642:	ec47 6b10 	vmov	d0, r6, r7
 8009646:	b009      	add	sp, #36	; 0x24
 8009648:	ecbd 8b06 	vpop	{d8-d10}
 800964c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009650:	f000 bc6c 	b.w	8009f2c <__ieee754_sqrt>
 8009654:	2300      	movs	r3, #0
 8009656:	9304      	str	r3, [sp, #16]
 8009658:	ec47 6b10 	vmov	d0, r6, r7
 800965c:	f000 fd48 	bl	800a0f0 <fabs>
 8009660:	ec51 0b10 	vmov	r0, r1, d0
 8009664:	f1ba 0f00 	cmp.w	sl, #0
 8009668:	d129      	bne.n	80096be <__ieee754_pow+0x1ee>
 800966a:	b124      	cbz	r4, 8009676 <__ieee754_pow+0x1a6>
 800966c:	4b2f      	ldr	r3, [pc, #188]	; (800972c <__ieee754_pow+0x25c>)
 800966e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009672:	429a      	cmp	r2, r3
 8009674:	d123      	bne.n	80096be <__ieee754_pow+0x1ee>
 8009676:	f1b9 0f00 	cmp.w	r9, #0
 800967a:	da05      	bge.n	8009688 <__ieee754_pow+0x1b8>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	2000      	movs	r0, #0
 8009682:	492a      	ldr	r1, [pc, #168]	; (800972c <__ieee754_pow+0x25c>)
 8009684:	f7f7 f8e2 	bl	800084c <__aeabi_ddiv>
 8009688:	2d00      	cmp	r5, #0
 800968a:	f6bf af40 	bge.w	800950e <__ieee754_pow+0x3e>
 800968e:	9b04      	ldr	r3, [sp, #16]
 8009690:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009694:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009698:	4323      	orrs	r3, r4
 800969a:	d108      	bne.n	80096ae <__ieee754_pow+0x1de>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	4610      	mov	r0, r2
 80096a2:	4619      	mov	r1, r3
 80096a4:	f7f6 fdf0 	bl	8000288 <__aeabi_dsub>
 80096a8:	4602      	mov	r2, r0
 80096aa:	460b      	mov	r3, r1
 80096ac:	e78f      	b.n	80095ce <__ieee754_pow+0xfe>
 80096ae:	9b04      	ldr	r3, [sp, #16]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	f47f af2c 	bne.w	800950e <__ieee754_pow+0x3e>
 80096b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096ba:	4619      	mov	r1, r3
 80096bc:	e727      	b.n	800950e <__ieee754_pow+0x3e>
 80096be:	0feb      	lsrs	r3, r5, #31
 80096c0:	3b01      	subs	r3, #1
 80096c2:	9306      	str	r3, [sp, #24]
 80096c4:	9a06      	ldr	r2, [sp, #24]
 80096c6:	9b04      	ldr	r3, [sp, #16]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	d102      	bne.n	80096d2 <__ieee754_pow+0x202>
 80096cc:	4632      	mov	r2, r6
 80096ce:	463b      	mov	r3, r7
 80096d0:	e7e6      	b.n	80096a0 <__ieee754_pow+0x1d0>
 80096d2:	4b19      	ldr	r3, [pc, #100]	; (8009738 <__ieee754_pow+0x268>)
 80096d4:	4598      	cmp	r8, r3
 80096d6:	f340 80fb 	ble.w	80098d0 <__ieee754_pow+0x400>
 80096da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80096de:	4598      	cmp	r8, r3
 80096e0:	4b13      	ldr	r3, [pc, #76]	; (8009730 <__ieee754_pow+0x260>)
 80096e2:	dd0c      	ble.n	80096fe <__ieee754_pow+0x22e>
 80096e4:	429c      	cmp	r4, r3
 80096e6:	dc0f      	bgt.n	8009708 <__ieee754_pow+0x238>
 80096e8:	f1b9 0f00 	cmp.w	r9, #0
 80096ec:	da0f      	bge.n	800970e <__ieee754_pow+0x23e>
 80096ee:	2000      	movs	r0, #0
 80096f0:	b009      	add	sp, #36	; 0x24
 80096f2:	ecbd 8b06 	vpop	{d8-d10}
 80096f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fa:	f000 bcf0 	b.w	800a0de <__math_oflow>
 80096fe:	429c      	cmp	r4, r3
 8009700:	dbf2      	blt.n	80096e8 <__ieee754_pow+0x218>
 8009702:	4b0a      	ldr	r3, [pc, #40]	; (800972c <__ieee754_pow+0x25c>)
 8009704:	429c      	cmp	r4, r3
 8009706:	dd19      	ble.n	800973c <__ieee754_pow+0x26c>
 8009708:	f1b9 0f00 	cmp.w	r9, #0
 800970c:	dcef      	bgt.n	80096ee <__ieee754_pow+0x21e>
 800970e:	2000      	movs	r0, #0
 8009710:	b009      	add	sp, #36	; 0x24
 8009712:	ecbd 8b06 	vpop	{d8-d10}
 8009716:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971a:	f000 bcd7 	b.w	800a0cc <__math_uflow>
 800971e:	bf00      	nop
 8009720:	fff00000 	.word	0xfff00000
 8009724:	7ff00000 	.word	0x7ff00000
 8009728:	433fffff 	.word	0x433fffff
 800972c:	3ff00000 	.word	0x3ff00000
 8009730:	3fefffff 	.word	0x3fefffff
 8009734:	3fe00000 	.word	0x3fe00000
 8009738:	41e00000 	.word	0x41e00000
 800973c:	4b60      	ldr	r3, [pc, #384]	; (80098c0 <__ieee754_pow+0x3f0>)
 800973e:	2200      	movs	r2, #0
 8009740:	f7f6 fda2 	bl	8000288 <__aeabi_dsub>
 8009744:	a354      	add	r3, pc, #336	; (adr r3, 8009898 <__ieee754_pow+0x3c8>)
 8009746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974a:	4604      	mov	r4, r0
 800974c:	460d      	mov	r5, r1
 800974e:	f7f6 ff53 	bl	80005f8 <__aeabi_dmul>
 8009752:	a353      	add	r3, pc, #332	; (adr r3, 80098a0 <__ieee754_pow+0x3d0>)
 8009754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009758:	4606      	mov	r6, r0
 800975a:	460f      	mov	r7, r1
 800975c:	4620      	mov	r0, r4
 800975e:	4629      	mov	r1, r5
 8009760:	f7f6 ff4a 	bl	80005f8 <__aeabi_dmul>
 8009764:	4b57      	ldr	r3, [pc, #348]	; (80098c4 <__ieee754_pow+0x3f4>)
 8009766:	4682      	mov	sl, r0
 8009768:	468b      	mov	fp, r1
 800976a:	2200      	movs	r2, #0
 800976c:	4620      	mov	r0, r4
 800976e:	4629      	mov	r1, r5
 8009770:	f7f6 ff42 	bl	80005f8 <__aeabi_dmul>
 8009774:	4602      	mov	r2, r0
 8009776:	460b      	mov	r3, r1
 8009778:	a14b      	add	r1, pc, #300	; (adr r1, 80098a8 <__ieee754_pow+0x3d8>)
 800977a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800977e:	f7f6 fd83 	bl	8000288 <__aeabi_dsub>
 8009782:	4622      	mov	r2, r4
 8009784:	462b      	mov	r3, r5
 8009786:	f7f6 ff37 	bl	80005f8 <__aeabi_dmul>
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	2000      	movs	r0, #0
 8009790:	494d      	ldr	r1, [pc, #308]	; (80098c8 <__ieee754_pow+0x3f8>)
 8009792:	f7f6 fd79 	bl	8000288 <__aeabi_dsub>
 8009796:	4622      	mov	r2, r4
 8009798:	4680      	mov	r8, r0
 800979a:	4689      	mov	r9, r1
 800979c:	462b      	mov	r3, r5
 800979e:	4620      	mov	r0, r4
 80097a0:	4629      	mov	r1, r5
 80097a2:	f7f6 ff29 	bl	80005f8 <__aeabi_dmul>
 80097a6:	4602      	mov	r2, r0
 80097a8:	460b      	mov	r3, r1
 80097aa:	4640      	mov	r0, r8
 80097ac:	4649      	mov	r1, r9
 80097ae:	f7f6 ff23 	bl	80005f8 <__aeabi_dmul>
 80097b2:	a33f      	add	r3, pc, #252	; (adr r3, 80098b0 <__ieee754_pow+0x3e0>)
 80097b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b8:	f7f6 ff1e 	bl	80005f8 <__aeabi_dmul>
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	4650      	mov	r0, sl
 80097c2:	4659      	mov	r1, fp
 80097c4:	f7f6 fd60 	bl	8000288 <__aeabi_dsub>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	4680      	mov	r8, r0
 80097ce:	4689      	mov	r9, r1
 80097d0:	4630      	mov	r0, r6
 80097d2:	4639      	mov	r1, r7
 80097d4:	f7f6 fd5a 	bl	800028c <__adddf3>
 80097d8:	2000      	movs	r0, #0
 80097da:	4632      	mov	r2, r6
 80097dc:	463b      	mov	r3, r7
 80097de:	4604      	mov	r4, r0
 80097e0:	460d      	mov	r5, r1
 80097e2:	f7f6 fd51 	bl	8000288 <__aeabi_dsub>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	4640      	mov	r0, r8
 80097ec:	4649      	mov	r1, r9
 80097ee:	f7f6 fd4b 	bl	8000288 <__aeabi_dsub>
 80097f2:	9b04      	ldr	r3, [sp, #16]
 80097f4:	9a06      	ldr	r2, [sp, #24]
 80097f6:	3b01      	subs	r3, #1
 80097f8:	4313      	orrs	r3, r2
 80097fa:	4682      	mov	sl, r0
 80097fc:	468b      	mov	fp, r1
 80097fe:	f040 81e7 	bne.w	8009bd0 <__ieee754_pow+0x700>
 8009802:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80098b8 <__ieee754_pow+0x3e8>
 8009806:	eeb0 8a47 	vmov.f32	s16, s14
 800980a:	eef0 8a67 	vmov.f32	s17, s15
 800980e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009812:	2600      	movs	r6, #0
 8009814:	4632      	mov	r2, r6
 8009816:	463b      	mov	r3, r7
 8009818:	e9dd 0100 	ldrd	r0, r1, [sp]
 800981c:	f7f6 fd34 	bl	8000288 <__aeabi_dsub>
 8009820:	4622      	mov	r2, r4
 8009822:	462b      	mov	r3, r5
 8009824:	f7f6 fee8 	bl	80005f8 <__aeabi_dmul>
 8009828:	e9dd 2300 	ldrd	r2, r3, [sp]
 800982c:	4680      	mov	r8, r0
 800982e:	4689      	mov	r9, r1
 8009830:	4650      	mov	r0, sl
 8009832:	4659      	mov	r1, fp
 8009834:	f7f6 fee0 	bl	80005f8 <__aeabi_dmul>
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	4640      	mov	r0, r8
 800983e:	4649      	mov	r1, r9
 8009840:	f7f6 fd24 	bl	800028c <__adddf3>
 8009844:	4632      	mov	r2, r6
 8009846:	463b      	mov	r3, r7
 8009848:	4680      	mov	r8, r0
 800984a:	4689      	mov	r9, r1
 800984c:	4620      	mov	r0, r4
 800984e:	4629      	mov	r1, r5
 8009850:	f7f6 fed2 	bl	80005f8 <__aeabi_dmul>
 8009854:	460b      	mov	r3, r1
 8009856:	4604      	mov	r4, r0
 8009858:	460d      	mov	r5, r1
 800985a:	4602      	mov	r2, r0
 800985c:	4649      	mov	r1, r9
 800985e:	4640      	mov	r0, r8
 8009860:	f7f6 fd14 	bl	800028c <__adddf3>
 8009864:	4b19      	ldr	r3, [pc, #100]	; (80098cc <__ieee754_pow+0x3fc>)
 8009866:	4299      	cmp	r1, r3
 8009868:	ec45 4b19 	vmov	d9, r4, r5
 800986c:	4606      	mov	r6, r0
 800986e:	460f      	mov	r7, r1
 8009870:	468b      	mov	fp, r1
 8009872:	f340 82f1 	ble.w	8009e58 <__ieee754_pow+0x988>
 8009876:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800987a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800987e:	4303      	orrs	r3, r0
 8009880:	f000 81e4 	beq.w	8009c4c <__ieee754_pow+0x77c>
 8009884:	ec51 0b18 	vmov	r0, r1, d8
 8009888:	2200      	movs	r2, #0
 800988a:	2300      	movs	r3, #0
 800988c:	f7f7 f926 	bl	8000adc <__aeabi_dcmplt>
 8009890:	3800      	subs	r0, #0
 8009892:	bf18      	it	ne
 8009894:	2001      	movne	r0, #1
 8009896:	e72b      	b.n	80096f0 <__ieee754_pow+0x220>
 8009898:	60000000 	.word	0x60000000
 800989c:	3ff71547 	.word	0x3ff71547
 80098a0:	f85ddf44 	.word	0xf85ddf44
 80098a4:	3e54ae0b 	.word	0x3e54ae0b
 80098a8:	55555555 	.word	0x55555555
 80098ac:	3fd55555 	.word	0x3fd55555
 80098b0:	652b82fe 	.word	0x652b82fe
 80098b4:	3ff71547 	.word	0x3ff71547
 80098b8:	00000000 	.word	0x00000000
 80098bc:	bff00000 	.word	0xbff00000
 80098c0:	3ff00000 	.word	0x3ff00000
 80098c4:	3fd00000 	.word	0x3fd00000
 80098c8:	3fe00000 	.word	0x3fe00000
 80098cc:	408fffff 	.word	0x408fffff
 80098d0:	4bd5      	ldr	r3, [pc, #852]	; (8009c28 <__ieee754_pow+0x758>)
 80098d2:	402b      	ands	r3, r5
 80098d4:	2200      	movs	r2, #0
 80098d6:	b92b      	cbnz	r3, 80098e4 <__ieee754_pow+0x414>
 80098d8:	4bd4      	ldr	r3, [pc, #848]	; (8009c2c <__ieee754_pow+0x75c>)
 80098da:	f7f6 fe8d 	bl	80005f8 <__aeabi_dmul>
 80098de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80098e2:	460c      	mov	r4, r1
 80098e4:	1523      	asrs	r3, r4, #20
 80098e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80098ea:	4413      	add	r3, r2
 80098ec:	9305      	str	r3, [sp, #20]
 80098ee:	4bd0      	ldr	r3, [pc, #832]	; (8009c30 <__ieee754_pow+0x760>)
 80098f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80098f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80098f8:	429c      	cmp	r4, r3
 80098fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80098fe:	dd08      	ble.n	8009912 <__ieee754_pow+0x442>
 8009900:	4bcc      	ldr	r3, [pc, #816]	; (8009c34 <__ieee754_pow+0x764>)
 8009902:	429c      	cmp	r4, r3
 8009904:	f340 8162 	ble.w	8009bcc <__ieee754_pow+0x6fc>
 8009908:	9b05      	ldr	r3, [sp, #20]
 800990a:	3301      	adds	r3, #1
 800990c:	9305      	str	r3, [sp, #20]
 800990e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009912:	2400      	movs	r4, #0
 8009914:	00e3      	lsls	r3, r4, #3
 8009916:	9307      	str	r3, [sp, #28]
 8009918:	4bc7      	ldr	r3, [pc, #796]	; (8009c38 <__ieee754_pow+0x768>)
 800991a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800991e:	ed93 7b00 	vldr	d7, [r3]
 8009922:	4629      	mov	r1, r5
 8009924:	ec53 2b17 	vmov	r2, r3, d7
 8009928:	eeb0 9a47 	vmov.f32	s18, s14
 800992c:	eef0 9a67 	vmov.f32	s19, s15
 8009930:	4682      	mov	sl, r0
 8009932:	f7f6 fca9 	bl	8000288 <__aeabi_dsub>
 8009936:	4652      	mov	r2, sl
 8009938:	4606      	mov	r6, r0
 800993a:	460f      	mov	r7, r1
 800993c:	462b      	mov	r3, r5
 800993e:	ec51 0b19 	vmov	r0, r1, d9
 8009942:	f7f6 fca3 	bl	800028c <__adddf3>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	2000      	movs	r0, #0
 800994c:	49bb      	ldr	r1, [pc, #748]	; (8009c3c <__ieee754_pow+0x76c>)
 800994e:	f7f6 ff7d 	bl	800084c <__aeabi_ddiv>
 8009952:	ec41 0b1a 	vmov	d10, r0, r1
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	4630      	mov	r0, r6
 800995c:	4639      	mov	r1, r7
 800995e:	f7f6 fe4b 	bl	80005f8 <__aeabi_dmul>
 8009962:	2300      	movs	r3, #0
 8009964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009968:	9302      	str	r3, [sp, #8]
 800996a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800996e:	46ab      	mov	fp, r5
 8009970:	106d      	asrs	r5, r5, #1
 8009972:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009976:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800997a:	ec41 0b18 	vmov	d8, r0, r1
 800997e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009982:	2200      	movs	r2, #0
 8009984:	4640      	mov	r0, r8
 8009986:	4649      	mov	r1, r9
 8009988:	4614      	mov	r4, r2
 800998a:	461d      	mov	r5, r3
 800998c:	f7f6 fe34 	bl	80005f8 <__aeabi_dmul>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4630      	mov	r0, r6
 8009996:	4639      	mov	r1, r7
 8009998:	f7f6 fc76 	bl	8000288 <__aeabi_dsub>
 800999c:	ec53 2b19 	vmov	r2, r3, d9
 80099a0:	4606      	mov	r6, r0
 80099a2:	460f      	mov	r7, r1
 80099a4:	4620      	mov	r0, r4
 80099a6:	4629      	mov	r1, r5
 80099a8:	f7f6 fc6e 	bl	8000288 <__aeabi_dsub>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	4650      	mov	r0, sl
 80099b2:	4659      	mov	r1, fp
 80099b4:	f7f6 fc68 	bl	8000288 <__aeabi_dsub>
 80099b8:	4642      	mov	r2, r8
 80099ba:	464b      	mov	r3, r9
 80099bc:	f7f6 fe1c 	bl	80005f8 <__aeabi_dmul>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	4630      	mov	r0, r6
 80099c6:	4639      	mov	r1, r7
 80099c8:	f7f6 fc5e 	bl	8000288 <__aeabi_dsub>
 80099cc:	ec53 2b1a 	vmov	r2, r3, d10
 80099d0:	f7f6 fe12 	bl	80005f8 <__aeabi_dmul>
 80099d4:	ec53 2b18 	vmov	r2, r3, d8
 80099d8:	ec41 0b19 	vmov	d9, r0, r1
 80099dc:	ec51 0b18 	vmov	r0, r1, d8
 80099e0:	f7f6 fe0a 	bl	80005f8 <__aeabi_dmul>
 80099e4:	a37c      	add	r3, pc, #496	; (adr r3, 8009bd8 <__ieee754_pow+0x708>)
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	4604      	mov	r4, r0
 80099ec:	460d      	mov	r5, r1
 80099ee:	f7f6 fe03 	bl	80005f8 <__aeabi_dmul>
 80099f2:	a37b      	add	r3, pc, #492	; (adr r3, 8009be0 <__ieee754_pow+0x710>)
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	f7f6 fc48 	bl	800028c <__adddf3>
 80099fc:	4622      	mov	r2, r4
 80099fe:	462b      	mov	r3, r5
 8009a00:	f7f6 fdfa 	bl	80005f8 <__aeabi_dmul>
 8009a04:	a378      	add	r3, pc, #480	; (adr r3, 8009be8 <__ieee754_pow+0x718>)
 8009a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0a:	f7f6 fc3f 	bl	800028c <__adddf3>
 8009a0e:	4622      	mov	r2, r4
 8009a10:	462b      	mov	r3, r5
 8009a12:	f7f6 fdf1 	bl	80005f8 <__aeabi_dmul>
 8009a16:	a376      	add	r3, pc, #472	; (adr r3, 8009bf0 <__ieee754_pow+0x720>)
 8009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1c:	f7f6 fc36 	bl	800028c <__adddf3>
 8009a20:	4622      	mov	r2, r4
 8009a22:	462b      	mov	r3, r5
 8009a24:	f7f6 fde8 	bl	80005f8 <__aeabi_dmul>
 8009a28:	a373      	add	r3, pc, #460	; (adr r3, 8009bf8 <__ieee754_pow+0x728>)
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	f7f6 fc2d 	bl	800028c <__adddf3>
 8009a32:	4622      	mov	r2, r4
 8009a34:	462b      	mov	r3, r5
 8009a36:	f7f6 fddf 	bl	80005f8 <__aeabi_dmul>
 8009a3a:	a371      	add	r3, pc, #452	; (adr r3, 8009c00 <__ieee754_pow+0x730>)
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	f7f6 fc24 	bl	800028c <__adddf3>
 8009a44:	4622      	mov	r2, r4
 8009a46:	4606      	mov	r6, r0
 8009a48:	460f      	mov	r7, r1
 8009a4a:	462b      	mov	r3, r5
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	4629      	mov	r1, r5
 8009a50:	f7f6 fdd2 	bl	80005f8 <__aeabi_dmul>
 8009a54:	4602      	mov	r2, r0
 8009a56:	460b      	mov	r3, r1
 8009a58:	4630      	mov	r0, r6
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	f7f6 fdcc 	bl	80005f8 <__aeabi_dmul>
 8009a60:	4642      	mov	r2, r8
 8009a62:	4604      	mov	r4, r0
 8009a64:	460d      	mov	r5, r1
 8009a66:	464b      	mov	r3, r9
 8009a68:	ec51 0b18 	vmov	r0, r1, d8
 8009a6c:	f7f6 fc0e 	bl	800028c <__adddf3>
 8009a70:	ec53 2b19 	vmov	r2, r3, d9
 8009a74:	f7f6 fdc0 	bl	80005f8 <__aeabi_dmul>
 8009a78:	4622      	mov	r2, r4
 8009a7a:	462b      	mov	r3, r5
 8009a7c:	f7f6 fc06 	bl	800028c <__adddf3>
 8009a80:	4642      	mov	r2, r8
 8009a82:	4682      	mov	sl, r0
 8009a84:	468b      	mov	fp, r1
 8009a86:	464b      	mov	r3, r9
 8009a88:	4640      	mov	r0, r8
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	f7f6 fdb4 	bl	80005f8 <__aeabi_dmul>
 8009a90:	4b6b      	ldr	r3, [pc, #428]	; (8009c40 <__ieee754_pow+0x770>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	4606      	mov	r6, r0
 8009a96:	460f      	mov	r7, r1
 8009a98:	f7f6 fbf8 	bl	800028c <__adddf3>
 8009a9c:	4652      	mov	r2, sl
 8009a9e:	465b      	mov	r3, fp
 8009aa0:	f7f6 fbf4 	bl	800028c <__adddf3>
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	460d      	mov	r5, r1
 8009aaa:	4602      	mov	r2, r0
 8009aac:	460b      	mov	r3, r1
 8009aae:	4640      	mov	r0, r8
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	f7f6 fda1 	bl	80005f8 <__aeabi_dmul>
 8009ab6:	4b62      	ldr	r3, [pc, #392]	; (8009c40 <__ieee754_pow+0x770>)
 8009ab8:	4680      	mov	r8, r0
 8009aba:	4689      	mov	r9, r1
 8009abc:	2200      	movs	r2, #0
 8009abe:	4620      	mov	r0, r4
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	f7f6 fbe1 	bl	8000288 <__aeabi_dsub>
 8009ac6:	4632      	mov	r2, r6
 8009ac8:	463b      	mov	r3, r7
 8009aca:	f7f6 fbdd 	bl	8000288 <__aeabi_dsub>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	4650      	mov	r0, sl
 8009ad4:	4659      	mov	r1, fp
 8009ad6:	f7f6 fbd7 	bl	8000288 <__aeabi_dsub>
 8009ada:	ec53 2b18 	vmov	r2, r3, d8
 8009ade:	f7f6 fd8b 	bl	80005f8 <__aeabi_dmul>
 8009ae2:	4622      	mov	r2, r4
 8009ae4:	4606      	mov	r6, r0
 8009ae6:	460f      	mov	r7, r1
 8009ae8:	462b      	mov	r3, r5
 8009aea:	ec51 0b19 	vmov	r0, r1, d9
 8009aee:	f7f6 fd83 	bl	80005f8 <__aeabi_dmul>
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	4630      	mov	r0, r6
 8009af8:	4639      	mov	r1, r7
 8009afa:	f7f6 fbc7 	bl	800028c <__adddf3>
 8009afe:	4606      	mov	r6, r0
 8009b00:	460f      	mov	r7, r1
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	4640      	mov	r0, r8
 8009b08:	4649      	mov	r1, r9
 8009b0a:	f7f6 fbbf 	bl	800028c <__adddf3>
 8009b0e:	a33e      	add	r3, pc, #248	; (adr r3, 8009c08 <__ieee754_pow+0x738>)
 8009b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b14:	2000      	movs	r0, #0
 8009b16:	4604      	mov	r4, r0
 8009b18:	460d      	mov	r5, r1
 8009b1a:	f7f6 fd6d 	bl	80005f8 <__aeabi_dmul>
 8009b1e:	4642      	mov	r2, r8
 8009b20:	ec41 0b18 	vmov	d8, r0, r1
 8009b24:	464b      	mov	r3, r9
 8009b26:	4620      	mov	r0, r4
 8009b28:	4629      	mov	r1, r5
 8009b2a:	f7f6 fbad 	bl	8000288 <__aeabi_dsub>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4630      	mov	r0, r6
 8009b34:	4639      	mov	r1, r7
 8009b36:	f7f6 fba7 	bl	8000288 <__aeabi_dsub>
 8009b3a:	a335      	add	r3, pc, #212	; (adr r3, 8009c10 <__ieee754_pow+0x740>)
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	f7f6 fd5a 	bl	80005f8 <__aeabi_dmul>
 8009b44:	a334      	add	r3, pc, #208	; (adr r3, 8009c18 <__ieee754_pow+0x748>)
 8009b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	460f      	mov	r7, r1
 8009b4e:	4620      	mov	r0, r4
 8009b50:	4629      	mov	r1, r5
 8009b52:	f7f6 fd51 	bl	80005f8 <__aeabi_dmul>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	4639      	mov	r1, r7
 8009b5e:	f7f6 fb95 	bl	800028c <__adddf3>
 8009b62:	9a07      	ldr	r2, [sp, #28]
 8009b64:	4b37      	ldr	r3, [pc, #220]	; (8009c44 <__ieee754_pow+0x774>)
 8009b66:	4413      	add	r3, r2
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	f7f6 fb8e 	bl	800028c <__adddf3>
 8009b70:	4682      	mov	sl, r0
 8009b72:	9805      	ldr	r0, [sp, #20]
 8009b74:	468b      	mov	fp, r1
 8009b76:	f7f6 fcd5 	bl	8000524 <__aeabi_i2d>
 8009b7a:	9a07      	ldr	r2, [sp, #28]
 8009b7c:	4b32      	ldr	r3, [pc, #200]	; (8009c48 <__ieee754_pow+0x778>)
 8009b7e:	4413      	add	r3, r2
 8009b80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b84:	4606      	mov	r6, r0
 8009b86:	460f      	mov	r7, r1
 8009b88:	4652      	mov	r2, sl
 8009b8a:	465b      	mov	r3, fp
 8009b8c:	ec51 0b18 	vmov	r0, r1, d8
 8009b90:	f7f6 fb7c 	bl	800028c <__adddf3>
 8009b94:	4642      	mov	r2, r8
 8009b96:	464b      	mov	r3, r9
 8009b98:	f7f6 fb78 	bl	800028c <__adddf3>
 8009b9c:	4632      	mov	r2, r6
 8009b9e:	463b      	mov	r3, r7
 8009ba0:	f7f6 fb74 	bl	800028c <__adddf3>
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	4632      	mov	r2, r6
 8009ba8:	463b      	mov	r3, r7
 8009baa:	4604      	mov	r4, r0
 8009bac:	460d      	mov	r5, r1
 8009bae:	f7f6 fb6b 	bl	8000288 <__aeabi_dsub>
 8009bb2:	4642      	mov	r2, r8
 8009bb4:	464b      	mov	r3, r9
 8009bb6:	f7f6 fb67 	bl	8000288 <__aeabi_dsub>
 8009bba:	ec53 2b18 	vmov	r2, r3, d8
 8009bbe:	f7f6 fb63 	bl	8000288 <__aeabi_dsub>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4650      	mov	r0, sl
 8009bc8:	4659      	mov	r1, fp
 8009bca:	e610      	b.n	80097ee <__ieee754_pow+0x31e>
 8009bcc:	2401      	movs	r4, #1
 8009bce:	e6a1      	b.n	8009914 <__ieee754_pow+0x444>
 8009bd0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009c20 <__ieee754_pow+0x750>
 8009bd4:	e617      	b.n	8009806 <__ieee754_pow+0x336>
 8009bd6:	bf00      	nop
 8009bd8:	4a454eef 	.word	0x4a454eef
 8009bdc:	3fca7e28 	.word	0x3fca7e28
 8009be0:	93c9db65 	.word	0x93c9db65
 8009be4:	3fcd864a 	.word	0x3fcd864a
 8009be8:	a91d4101 	.word	0xa91d4101
 8009bec:	3fd17460 	.word	0x3fd17460
 8009bf0:	518f264d 	.word	0x518f264d
 8009bf4:	3fd55555 	.word	0x3fd55555
 8009bf8:	db6fabff 	.word	0xdb6fabff
 8009bfc:	3fdb6db6 	.word	0x3fdb6db6
 8009c00:	33333303 	.word	0x33333303
 8009c04:	3fe33333 	.word	0x3fe33333
 8009c08:	e0000000 	.word	0xe0000000
 8009c0c:	3feec709 	.word	0x3feec709
 8009c10:	dc3a03fd 	.word	0xdc3a03fd
 8009c14:	3feec709 	.word	0x3feec709
 8009c18:	145b01f5 	.word	0x145b01f5
 8009c1c:	be3e2fe0 	.word	0xbe3e2fe0
 8009c20:	00000000 	.word	0x00000000
 8009c24:	3ff00000 	.word	0x3ff00000
 8009c28:	7ff00000 	.word	0x7ff00000
 8009c2c:	43400000 	.word	0x43400000
 8009c30:	0003988e 	.word	0x0003988e
 8009c34:	000bb679 	.word	0x000bb679
 8009c38:	0800a740 	.word	0x0800a740
 8009c3c:	3ff00000 	.word	0x3ff00000
 8009c40:	40080000 	.word	0x40080000
 8009c44:	0800a760 	.word	0x0800a760
 8009c48:	0800a750 	.word	0x0800a750
 8009c4c:	a3b5      	add	r3, pc, #724	; (adr r3, 8009f24 <__ieee754_pow+0xa54>)
 8009c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c52:	4640      	mov	r0, r8
 8009c54:	4649      	mov	r1, r9
 8009c56:	f7f6 fb19 	bl	800028c <__adddf3>
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	ec41 0b1a 	vmov	d10, r0, r1
 8009c60:	462b      	mov	r3, r5
 8009c62:	4630      	mov	r0, r6
 8009c64:	4639      	mov	r1, r7
 8009c66:	f7f6 fb0f 	bl	8000288 <__aeabi_dsub>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	ec51 0b1a 	vmov	r0, r1, d10
 8009c72:	f7f6 ff51 	bl	8000b18 <__aeabi_dcmpgt>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	f47f ae04 	bne.w	8009884 <__ieee754_pow+0x3b4>
 8009c7c:	4aa4      	ldr	r2, [pc, #656]	; (8009f10 <__ieee754_pow+0xa40>)
 8009c7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c82:	4293      	cmp	r3, r2
 8009c84:	f340 8108 	ble.w	8009e98 <__ieee754_pow+0x9c8>
 8009c88:	151b      	asrs	r3, r3, #20
 8009c8a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009c8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009c92:	fa4a f303 	asr.w	r3, sl, r3
 8009c96:	445b      	add	r3, fp
 8009c98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009c9c:	4e9d      	ldr	r6, [pc, #628]	; (8009f14 <__ieee754_pow+0xa44>)
 8009c9e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009ca2:	4116      	asrs	r6, r2
 8009ca4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009ca8:	2000      	movs	r0, #0
 8009caa:	ea23 0106 	bic.w	r1, r3, r6
 8009cae:	f1c2 0214 	rsb	r2, r2, #20
 8009cb2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009cb6:	fa4a fa02 	asr.w	sl, sl, r2
 8009cba:	f1bb 0f00 	cmp.w	fp, #0
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	bfb8      	it	lt
 8009cc8:	f1ca 0a00 	rsblt	sl, sl, #0
 8009ccc:	f7f6 fadc 	bl	8000288 <__aeabi_dsub>
 8009cd0:	ec41 0b19 	vmov	d9, r0, r1
 8009cd4:	4642      	mov	r2, r8
 8009cd6:	464b      	mov	r3, r9
 8009cd8:	ec51 0b19 	vmov	r0, r1, d9
 8009cdc:	f7f6 fad6 	bl	800028c <__adddf3>
 8009ce0:	a37b      	add	r3, pc, #492	; (adr r3, 8009ed0 <__ieee754_pow+0xa00>)
 8009ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	4604      	mov	r4, r0
 8009cea:	460d      	mov	r5, r1
 8009cec:	f7f6 fc84 	bl	80005f8 <__aeabi_dmul>
 8009cf0:	ec53 2b19 	vmov	r2, r3, d9
 8009cf4:	4606      	mov	r6, r0
 8009cf6:	460f      	mov	r7, r1
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	f7f6 fac4 	bl	8000288 <__aeabi_dsub>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	4640      	mov	r0, r8
 8009d06:	4649      	mov	r1, r9
 8009d08:	f7f6 fabe 	bl	8000288 <__aeabi_dsub>
 8009d0c:	a372      	add	r3, pc, #456	; (adr r3, 8009ed8 <__ieee754_pow+0xa08>)
 8009d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d12:	f7f6 fc71 	bl	80005f8 <__aeabi_dmul>
 8009d16:	a372      	add	r3, pc, #456	; (adr r3, 8009ee0 <__ieee754_pow+0xa10>)
 8009d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1c:	4680      	mov	r8, r0
 8009d1e:	4689      	mov	r9, r1
 8009d20:	4620      	mov	r0, r4
 8009d22:	4629      	mov	r1, r5
 8009d24:	f7f6 fc68 	bl	80005f8 <__aeabi_dmul>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	4640      	mov	r0, r8
 8009d2e:	4649      	mov	r1, r9
 8009d30:	f7f6 faac 	bl	800028c <__adddf3>
 8009d34:	4604      	mov	r4, r0
 8009d36:	460d      	mov	r5, r1
 8009d38:	4602      	mov	r2, r0
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	4639      	mov	r1, r7
 8009d40:	f7f6 faa4 	bl	800028c <__adddf3>
 8009d44:	4632      	mov	r2, r6
 8009d46:	463b      	mov	r3, r7
 8009d48:	4680      	mov	r8, r0
 8009d4a:	4689      	mov	r9, r1
 8009d4c:	f7f6 fa9c 	bl	8000288 <__aeabi_dsub>
 8009d50:	4602      	mov	r2, r0
 8009d52:	460b      	mov	r3, r1
 8009d54:	4620      	mov	r0, r4
 8009d56:	4629      	mov	r1, r5
 8009d58:	f7f6 fa96 	bl	8000288 <__aeabi_dsub>
 8009d5c:	4642      	mov	r2, r8
 8009d5e:	4606      	mov	r6, r0
 8009d60:	460f      	mov	r7, r1
 8009d62:	464b      	mov	r3, r9
 8009d64:	4640      	mov	r0, r8
 8009d66:	4649      	mov	r1, r9
 8009d68:	f7f6 fc46 	bl	80005f8 <__aeabi_dmul>
 8009d6c:	a35e      	add	r3, pc, #376	; (adr r3, 8009ee8 <__ieee754_pow+0xa18>)
 8009d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d72:	4604      	mov	r4, r0
 8009d74:	460d      	mov	r5, r1
 8009d76:	f7f6 fc3f 	bl	80005f8 <__aeabi_dmul>
 8009d7a:	a35d      	add	r3, pc, #372	; (adr r3, 8009ef0 <__ieee754_pow+0xa20>)
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	f7f6 fa82 	bl	8000288 <__aeabi_dsub>
 8009d84:	4622      	mov	r2, r4
 8009d86:	462b      	mov	r3, r5
 8009d88:	f7f6 fc36 	bl	80005f8 <__aeabi_dmul>
 8009d8c:	a35a      	add	r3, pc, #360	; (adr r3, 8009ef8 <__ieee754_pow+0xa28>)
 8009d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d92:	f7f6 fa7b 	bl	800028c <__adddf3>
 8009d96:	4622      	mov	r2, r4
 8009d98:	462b      	mov	r3, r5
 8009d9a:	f7f6 fc2d 	bl	80005f8 <__aeabi_dmul>
 8009d9e:	a358      	add	r3, pc, #352	; (adr r3, 8009f00 <__ieee754_pow+0xa30>)
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	f7f6 fa70 	bl	8000288 <__aeabi_dsub>
 8009da8:	4622      	mov	r2, r4
 8009daa:	462b      	mov	r3, r5
 8009dac:	f7f6 fc24 	bl	80005f8 <__aeabi_dmul>
 8009db0:	a355      	add	r3, pc, #340	; (adr r3, 8009f08 <__ieee754_pow+0xa38>)
 8009db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db6:	f7f6 fa69 	bl	800028c <__adddf3>
 8009dba:	4622      	mov	r2, r4
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	f7f6 fc1b 	bl	80005f8 <__aeabi_dmul>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	4640      	mov	r0, r8
 8009dc8:	4649      	mov	r1, r9
 8009dca:	f7f6 fa5d 	bl	8000288 <__aeabi_dsub>
 8009dce:	4604      	mov	r4, r0
 8009dd0:	460d      	mov	r5, r1
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	4649      	mov	r1, r9
 8009dda:	f7f6 fc0d 	bl	80005f8 <__aeabi_dmul>
 8009dde:	2200      	movs	r2, #0
 8009de0:	ec41 0b19 	vmov	d9, r0, r1
 8009de4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009de8:	4620      	mov	r0, r4
 8009dea:	4629      	mov	r1, r5
 8009dec:	f7f6 fa4c 	bl	8000288 <__aeabi_dsub>
 8009df0:	4602      	mov	r2, r0
 8009df2:	460b      	mov	r3, r1
 8009df4:	ec51 0b19 	vmov	r0, r1, d9
 8009df8:	f7f6 fd28 	bl	800084c <__aeabi_ddiv>
 8009dfc:	4632      	mov	r2, r6
 8009dfe:	4604      	mov	r4, r0
 8009e00:	460d      	mov	r5, r1
 8009e02:	463b      	mov	r3, r7
 8009e04:	4640      	mov	r0, r8
 8009e06:	4649      	mov	r1, r9
 8009e08:	f7f6 fbf6 	bl	80005f8 <__aeabi_dmul>
 8009e0c:	4632      	mov	r2, r6
 8009e0e:	463b      	mov	r3, r7
 8009e10:	f7f6 fa3c 	bl	800028c <__adddf3>
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	4620      	mov	r0, r4
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	f7f6 fa34 	bl	8000288 <__aeabi_dsub>
 8009e20:	4642      	mov	r2, r8
 8009e22:	464b      	mov	r3, r9
 8009e24:	f7f6 fa30 	bl	8000288 <__aeabi_dsub>
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	493a      	ldr	r1, [pc, #232]	; (8009f18 <__ieee754_pow+0xa48>)
 8009e2e:	2000      	movs	r0, #0
 8009e30:	f7f6 fa2a 	bl	8000288 <__aeabi_dsub>
 8009e34:	ec41 0b10 	vmov	d0, r0, r1
 8009e38:	ee10 3a90 	vmov	r3, s1
 8009e3c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e44:	da2b      	bge.n	8009e9e <__ieee754_pow+0x9ce>
 8009e46:	4650      	mov	r0, sl
 8009e48:	f000 f966 	bl	800a118 <scalbn>
 8009e4c:	ec51 0b10 	vmov	r0, r1, d0
 8009e50:	ec53 2b18 	vmov	r2, r3, d8
 8009e54:	f7ff bbed 	b.w	8009632 <__ieee754_pow+0x162>
 8009e58:	4b30      	ldr	r3, [pc, #192]	; (8009f1c <__ieee754_pow+0xa4c>)
 8009e5a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009e5e:	429e      	cmp	r6, r3
 8009e60:	f77f af0c 	ble.w	8009c7c <__ieee754_pow+0x7ac>
 8009e64:	4b2e      	ldr	r3, [pc, #184]	; (8009f20 <__ieee754_pow+0xa50>)
 8009e66:	440b      	add	r3, r1
 8009e68:	4303      	orrs	r3, r0
 8009e6a:	d009      	beq.n	8009e80 <__ieee754_pow+0x9b0>
 8009e6c:	ec51 0b18 	vmov	r0, r1, d8
 8009e70:	2200      	movs	r2, #0
 8009e72:	2300      	movs	r3, #0
 8009e74:	f7f6 fe32 	bl	8000adc <__aeabi_dcmplt>
 8009e78:	3800      	subs	r0, #0
 8009e7a:	bf18      	it	ne
 8009e7c:	2001      	movne	r0, #1
 8009e7e:	e447      	b.n	8009710 <__ieee754_pow+0x240>
 8009e80:	4622      	mov	r2, r4
 8009e82:	462b      	mov	r3, r5
 8009e84:	f7f6 fa00 	bl	8000288 <__aeabi_dsub>
 8009e88:	4642      	mov	r2, r8
 8009e8a:	464b      	mov	r3, r9
 8009e8c:	f7f6 fe3a 	bl	8000b04 <__aeabi_dcmpge>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	f43f aef3 	beq.w	8009c7c <__ieee754_pow+0x7ac>
 8009e96:	e7e9      	b.n	8009e6c <__ieee754_pow+0x99c>
 8009e98:	f04f 0a00 	mov.w	sl, #0
 8009e9c:	e71a      	b.n	8009cd4 <__ieee754_pow+0x804>
 8009e9e:	ec51 0b10 	vmov	r0, r1, d0
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	e7d4      	b.n	8009e50 <__ieee754_pow+0x980>
 8009ea6:	491c      	ldr	r1, [pc, #112]	; (8009f18 <__ieee754_pow+0xa48>)
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	f7ff bb30 	b.w	800950e <__ieee754_pow+0x3e>
 8009eae:	2000      	movs	r0, #0
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	f7ff bb2c 	b.w	800950e <__ieee754_pow+0x3e>
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	4639      	mov	r1, r7
 8009eba:	f7ff bb28 	b.w	800950e <__ieee754_pow+0x3e>
 8009ebe:	9204      	str	r2, [sp, #16]
 8009ec0:	f7ff bb7a 	b.w	80095b8 <__ieee754_pow+0xe8>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f7ff bb64 	b.w	8009592 <__ieee754_pow+0xc2>
 8009eca:	bf00      	nop
 8009ecc:	f3af 8000 	nop.w
 8009ed0:	00000000 	.word	0x00000000
 8009ed4:	3fe62e43 	.word	0x3fe62e43
 8009ed8:	fefa39ef 	.word	0xfefa39ef
 8009edc:	3fe62e42 	.word	0x3fe62e42
 8009ee0:	0ca86c39 	.word	0x0ca86c39
 8009ee4:	be205c61 	.word	0xbe205c61
 8009ee8:	72bea4d0 	.word	0x72bea4d0
 8009eec:	3e663769 	.word	0x3e663769
 8009ef0:	c5d26bf1 	.word	0xc5d26bf1
 8009ef4:	3ebbbd41 	.word	0x3ebbbd41
 8009ef8:	af25de2c 	.word	0xaf25de2c
 8009efc:	3f11566a 	.word	0x3f11566a
 8009f00:	16bebd93 	.word	0x16bebd93
 8009f04:	3f66c16c 	.word	0x3f66c16c
 8009f08:	5555553e 	.word	0x5555553e
 8009f0c:	3fc55555 	.word	0x3fc55555
 8009f10:	3fe00000 	.word	0x3fe00000
 8009f14:	000fffff 	.word	0x000fffff
 8009f18:	3ff00000 	.word	0x3ff00000
 8009f1c:	4090cbff 	.word	0x4090cbff
 8009f20:	3f6f3400 	.word	0x3f6f3400
 8009f24:	652b82fe 	.word	0x652b82fe
 8009f28:	3c971547 	.word	0x3c971547

08009f2c <__ieee754_sqrt>:
 8009f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f30:	ec55 4b10 	vmov	r4, r5, d0
 8009f34:	4e55      	ldr	r6, [pc, #340]	; (800a08c <__ieee754_sqrt+0x160>)
 8009f36:	43ae      	bics	r6, r5
 8009f38:	ee10 0a10 	vmov	r0, s0
 8009f3c:	ee10 3a10 	vmov	r3, s0
 8009f40:	462a      	mov	r2, r5
 8009f42:	4629      	mov	r1, r5
 8009f44:	d110      	bne.n	8009f68 <__ieee754_sqrt+0x3c>
 8009f46:	ee10 2a10 	vmov	r2, s0
 8009f4a:	462b      	mov	r3, r5
 8009f4c:	f7f6 fb54 	bl	80005f8 <__aeabi_dmul>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	4620      	mov	r0, r4
 8009f56:	4629      	mov	r1, r5
 8009f58:	f7f6 f998 	bl	800028c <__adddf3>
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	460d      	mov	r5, r1
 8009f60:	ec45 4b10 	vmov	d0, r4, r5
 8009f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f68:	2d00      	cmp	r5, #0
 8009f6a:	dc10      	bgt.n	8009f8e <__ieee754_sqrt+0x62>
 8009f6c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009f70:	4330      	orrs	r0, r6
 8009f72:	d0f5      	beq.n	8009f60 <__ieee754_sqrt+0x34>
 8009f74:	b15d      	cbz	r5, 8009f8e <__ieee754_sqrt+0x62>
 8009f76:	ee10 2a10 	vmov	r2, s0
 8009f7a:	462b      	mov	r3, r5
 8009f7c:	ee10 0a10 	vmov	r0, s0
 8009f80:	f7f6 f982 	bl	8000288 <__aeabi_dsub>
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	f7f6 fc60 	bl	800084c <__aeabi_ddiv>
 8009f8c:	e7e6      	b.n	8009f5c <__ieee754_sqrt+0x30>
 8009f8e:	1512      	asrs	r2, r2, #20
 8009f90:	d074      	beq.n	800a07c <__ieee754_sqrt+0x150>
 8009f92:	07d4      	lsls	r4, r2, #31
 8009f94:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009f98:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009f9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009fa0:	bf5e      	ittt	pl
 8009fa2:	0fda      	lsrpl	r2, r3, #31
 8009fa4:	005b      	lslpl	r3, r3, #1
 8009fa6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009faa:	2400      	movs	r4, #0
 8009fac:	0fda      	lsrs	r2, r3, #31
 8009fae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009fb2:	107f      	asrs	r7, r7, #1
 8009fb4:	005b      	lsls	r3, r3, #1
 8009fb6:	2516      	movs	r5, #22
 8009fb8:	4620      	mov	r0, r4
 8009fba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009fbe:	1886      	adds	r6, r0, r2
 8009fc0:	428e      	cmp	r6, r1
 8009fc2:	bfde      	ittt	le
 8009fc4:	1b89      	suble	r1, r1, r6
 8009fc6:	18b0      	addle	r0, r6, r2
 8009fc8:	18a4      	addle	r4, r4, r2
 8009fca:	0049      	lsls	r1, r1, #1
 8009fcc:	3d01      	subs	r5, #1
 8009fce:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009fd2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009fd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009fda:	d1f0      	bne.n	8009fbe <__ieee754_sqrt+0x92>
 8009fdc:	462a      	mov	r2, r5
 8009fde:	f04f 0e20 	mov.w	lr, #32
 8009fe2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009fe6:	4281      	cmp	r1, r0
 8009fe8:	eb06 0c05 	add.w	ip, r6, r5
 8009fec:	dc02      	bgt.n	8009ff4 <__ieee754_sqrt+0xc8>
 8009fee:	d113      	bne.n	800a018 <__ieee754_sqrt+0xec>
 8009ff0:	459c      	cmp	ip, r3
 8009ff2:	d811      	bhi.n	800a018 <__ieee754_sqrt+0xec>
 8009ff4:	f1bc 0f00 	cmp.w	ip, #0
 8009ff8:	eb0c 0506 	add.w	r5, ip, r6
 8009ffc:	da43      	bge.n	800a086 <__ieee754_sqrt+0x15a>
 8009ffe:	2d00      	cmp	r5, #0
 800a000:	db41      	blt.n	800a086 <__ieee754_sqrt+0x15a>
 800a002:	f100 0801 	add.w	r8, r0, #1
 800a006:	1a09      	subs	r1, r1, r0
 800a008:	459c      	cmp	ip, r3
 800a00a:	bf88      	it	hi
 800a00c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a010:	eba3 030c 	sub.w	r3, r3, ip
 800a014:	4432      	add	r2, r6
 800a016:	4640      	mov	r0, r8
 800a018:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a01c:	f1be 0e01 	subs.w	lr, lr, #1
 800a020:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a024:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a028:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a02c:	d1db      	bne.n	8009fe6 <__ieee754_sqrt+0xba>
 800a02e:	430b      	orrs	r3, r1
 800a030:	d006      	beq.n	800a040 <__ieee754_sqrt+0x114>
 800a032:	1c50      	adds	r0, r2, #1
 800a034:	bf13      	iteet	ne
 800a036:	3201      	addne	r2, #1
 800a038:	3401      	addeq	r4, #1
 800a03a:	4672      	moveq	r2, lr
 800a03c:	f022 0201 	bicne.w	r2, r2, #1
 800a040:	1063      	asrs	r3, r4, #1
 800a042:	0852      	lsrs	r2, r2, #1
 800a044:	07e1      	lsls	r1, r4, #31
 800a046:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a04a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a04e:	bf48      	it	mi
 800a050:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a054:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a058:	4614      	mov	r4, r2
 800a05a:	e781      	b.n	8009f60 <__ieee754_sqrt+0x34>
 800a05c:	0ad9      	lsrs	r1, r3, #11
 800a05e:	3815      	subs	r0, #21
 800a060:	055b      	lsls	r3, r3, #21
 800a062:	2900      	cmp	r1, #0
 800a064:	d0fa      	beq.n	800a05c <__ieee754_sqrt+0x130>
 800a066:	02cd      	lsls	r5, r1, #11
 800a068:	d50a      	bpl.n	800a080 <__ieee754_sqrt+0x154>
 800a06a:	f1c2 0420 	rsb	r4, r2, #32
 800a06e:	fa23 f404 	lsr.w	r4, r3, r4
 800a072:	1e55      	subs	r5, r2, #1
 800a074:	4093      	lsls	r3, r2
 800a076:	4321      	orrs	r1, r4
 800a078:	1b42      	subs	r2, r0, r5
 800a07a:	e78a      	b.n	8009f92 <__ieee754_sqrt+0x66>
 800a07c:	4610      	mov	r0, r2
 800a07e:	e7f0      	b.n	800a062 <__ieee754_sqrt+0x136>
 800a080:	0049      	lsls	r1, r1, #1
 800a082:	3201      	adds	r2, #1
 800a084:	e7ef      	b.n	800a066 <__ieee754_sqrt+0x13a>
 800a086:	4680      	mov	r8, r0
 800a088:	e7bd      	b.n	800a006 <__ieee754_sqrt+0xda>
 800a08a:	bf00      	nop
 800a08c:	7ff00000 	.word	0x7ff00000

0800a090 <with_errno>:
 800a090:	b570      	push	{r4, r5, r6, lr}
 800a092:	4604      	mov	r4, r0
 800a094:	460d      	mov	r5, r1
 800a096:	4616      	mov	r6, r2
 800a098:	f7fa fd08 	bl	8004aac <__errno>
 800a09c:	4629      	mov	r1, r5
 800a09e:	6006      	str	r6, [r0, #0]
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	bd70      	pop	{r4, r5, r6, pc}

0800a0a4 <xflow>:
 800a0a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0a6:	4614      	mov	r4, r2
 800a0a8:	461d      	mov	r5, r3
 800a0aa:	b108      	cbz	r0, 800a0b0 <xflow+0xc>
 800a0ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a0b0:	e9cd 2300 	strd	r2, r3, [sp]
 800a0b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	f7f6 fa9c 	bl	80005f8 <__aeabi_dmul>
 800a0c0:	2222      	movs	r2, #34	; 0x22
 800a0c2:	b003      	add	sp, #12
 800a0c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0c8:	f7ff bfe2 	b.w	800a090 <with_errno>

0800a0cc <__math_uflow>:
 800a0cc:	b508      	push	{r3, lr}
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a0d4:	f7ff ffe6 	bl	800a0a4 <xflow>
 800a0d8:	ec41 0b10 	vmov	d0, r0, r1
 800a0dc:	bd08      	pop	{r3, pc}

0800a0de <__math_oflow>:
 800a0de:	b508      	push	{r3, lr}
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a0e6:	f7ff ffdd 	bl	800a0a4 <xflow>
 800a0ea:	ec41 0b10 	vmov	d0, r0, r1
 800a0ee:	bd08      	pop	{r3, pc}

0800a0f0 <fabs>:
 800a0f0:	ec51 0b10 	vmov	r0, r1, d0
 800a0f4:	ee10 2a10 	vmov	r2, s0
 800a0f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0fc:	ec43 2b10 	vmov	d0, r2, r3
 800a100:	4770      	bx	lr

0800a102 <finite>:
 800a102:	b082      	sub	sp, #8
 800a104:	ed8d 0b00 	vstr	d0, [sp]
 800a108:	9801      	ldr	r0, [sp, #4]
 800a10a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a10e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a112:	0fc0      	lsrs	r0, r0, #31
 800a114:	b002      	add	sp, #8
 800a116:	4770      	bx	lr

0800a118 <scalbn>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	ec55 4b10 	vmov	r4, r5, d0
 800a11e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a122:	4606      	mov	r6, r0
 800a124:	462b      	mov	r3, r5
 800a126:	b99a      	cbnz	r2, 800a150 <scalbn+0x38>
 800a128:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a12c:	4323      	orrs	r3, r4
 800a12e:	d036      	beq.n	800a19e <scalbn+0x86>
 800a130:	4b39      	ldr	r3, [pc, #228]	; (800a218 <scalbn+0x100>)
 800a132:	4629      	mov	r1, r5
 800a134:	ee10 0a10 	vmov	r0, s0
 800a138:	2200      	movs	r2, #0
 800a13a:	f7f6 fa5d 	bl	80005f8 <__aeabi_dmul>
 800a13e:	4b37      	ldr	r3, [pc, #220]	; (800a21c <scalbn+0x104>)
 800a140:	429e      	cmp	r6, r3
 800a142:	4604      	mov	r4, r0
 800a144:	460d      	mov	r5, r1
 800a146:	da10      	bge.n	800a16a <scalbn+0x52>
 800a148:	a32b      	add	r3, pc, #172	; (adr r3, 800a1f8 <scalbn+0xe0>)
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	e03a      	b.n	800a1c6 <scalbn+0xae>
 800a150:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a154:	428a      	cmp	r2, r1
 800a156:	d10c      	bne.n	800a172 <scalbn+0x5a>
 800a158:	ee10 2a10 	vmov	r2, s0
 800a15c:	4620      	mov	r0, r4
 800a15e:	4629      	mov	r1, r5
 800a160:	f7f6 f894 	bl	800028c <__adddf3>
 800a164:	4604      	mov	r4, r0
 800a166:	460d      	mov	r5, r1
 800a168:	e019      	b.n	800a19e <scalbn+0x86>
 800a16a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a16e:	460b      	mov	r3, r1
 800a170:	3a36      	subs	r2, #54	; 0x36
 800a172:	4432      	add	r2, r6
 800a174:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a178:	428a      	cmp	r2, r1
 800a17a:	dd08      	ble.n	800a18e <scalbn+0x76>
 800a17c:	2d00      	cmp	r5, #0
 800a17e:	a120      	add	r1, pc, #128	; (adr r1, 800a200 <scalbn+0xe8>)
 800a180:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a184:	da1c      	bge.n	800a1c0 <scalbn+0xa8>
 800a186:	a120      	add	r1, pc, #128	; (adr r1, 800a208 <scalbn+0xf0>)
 800a188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a18c:	e018      	b.n	800a1c0 <scalbn+0xa8>
 800a18e:	2a00      	cmp	r2, #0
 800a190:	dd08      	ble.n	800a1a4 <scalbn+0x8c>
 800a192:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a196:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a19a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a19e:	ec45 4b10 	vmov	d0, r4, r5
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}
 800a1a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a1a8:	da19      	bge.n	800a1de <scalbn+0xc6>
 800a1aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a1ae:	429e      	cmp	r6, r3
 800a1b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a1b4:	dd0a      	ble.n	800a1cc <scalbn+0xb4>
 800a1b6:	a112      	add	r1, pc, #72	; (adr r1, 800a200 <scalbn+0xe8>)
 800a1b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e2      	bne.n	800a186 <scalbn+0x6e>
 800a1c0:	a30f      	add	r3, pc, #60	; (adr r3, 800a200 <scalbn+0xe8>)
 800a1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c6:	f7f6 fa17 	bl	80005f8 <__aeabi_dmul>
 800a1ca:	e7cb      	b.n	800a164 <scalbn+0x4c>
 800a1cc:	a10a      	add	r1, pc, #40	; (adr r1, 800a1f8 <scalbn+0xe0>)
 800a1ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d0b8      	beq.n	800a148 <scalbn+0x30>
 800a1d6:	a10e      	add	r1, pc, #56	; (adr r1, 800a210 <scalbn+0xf8>)
 800a1d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1dc:	e7b4      	b.n	800a148 <scalbn+0x30>
 800a1de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1e2:	3236      	adds	r2, #54	; 0x36
 800a1e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a1e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	4b0c      	ldr	r3, [pc, #48]	; (800a220 <scalbn+0x108>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	e7e8      	b.n	800a1c6 <scalbn+0xae>
 800a1f4:	f3af 8000 	nop.w
 800a1f8:	c2f8f359 	.word	0xc2f8f359
 800a1fc:	01a56e1f 	.word	0x01a56e1f
 800a200:	8800759c 	.word	0x8800759c
 800a204:	7e37e43c 	.word	0x7e37e43c
 800a208:	8800759c 	.word	0x8800759c
 800a20c:	fe37e43c 	.word	0xfe37e43c
 800a210:	c2f8f359 	.word	0xc2f8f359
 800a214:	81a56e1f 	.word	0x81a56e1f
 800a218:	43500000 	.word	0x43500000
 800a21c:	ffff3cb0 	.word	0xffff3cb0
 800a220:	3c900000 	.word	0x3c900000

0800a224 <_init>:
 800a224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a226:	bf00      	nop
 800a228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a22a:	bc08      	pop	{r3}
 800a22c:	469e      	mov	lr, r3
 800a22e:	4770      	bx	lr

0800a230 <_fini>:
 800a230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a232:	bf00      	nop
 800a234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a236:	bc08      	pop	{r3}
 800a238:	469e      	mov	lr, r3
 800a23a:	4770      	bx	lr
