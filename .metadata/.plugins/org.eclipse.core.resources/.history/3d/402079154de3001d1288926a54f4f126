/*
 * dht11.c
 *
 *  Created on: Apr 13, 2023
 *      Author: LENOVO
 */


#include "dht11.h"

extern TIM_HandleTypeDef htim6;
extern DHT11_HandleTypeDef hdht11;
extern GPIO_InitTypeDef gpio_dht11;

uint8_t data[5] = {0x00, 0x00, 0x00, 0x00, 0x00}; //{integ_rh, dec_rh, integ_temp, dec_temp, check_sum}

void helper_delay_us(uint32_t us)
{
	__HAL_TIM_SET_COUNTER(&htim6, 0); // reset counter value
	while(__HAL_TIM_GET_COUNTER(&htim6) < us);
}

void set_DHT_Input_Output(uint8_t in_out)
{

	if(in_out == INPUT){
		gpio_dht11.Mode = GPIO_MODE_INPUT;
		HAL_GPIO_Init(DHT11_GPIO_Port, &gpio_dht11);
	}
	else if(in_out == OUTPUT){
		gpio_dht11.Mode = GPIO_MODE_OUTPUT_PP;
		HAL_GPIO_Init(DHT11_GPIO_Port, &gpio_dht11);
	}
}

uint8_t DHT11_Read_Value(DHT11_HandleTypeDef *hdht11)
{
	uint8_t i, j, check_time;

	HAL_TIM_Base_Start(&htim6);

	//initialize the sensor
	set_DHT_Input_Output(OUTPUT);
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
	helper_delay_us(20000); // 20ms

	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
	helper_delay_us(40); // 40us

	set_DHT_Input_Output(INPUT);

	__HAL_TIM_SET_COUNTER(&htim6, 0);
	while(!HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)){	// send out a low-voltage-level response signal, which lasts 80us
		if(__HAL_TIM_GET_COUNTER(&htim6) > 80)
			return 1;
	}

	__HAL_TIM_SET_COUNTER(&htim6, 0);
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)){
		if(__HAL_TIM_GET_COUNTER(&htim6) > 100) break;//return 1;
	}

	// start to read the sensor
	for(i = 0; i < 5; i++){
		for(j = 0; j < 8; j++){
			while(!HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin));

			//if HIGH for 26-28 us means 0 and 70us means 1
			__HAL_TIM_SET_COUNTER(&htim6, 0);

			while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin));

			check_time = __HAL_TIM_GET_COUNTER(&htim6);

			data[i] = data[i] << 1;

			if(check_time > 30) data[i] = data[i] + 1;
		}
	}
	if(data[4] != data[0] + data[1] + data[2] + data[3]) return 1; // check sum

	hdht11->humidity = (float) data[0] + (data[1] * 0.1f);
	hdht11->temperature = (float) data[2] + (data[3] * 0.1f);

	HAL_TIM_Base_Stop(&htim6);

	return SUCCESS;
}
