/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "LCD.h"
#include <stdio.h>
#include <stdlib.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
 ADC_HandleTypeDef hadc1;

I2C_HandleTypeDef hi2c1;

RTC_HandleTypeDef hrtc;

SPI_HandleTypeDef hspi2;

TIM_HandleTypeDef htim6;

UART_HandleTypeDef huart2;


/* USER CODE BEGIN PV */
DHT11_HandleTypeDef hdht11;
GPIO_InitTypeDef gpio_dht11;
PN532 pn532;

char ESP_Commands[3] = ""; // store remote DHT11 commands(0: no request, 1: DHT read request)
int ESP_Command_Converted = 0;
uint8_t buff[255];
uint8_t uid[MIFARE_UID_MAX_LENGTH];
static int32_t uid_len = 0;
static uint8_t card_uid[4] = {0x93, 0x10, 0xEB, 0x6};
float readings[2]; //dht11 readings to send it to ESP
int dht_data[2];
int  lock_check = 0;
int  light_status;
char tx_buff[100];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM6_Init(void);
static void MX_RTC_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
void sequential_sensor_reading(int ESP_Command_Converted);
void WiFiConnectionCheck(int ESP_Commands);
int RFID_Init(PN532* pn532, uint8_t* version);
void RFID_Access_Check(PN532* pn532, uint8_t card_baud, uint32_t timeout);
void night_light_control(int esp_command);
void DHT_Transmit(void);
void command_parser_check(char *ESP_Commands);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*TODO:
 * 		 1) add external RTC to show the time and regulated night light
 * 			(between 8pm and 6 am) (if there is no light)
 *		 2) add internal RTC to regulate sensor readings.
 *		 	(read DHT11 every 5 min if there is no remote request(ESP32))
 *		 3) add gas sensor.
 *		 4) write the algorithm using created libraries
 *		 5) connect STM32 to server by using ESP32 and control via app.
 *
*/
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_ADC1_Init();
  MX_USART2_UART_Init();
  MX_TIM6_Init();
  MX_RTC_Init();
  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
  RFID_Init(&pn532, buff);

  memset(&uid, 0, sizeof(uid));
  memset(ESP_Commands, '\0', 3 * sizeof(char));

  lcd_init();
  clearScreen();

  HAL_Delay(1000);
  for(;DHT11_Read_Value(&hdht11) != SUCCESS;);

  LCD_print(wifi_disconnected);
  LCD_print(DHT11);

  HAL_UART_Receive_IT(&huart2, (uint8_t*)ESP_Commands, sizeof(ESP_Commands));

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  command_parser_check(ESP_Commands);

	  WiFiConnectionCheck(ESP_Command_Converted); // check if there is Internet connection.
	  HAL_Delay(100);

	  sequential_sensor_reading(ESP_Command_Converted); // read temperature and humidity values every 5 minute.
	  LCD_print(RTC_Print);
	  HAL_Delay(100);

	  RFID_Access_Check(&pn532, PN532_MIFARE_ISO14443A, 1000);
	  night_light_control(ESP_Command_Converted);	//turn on night ligts betw 8pm and 6 am. can be turned on/off manually.

	  HAL_Delay(100);

	  /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}


/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 11;
  sTime.Minutes = 55;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
  sDate.Month = RTC_MONTH_DECEMBER;
  sDate.Date = 6;
  sDate.Year = 22;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 84-1;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 0xffff- 1;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;

  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Stepper_Out3_Pin|Stepper_Out4_Pin|Stepper_Out1_Pin|Stepper_Out2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Stepper_Out3_Pin Stepper_Out4_Pin Stepper_Out1_Pin Stepper_Out2_Pin */
  GPIO_InitStruct.Pin = Stepper_Out3_Pin|Stepper_Out4_Pin|Stepper_Out1_Pin|Stepper_Out2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : DHT11_Pin */
  gpio_dht11.Pin = DHT11_Pin;
  gpio_dht11.Mode = GPIO_MODE_OUTPUT_PP;
  gpio_dht11.Pull = GPIO_PULLUP;
  gpio_dht11.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(DHT11_GPIO_Port, &gpio_dht11);

  /*Configure LCD Screen*/
  GPIO_InitStruct.Pin = GPIO_PIN_13| GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure Relay pin*/
  GPIO_InitStruct.Pin = Relay_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Relay_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void sequential_sensor_reading(int ESP_Command_Converted)
{
	RTC_TimeTypeDef gTime;
	RTC_DateTypeDef gDate;
	float prev_humid = 0;
	float prev_temp = 0;

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);

	if( (gTime.Minutes % 5 == 0) || (ESP_Command_Converted == ESP_Command_DHT_Read) ){

		DHT11_Read_Value(&hdht11);

		readings[0] = hdht11.humidity;
		readings[1] = hdht11.temperature;

		DHT_Transmit();

		if(prev_humid != readings[0] || prev_temp != readings[1]){
			LCD_print(DHT11);
			prev_humid = readings[0];
			prev_temp  = readings[1];
		}
	}

}

void WiFiConnectionCheck(int ESP_Commands)
{
	  if(ESP_Commands == ESP_Command_WifiConnected){
		  LCD_print(wifi_connected);
	  }
	  else if(ESP_Commands == ESP_Command_No_WifiConnection){
		  LCD_print(wifi_disconnected);
	  }
}

int RFID_Init(PN532* pn532, uint8_t* version)
{
	PN532_I2C_Init(pn532);
	PN532_GetFirmwareVersion(pn532, version);
	if (PN532_GetFirmwareVersion(pn532, version) != PN532_STATUS_OK) {
		return -1;
	}

	PN532_SamConfiguration(pn532);

	return 0;
}

void RFID_Access_Check(PN532* pn532, uint8_t card_baud, uint32_t timeout)
{
	int i = 0, check = 0;
	uid_len = PN532_ReadPassiveTarget(pn532, uid, card_baud, timeout);

	if(uid[0] + uid[1] + uid[2] + uid[3] != 0){
		for(i = 0; i < 4; i++){
			if(uid[i] == card_uid[i]){
				check++;
			}
			else{
				check = -1;
			}
		}

		if(check == 4){
			LCD_print(RFID_Allowed);
			lock_check++;

			if(lock_check % 2 == 0){
				lock_control(LOCK_Activate, LOCK, RPM_MAX);
				LCD_print(LOCKED);
			}
			else if(lock_check % 2 == 1){
				lock_control(LOCK_Deactivate, UNLOCK, RPM_MAX);
				LCD_print(UNLOCKED);
			}
		}
		else if(check == -1){
			LCD_print(RFID_Denied);
		}
	}

	check = 0;
	memset(uid, 0, sizeof(uid));

}

void night_light_control(int esp_command)
{
	RTC_TimeTypeDef gTime;

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);

	if(esp_command == ESP_Command_Lights_Automatic){
		light_status = 1; // status automatic
	}
	else if(esp_command == ESP_Command_Lights_Manual){
		light_status = -1;
	}

	if((gTime.Hours >= 20 && gTime.Hours <= 6) &&  light_status == 1){
		HAL_GPIO_WritePin(Relay_Port, Relay_Pin, GPIO_PIN_SET);
	}
	else if((gTime.Hours > 6 && gTime.Hours < 20) && light_status == 1){
		HAL_GPIO_WritePin(Relay_Port, Relay_Pin, GPIO_PIN_RESET);
	}
	else if(esp_command == ESP_Command_Lights_On){
		HAL_GPIO_WritePin(Relay_Port, Relay_Pin, GPIO_PIN_SET);
		light_status = -1;
	}
	else if(esp_command == ESP_Command_Lights_Off){
		HAL_GPIO_WritePin(Relay_Port, Relay_Pin, GPIO_PIN_RESET);
		light_status = -1;
	}
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
/*	ESP_Command_Converted = atoi(ESP_Commands);
    memset(ESP_Commands, '\0', 4 * sizeof(char));*/
    HAL_UART_Receive_IT(&huart2, (uint8_t*)ESP_Commands, sizeof(ESP_Commands));
}

void DHT_Transmit(void)
{
	int temp;
	char  ch_temp[10];
	if(ESP_Command_Converted == 1){

		 temp = 100 * hdht11.temperature;
		 sprintf(tx_buff, "%d", temp);
		 strcat(tx_buff, "|");
		 temp = 100 * hdht11.humidity;
		 sprintf(ch_temp, "%d", temp);
		 strcat(tx_buff, ch_temp);
		 strcat(tx_buff, "|\r\n");
		 HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buff, sizeof(tx_buff));
 }

}

void command_parser_check(char *ESP_Commands)
{
	if((ESP_Commands[0] + ESP_Commands[1] + ESP_Commands[2] + ESP_Commands[3]) != 0){
		HAL_Delay(200);
		ESP_Command_Converted = atoi(ESP_Commands);
		HAL_Delay(100);
	}
	memset(ESP_Commands, '\0', 3 * sizeof(char));
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
