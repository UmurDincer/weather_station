/*
 * bmp180.c
 *
 *  Created on: Apr 13, 2023
 *      Author: LENOVO
 */

#include "bmp180.h"

extern I2C_HandleTypeDef hi2c1;

#define BMP180_CONTROL_REGISTER 0xF4

BMP180_Calibration_Data bmp180_calib;

int16_t ut = 0;
long  up = 0;
long  x1 = 0; x2, x3, b3, b5, b6, b7;
long  x2 = 0;
long  x3 = 0;
long  b3 = 0;
long  b5 = 0;
long  b6 = 0;
unsigned long b4 = 0;
unsigned long b7 = 0;

long pressure;
float temperature;
void bmp180_init(void) {
	uint8_t regAddr = BMP180_REG_CALIB_START;
	uint8_t calibData[22] = {0};


	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR_WRITE, regAddr, 1, calibData, 22, HAL_MAX_DELAY);

	bmp180_calib.ac1 = (int16_t)(((uint16_t)calibData[0] << 8) | calibData[1]);
	bmp180_calib.ac2 = (int16_t)(((uint16_t)calibData[2] << 8) | calibData[3]);
	bmp180_calib.ac3 = (int16_t)(((uint16_t)calibData[4] << 8) | calibData[5]);
	bmp180_calib.ac4 = (uint16_t)(((uint16_t)calibData[6] << 8) | calibData[7]);
	bmp180_calib.ac5 = (uint16_t)(((uint16_t)calibData[8] << 8) | calibData[9]);
	bmp180_calib.ac6 = (uint16_t)(((uint16_t)calibData[10] << 8) | calibData[11]);
	bmp180_calib.b1  = (int16_t)(((uint16_t)calibData[12] << 8) | calibData[13]);
	bmp180_calib.b2  = (int16_t)(((uint16_t)calibData[14] << 8) | calibData[15]);
	bmp180_calib.mb  = (int16_t)(((uint16_t)calibData[16] << 8) | calibData[17]);
	bmp180_calib.mc  = (int16_t)(((uint16_t)calibData[18] << 8) | calibData[19]);
	bmp180_calib.md  = (int16_t)(((uint16_t)calibData[20] << 8) | calibData[21]);

}


uint16_t uncompensated_temperature(void){
	uint8_t data_to_write = 0x2E; //temperature's stored address in CR
	uint8_t CR_addr = 0xF4; // control register address
	uint8_t raw_value[2] = {0};

	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDR_WRITE, CR_addr, 1, &data_to_write, 1, 1000);
	HAL_Delay(5); // max conversion time for temperature 4.5 ms
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR_WRITE, 0xF6, I2C_MEMADD_SIZE_8BIT, raw_value, 2, 1000); //read reg 0xF6(msb) and 0xF7(lsb)
	return ((raw_value[0] << 2) + raw_value[1]);
}
float bmp180_read_temperature(void) {

	ut = uncompensated_temperature();

	x1 = (float)(ut - bmp180_calib.ac6) * (float)(bmp180_calib.ac5 / (1 << 15));
	x2 = (float)(bmp180_calib.mc * (1 << 11)) / (float)(x1 + bmp180_calib.md);
	b5 = x1 + x2;
	temperature = (float)(b5 + 8) / (float)(1 << 4);

	return (temperature / 10.0);

}

uint32_t uncompensated_pressure(int oversampling){
	uint8_t write_data = 0x34 + (oss << 6);
	uint8_t raw_data[3] = {0};


	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDR_WRITE, 0xF4, 1, &write_data, 1, 1000);

	switch(oversampling)
	{
	case ultra_low_power:
		HAL_Delay(5);
		break;
	case standard:
		HAL_Delay(8);
		break;
	case high_resolution:
		HAL_Delay(14);
		break;
	case ultra_high_resolution:
		HAL_Delay(26);
		break;
	case advanced_resolution:
		HAL_Delay(77);
		break;
	default:
		break;
	}

	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR_WRITE, 0xF6, I2C_MEMADD_SIZE_8BIT, raw_data, 3, HAL_MAX_DELAY);

	return (((raw_data[0] << 16) + (raw_data[1] << 8) + raw_data[2]) >> (8 - oss));
}

float bmp180_read_pressure(uint8_t oss) {


	up = uncompensated_pressure(oss);
	x1 = ((ut - bmp180_calib.ac6) * (bmp180_calib.ac5 / ( 1 << 15)));
	x2 = ((bmp180_calib.mc*(1 << 11)) / (x1 + bmp180_calib.md));
	b5 = x1 + x2;
	b6 = b5 - 4000L;
	x1 = (bmp180_calib.b2 * (b6 * b6 / (1 << 12))) / (1 << 11);
	x2 = bmp180_calib.ac2 * b6 / (1 << 11);
	x3 = x1 + x2;
	b3 = ((((bmp180_calib.ac1 * 4 + x3) << oss) + 2) / 4);
	x1 = bmp180_calib.ac3 * b6 / (1 << 13);
	x2 = (bmp180_calib.b1 * (b6 * b6 /(1 << 12))) / (1 << 16);
	x3 = ((x1 + x2) + 2) / (1 << 2);
	b4 = bmp180_calib.ac4 * (unsigned long)(x3 + 32768) / (1 << 15);
	b7 = ((unsigned long)up - b3) * (50000 >> oss);
	if(b7 < 0x80000000) pressure = (b7 * 2) / b4; //pressure = (b7 << 1) / b4;
	else pressure = (b7 /b4) * 2;
	x1 = (pressure/(1 << 8)) * (pressure / (1 << 8));
	x1 = (x1 * 3038) / (1 << 16);
	x2 = (-7357 * pressure) / (1 << 16);
	pressure = pressure + ((x1 + x2+ 3791) / (1 << 4));

	return (float)(pressure);

}


float bmp180_read_altitude(int oss) {
	long int pressure = bmp180_read_pressure(oss);
	return (44330 * (1 - (pow(((float)pressure / (float) ATM_PRESSURE), 0.1903))));
}
