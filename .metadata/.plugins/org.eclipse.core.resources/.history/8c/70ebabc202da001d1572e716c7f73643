/*
 * bmp180.c
 *
 *  Created on: Apr 13, 2023
 *      Author: LENOVO
 */

#include "bmp180.h"

extern I2C_HandleTypeDef hi2c1;

#define BMP180_CONTROL_REGISTER 0xF4

BMP180_Calibration_Data bmp180_calib;


void bmp180_init(void) {
	uint8_t regAddr = BMP180_REG_CALIB_START;
	uint8_t calibData[22] = {0};

	if(HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR_WRITE, regAddr , 1, HAL_MAX_DELAY) != HAL_OK){
		return;
	}

	if(HAL_I2C_Master_Receive(&hi2c1, BMP180_ADDR_READ, calibData, 22, HAL_MAX_DELAY) != HAL_OK){
		return;
	}

	bmp180_calib.ac1 = (int16_t)(((uint16_t)calibData[0] << 8) | calibData[1]);
	bmp180_calib.ac2 = (int16_t)(((uint16_t)calibData[2] << 8) | calibData[3]);
	bmp180_calib.ac3 = (int16_t)(((uint16_t)calibData[4] << 8) | calibData[5]);
	bmp180_calib.ac4 = (uint16_t)(((uint16_t)calibData[6] << 8) | calibData[7]);
	bmp180_calib.ac5 = (uint16_t)(((uint16_t)calibData[8] << 8) | calibData[9]);
	bmp180_calib.ac6 = (uint16_t)(((uint16_t)calibData[10] << 8) | calibData[11]);
	bmp180_calib.b1  = (int16_t)(((uint16_t)calibData[12] << 8) | calibData[13]);
	bmp180_calib.b2  = (int16_t)(((uint16_t)calibData[14] << 8) | calibData[15]);
	bmp180_calib.mb  = (int16_t)(((uint16_t)calibData[16] << 8) | calibData[17]);
	bmp180_calib.mc  = (int16_t)(((uint16_t)calibData[18] << 8) | calibData[19]);
	bmp180_calib.md  = (int16_t)(((uint16_t)calibData[20] << 8) | calibData[21]);

}

float bmp180_read_temperature(void) {
	uint8_t CR_data[2] = {0xF4, 0x2E}; //CR[0] is control register address, CR[1] is temperature's address.
	int16_t ut = 0;
	long int x1, x2, b5; // 32 bit storage.
	float temperature;
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR_WRITE, CR_data, 2, HAL_MAX_DELAY)

	HAL_Delay(5); // max conversion time for temperature 4.5 ms

	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR_READ, 0xF6, I2C_MEMADD_SIZE_8BIT, CR_data, 2, HAL_MAX_DELAY);
	ut = CR_data[0] << 2 + CR_data[1];

	x1 = (ut - bmp180_calib.ac6) * (bmp180_calib.ac5 / (1 << 15));
	x2 = (bmp180_calib.mc * (1 << 11)) / (x1 + bmp180_calib.md);
	b5 = x1 + x2;
	temperature = (b5 + 8) / (1 << 4);

	return temperature;

}
